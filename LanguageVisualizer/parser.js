
var Parser = { };

(function(global, exports, module)
{
var compiledGrammar = {"table":[[0,"source",1],[0,"start",2],[4,3,4,3],[0,"_",5],[8,6],[6,7],[0,"SourceElements",8],[3,9,10,11],[4,12,13],[0,"WhiteSpace",14],[0,"LineTerminator",15],[0,"Comment",16],[0,"SourceElement",17],[6,18],[2,"[\\u0009\\u000B\\u000C\\u0020\\u00A0\\uFEFF\\u1680\\u180E\\u2000-\\u200A\\u202F\\u205F\\u3000]"],[2,"[\\u000A\\u000D\\u2028\\u2029]"],[3,19,20],[3,21,22],[4,3,12],[0,"MultiLineComment",23],[0,"SingleLineComment",24],[0,"Statement",25],[0,"FunctionDeclaration",26],[4,27,28,29],[4,30,31],[3,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49],[4,50,3,51,3,52,3,53,3,54,3,55,3,56,3,57],[5,"/*"],[6,58],[5,"*/"],[5,"//"],[6,59],[0,"Block",60],[0,"VariableStatement",61],[0,"EmptyStatement",62],[0,"ExpressionStatement",63],[0,"IfStatement",64],[0,"IterationStatement",65],[0,"ContinueStatement",66],[0,"BreakStatement",67],[0,"ReturnStatement",68],[0,"WithStatement",69],[0,"LabelledStatement",70],[0,"SwitchStatement",71],[0,"ThrowStatement",72],[0,"TryStatement",73],[0,"DebuggerStatement",74],[0,"ImportStatement",75],[0,"ClassDeclarationStatement",76],[0,"MessageStatement",77],[0,"FUNCTION",78],[0,"Identifier",79],[5,"("],[8,80],[5,")"],[5,"{"],[0,"FunctionBody",2],[5,"}"],[4,81,82],[0,"SingleLineCommentChar",83],[4,55,3,84,3,57],[4,85,3,86,87,88],[5,";"],[4,89,90,88],[4,91,3,52,3,90,3,54,3,21,92],[3,93,94,95,96,97],[4,98,99,100],[4,101,99,100],[4,102,99,103],[4,104,3,52,3,90,3,54,3,21],[4,51,3,105,3,21],[4,106,3,52,3,90,3,54,3,107],[4,108,99,103],[4,109,3,32,3,110],[4,111,88],[4,112,3,113,88],[4,114,3,51,3,115,3,116,3,117,3,118,88],[4,119,3,120,3,51,121,3,122],[4,123,124],[4,125,126],[0,"FormalParameterList",127],[9,29],[1],[4,128,82],[8,129],[0,"VAR",130],[0,"VariableDeclaration",131],[6,132],[0,"EOS",133],[9,134],[0,"Expression",135],[0,"IF",136],[8,137],[0,"DoWhileStatement",138],[0,"WhileStatement",139],[0,"ForStatement",140],[0,"ForInStatement",141],[0,"EachStatement",142],[0,"CONTINUE",143],[0,"__",144],[3,145,146],[0,"BREAK",147],[0,"RETURN",148],[3,146,149],[0,"WITH",150],[5,":"],[0,"SWITCH",151],[0,"CaseBlock",152],[0,"THROW",153],[0,"TRY",154],[3,155,156],[0,"DEBUGGER",157],[5,"@import"],[3,158,159],[5,"@implementation"],[8,160],[8,161],[0,"ClassBody",162],[5,"@end"],[5,"["],[3,163,90],[8,164],[5,"]"],[5,"function"],[9,165],[9,166],[0,"IdentifierName",167],[4,51,168],[9,10],[0,"StatementList",169],[4,170,124],[4,51,171],[4,3,172,3,86],[3,173,174,175,176],[3,55,50],[4,177,178],[4,179,124],[4,3,180,3,21],[4,181,3,21,3,182,3,52,3,90,3,54,88],[4,182,3,52,3,90,3,54,3,21],[4,183,3,52,3,184,3,62,3,185,3,62,3,185,3,54,3,21],[4,183,3,52,3,186,3,187,3,90,3,54,3,21],[4,188,3,52,3,186,3,187,3,90,3,54,3,21],[4,189,124],[6,190],[4,51,88],[0,"SemicolonInsertionEOS",191],[4,192,124],[4,193,124],[4,90,88],[4,194,124],[4,195,124],[4,55,3,196,3,197,3,196,3,57],[4,198,124],[4,199,124],[4,200,201],[0,"Finally",202],[4,203,124],[0,"LocalFilePath",204],[0,"StandardFilePath",205],[3,206,207],[4,55,208,3,57],[8,209],[0,"SuperExpression",210],[4,105,90,211],[0,"IdentifierPart",212],[4,213,124],[4,214,215],[6,216],[4,21,217],[5,"var"],[8,218],[5,","],[4,3,62],[4,99,219],[4,99,220],[4,99,221],[0,"AssignmentExpression",222],[6,223],[5,"if"],[0,"ELSE",224],[0,"DO",225],[0,"WHILE",226],[0,"FOR",227],[8,228],[8,90],[0,"ForInFirstExpression",229],[0,"IN",230],[5,"@each"],[5,"continue"],[3,9,231,20],[3,232,174,175,176],[5,"break"],[5,"return"],[5,"with"],[5,"switch"],[8,233],[8,234],[5,"throw"],[5,"try"],[0,"Catch",235],[8,236],[4,237,3,32],[5,"debugger"],[0,"StringLiteral",238],[4,239,3,240,3,241],[0,"SuperclassDeclaration",242],[0,"CategoryDeclaration",243],[6,244],[0,"ClassElements",245],[5,"super"],[6,246],[3,214,247,248,249,250,251],[0,"ReservedWord",252],[0,"IdentifierStart",253],[6,165],[4,3,172,3,51],[6,254],[4,3,255,256,3,177],[0,"LineTerminatorSequence",257],[10,57],[0,"EOF",258],[3,259,260],[4,3,172,3,177],[4,261,124],[4,262,124],[4,263,124],[4,264,124],[0,"ForFirstExpression",265],[3,266,267],[4,268,124],[0,"SingleLineMultiLineComment",269],[4,99,62],[0,"CaseClauses",270],[0,"DefaultClause",271],[4,272,3,52,3,51,3,54,3,32],[4,3,156],[0,"FINALLY",273],[3,274,275],[5,"<"],[6,276],[5,">"],[4,105,3,51],[4,52,3,51,3,54],[4,3,277],[4,278,279],[4,3,51,105,3,90],[0,"UnicodeCombiningMark",280],[0,"UnicodeDigit",281],[0,"UnicodeConnectorPunctuation",282],[0,"ZWNJ",283],[0,"ZWJ",284],[3,285,286,287,288],[3,289,290,291],[4,3,21],[5,"="],[9,255],[3,292,293,294,295,296],[9,82],[4,266,3,297,3,177],[0,"ConditionalExpression",298],[5,"else"],[5,"do"],[5,"while"],[5,"for"],[3,299,300],[0,"LeftHandSideExpression",301],[4,85,3,302],[5,"in"],[4,27,303,29],[4,304,305],[4,306,3,105,307],[0,"CATCH",308],[4,309,124],[4,310,311,310],[4,312,313,312],[3,314,315],[0,"CompoundIvarDeclaration",316],[0,"ClassElement",317],[6,318],[3,319,320,321,322,323,324],[3,325,326,327,328],[2,"[\\u005F\\u203F\\u2040\\u2054\\uFE33\\uFE34\\uFE4D-\\uFE4F\\uFF3F]"],[5,"\u200C"],[5,"\u200D"],[0,"Keyword",329],[0,"FutureReservedWord",330],[0,"NullLiteral",331],[0,"BooleanLiteral",332],[0,"UnicodeLetter",333],[2,"[$_]"],[4,334,335],[5,"\n"],[4,296,336],[5,"\u2028"],[5,"\u2029"],[5,"\r"],[0,"AssignmentOperator",337],[4,338,339],[0,"ExpressionNoIn",340],[4,85,3,341],[3,342,343],[0,"VariableDeclarationNoIn",344],[6,345],[0,"CaseClause",346],[6,347],[0,"DEFAULT",348],[8,349],[4,350,124],[5,"finally"],[5,"\""],[6,351],[5,"'"],[6,352],[5,"\\>"],[4,353,82],[4,354,3,355,356,88],[3,357,358,21,22],[4,3,278],[2,"[\\u0300-\\u036F\\u0483-\\u0487\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u0610-\\u061A\\u064B-\\u065F\\u0670\\u06D6-\\u06DC\\u06DF-\\u06E4\\u06E7\\u06E8\\u06EA-\\u06ED\\u0711\\u0730-\\u074A\\u07A6-\\u07B0\\u07EB-\\u07F3\\u0816-\\u0819\\u081B-\\u0823\\u0825-\\u0827\\u0829-\\u082D\\u0859-\\u085B\\u0900-\\u0902\\u093A\\u093C\\u0941-\\u0948\\u094D\\u0951-\\u0957\\u0962\\u0963\\u0981\\u09BC\\u09C1-\\u09C4\\u09CD\\u09E2\\u09E3\\u0A01\\u0A02\\u0A3C\\u0A41\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A70\\u0A71\\u0A75\\u0A81\\u0A82\\u0ABC\\u0AC1-\\u0AC5\\u0AC7\\u0AC8\\u0ACD\\u0AE2\\u0AE3\\u0B01\\u0B3C\\u0B3F\\u0B41-\\u0B44\\u0B4D\\u0B56\\u0B62\\u0B63\\u0B82\\u0BC0\\u0BCD\\u0C3E-\\u0C40\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C62\\u0C63\\u0CBC\\u0CBF\\u0CC6\\u0CCC\\u0CCD\\u0CE2\\u0CE3\\u0D41-\\u0D44\\u0D4D\\u0D62\\u0D63\\u0DCA\\u0DD2-\\u0DD4\\u0DD6\\u0E31\\u0E34-\\u0E3A\\u0E47-\\u0E4E\\u0EB1\\u0EB4-\\u0EB9\\u0EBB\\u0EBC\\u0EC8-\\u0ECD\\u0F18\\u0F19\\u0F35\\u0F37\\u0F39\\u0F71-\\u0F7E\\u0F80-\\u0F84\\u0F86\\u0F87\\u0F8D-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u102D-\\u1030\\u1032-\\u1037\\u1039\\u103A\\u103D\\u103E\\u1058\\u1059\\u105E-\\u1060\\u1071-\\u1074\\u1082\\u1085\\u1086\\u108D\\u109D\\u135D-\\u135F\\u1712-\\u1714\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17B7-\\u17BD\\u17C6\\u17C9-\\u17D3\\u17DD\\u180B-\\u180D\\u18A9\\u1920-\\u1922\\u1927\\u1928\\u1932\\u1939-\\u193B\\u1A17\\u1A18\\u1A56\\u1A58-\\u1A5E\\u1A60\\u1A62\\u1A65-\\u1A6C\\u1A73-\\u1A7C\\u1A7F\\u1B00-\\u1B03\\u1B34\\u1B36-\\u1B3A\\u1B3C\\u1B42\\u1B6B-\\u1B73\\u1B80\\u1B81\\u1BA2-\\u1BA5\\u1BA8\\u1BA9\\u1BE6\\u1BE8\\u1BE9\\u1BED\\u1BEF-\\u1BF1\\u1C2C-\\u1C33\\u1C36\\u1C37\\u1CD0-\\u1CD2\\u1CD4-\\u1CE0\\u1CE2-\\u1CE8\\u1CED\\u1DC0-\\u1DE6\\u1DFC-\\u1DFF\\u20D0-\\u20DC\\u20E1\\u20E5-\\u20F0\\u2CEF-\\u2CF1\\u2D7F\\u2DE0-\\u2DFF\\u302A-\\u302F\\u3099\\u309A\\uA66F\\uA67C\\uA67D\\uA6F0\\uA6F1\\uA802\\uA806\\uA80B\\uA825\\uA826\\uA8C4\\uA8E0-\\uA8F1\\uA926-\\uA92D\\uA947-\\uA951\\uA980-\\uA982\\uA9B3\\uA9B6-\\uA9B9\\uA9BC\\uAA29-\\uAA2E\\uAA31\\uAA32\\uAA35\\uAA36\\uAA43\\uAA4C\\uAAB0\\uAAB2-\\uAAB4\\uAAB7\\uAAB8\\uAABE\\uAABF\\uAAC1\\uABE5\\uABE8\\uABED\\uFB1E\\uFE00-\\uFE0F\\uFE20-\\uFE26\\u0903\\u093B\\u093E-\\u0940\\u0949-\\u094C\\u094E\\u094F\\u0982\\u0983\\u09BE-\\u09C0\\u09C7\\u09C8\\u09CB\\u09CC\\u09D7\\u0A03\\u0A3E-\\u0A40\\u0A83\\u0ABE-\\u0AC0\\u0AC9\\u0ACB\\u0ACC\\u0B02\\u0B03\\u0B3E\\u0B40\\u0B47\\u0B48\\u0B4B\\u0B4C\\u0B57\\u0BBE\\u0BBF\\u0BC1\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCC\\u0BD7\\u0C01-\\u0C03\\u0C41-\\u0C44\\u0C82\\u0C83\\u0CBE\\u0CC0-\\u0CC4\\u0CC7\\u0CC8\\u0CCA\\u0CCB\\u0CD5\\u0CD6\\u0D02\\u0D03\\u0D3E-\\u0D40\\u0D46-\\u0D48\\u0D4A-\\u0D4C\\u0D57\\u0D82\\u0D83\\u0DCF-\\u0DD1\\u0DD8-\\u0DDF\\u0DF2\\u0DF3\\u0F3E\\u0F3F\\u0F7F\\u102B\\u102C\\u1031\\u1038\\u103B\\u103C\\u1056\\u1057\\u1062-\\u1064\\u1067-\\u106D\\u1083\\u1084\\u1087-\\u108C\\u108F\\u109A-\\u109C\\u17B6\\u17BE-\\u17C5\\u17C7\\u17C8\\u1923-\\u1926\\u1929-\\u192B\\u1930\\u1931\\u1933-\\u1938\\u19B0-\\u19C0\\u19C8\\u19C9\\u1A19-\\u1A1B\\u1A55\\u1A57\\u1A61\\u1A63\\u1A64\\u1A6D-\\u1A72\\u1B04\\u1B35\\u1B3B\\u1B3D-\\u1B41\\u1B43\\u1B44\\u1B82\\u1BA1\\u1BA6\\u1BA7\\u1BAA\\u1BE7\\u1BEA-\\u1BEC\\u1BEE\\u1BF2\\u1BF3\\u1C24-\\u1C2B\\u1C34\\u1C35\\u1CE1\\u1CF2\\uA823\\uA824\\uA827\\uA880\\uA881\\uA8B4-\\uA8C3\\uA952\\uA953\\uA983\\uA9B4\\uA9B5\\uA9BA\\uA9BB\\uA9BD-\\uA9C0\\uAA2F\\uAA30\\uAA33\\uAA34\\uAA4D\\uAA7B\\uABE3\\uABE4\\uABE6\\uABE7\\uABE9\\uABEA\\uABEC]"],[4,359,360],[4,361,362],[4,363,364],[4,365,366],[4,367,368],[2,"[\\u0030-\\u0039\\u0660-\\u0669\\u06F0-\\u06F9\\u07C0-\\u07C9\\u0966-\\u096F\\u09E6-\\u09EF\\u0A66-\\u0A6F\\u0AE6-\\u0AEF\\u0B66-\\u0B6F\\u0BE6-\\u0BEF\\u0C66-\\u0C6F\\u0CE6-\\u0CEF\\u0D66-\\u0D6F\\u0E50-\\u0E59\\u0ED0-\\u0ED9\\u0F20-\\u0F29\\u1040-\\u1049\\u1090-\\u1099\\u17E0-\\u17E9\\u1810-\\u1819\\u1946-\\u194F\\u19D0-\\u19D9\\u1A80-\\u1A89\\u1A90-\\u1A99\\u1B50-\\u1B59\\u1BB0-\\u1BB9\\u1C40-\\u1C49\\u1C50-\\u1C59\\uA620-\\uA629\\uA8D0-\\uA8D9\\uA900-\\uA909\\uA9D0-\\uA9D9\\uAA50-\\uAA59\\uABF0-\\uABF9\\uFF10-\\uFF19]"],[4,369,370],[4,363,371],[4,372,373],[3,192,374,350,189,203,375,376,262,261,309,264,123,179,377,268,378,193,195,379,198,199,380,170,381,263,194],[3,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,210,407,408,409,410],[0,"NULL",411],[3,412,413],[3,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431],[5,"\\"],[0,"UnicodeEscapeSequence",432],[8,292],[3,433,434,435,436,437,438,439,440,441,442,443,444],[0,"LogicalOrExpression",445],[8,446],[4,447,448],[0,"VariableDeclarationListNoIn",449],[0,"CallExpression",450],[0,"NewExpression",451],[4,51,452],[4,81,128,82],[4,453,3,90,3,105,307],[4,3,304],[4,375,124],[4,3,129],[5,"catch"],[0,"DoubleStringCharacter",454],[0,"SingleStringCharacter",455],[9,241],[0,"IvarType",456],[0,"IvarDeclaration",457],[6,458],[0,"ClassMethodDeclaration",459],[0,"InstanceMethodDeclaration",460],[5,"\uDB40"],[2,"[\\uDD00-\\uDDEF]"],[5,"\uD834"],[2,"[\\uDD67-\\uDD69\\uDD7B-\\uDD82\\uDD85-\\uDD8B\\uDDAA-\\uDDAD\\uDE42-\\uDE44\\uDD65\\uDD66\\uDD6D-\\uDD72]"],[5,"\uD804"],[2,"[\\uDC01\\uDC38-\\uDC46\\uDC80\\uDC81\\uDCB3-\\uDCB6\\uDCB9\\uDCBA\\uDC00\\uDC02\\uDC82\\uDCB0-\\uDCB2\\uDCB7\\uDCB8]"],[5,"\uD800"],[2,"[\\uDDFD]"],[5,"\uD802"],[2,"[\\uDE01-\\uDE03\\uDE05\\uDE06\\uDE0C-\\uDE0F\\uDE38-\\uDE3A\\uDE3F]"],[5,"\uD835"],[2,"[\\uDFCE-\\uDFFF]"],[2,"[\\uDC66-\\uDC6F]"],[5,"\uD801"],[2,"[\\uDCA0-\\uDCA9]"],[5,"case"],[5,"default"],[5,"delete"],[5,"instanceof"],[5,"new"],[5,"this"],[5,"typeof"],[5,"void"],[5,"abstract"],[5,"boolean"],[5,"byte"],[5,"char"],[5,"class"],[5,"const"],[5,"double"],[5,"enum"],[5,"export"],[5,"extends"],[5,"final"],[5,"float"],[5,"goto"],[5,"implements"],[5,"import"],[5,"interface"],[5,"int"],[5,"long"],[5,"native"],[5,"package"],[5,"private"],[5,"protected"],[5,"public"],[5,"short"],[5,"static"],[5,"synchronized"],[5,"throws"],[5,"transient"],[5,"volatile"],[4,461,124],[0,"TRUE",462],[0,"FALSE",463],[2,"[\\u0041-\\u005A\\u00C0-\\u00D6\\u00D8-\\u00DE\\u0100\\u0102\\u0104\\u0106\\u0108\\u010A\\u010C\\u010E\\u0110\\u0112\\u0114\\u0116\\u0118\\u011A\\u011C\\u011E\\u0120\\u0122\\u0124\\u0126\\u0128\\u012A\\u012C\\u012E\\u0130\\u0132\\u0134\\u0136\\u0139\\u013B\\u013D\\u013F\\u0141\\u0143\\u0145\\u0147\\u014A\\u014C\\u014E\\u0150\\u0152\\u0154\\u0156\\u0158\\u015A\\u015C\\u015E\\u0160\\u0162\\u0164\\u0166\\u0168\\u016A\\u016C\\u016E\\u0170\\u0172\\u0174\\u0176\\u0178\\u0179\\u017B\\u017D\\u0181\\u0182\\u0184\\u0186\\u0187\\u0189-\\u018B\\u018E-\\u0191\\u0193\\u0194\\u0196-\\u0198\\u019C\\u019D\\u019F\\u01A0\\u01A2\\u01A4\\u01A6\\u01A7\\u01A9\\u01AC\\u01AE\\u01AF\\u01B1-\\u01B3\\u01B5\\u01B7\\u01B8\\u01BC\\u01C4\\u01C7\\u01CA\\u01CD\\u01CF\\u01D1\\u01D3\\u01D5\\u01D7\\u01D9\\u01DB\\u01DE\\u01E0\\u01E2\\u01E4\\u01E6\\u01E8\\u01EA\\u01EC\\u01EE\\u01F1\\u01F4\\u01F6-\\u01F8\\u01FA\\u01FC\\u01FE\\u0200\\u0202\\u0204\\u0206\\u0208\\u020A\\u020C\\u020E\\u0210\\u0212\\u0214\\u0216\\u0218\\u021A\\u021C\\u021E\\u0220\\u0222\\u0224\\u0226\\u0228\\u022A\\u022C\\u022E\\u0230\\u0232\\u023A\\u023B\\u023D\\u023E\\u0241\\u0243-\\u0246\\u0248\\u024A\\u024C\\u024E\\u0370\\u0372\\u0376\\u0386\\u0388-\\u038A\\u038C\\u038E\\u038F\\u0391-\\u03A1\\u03A3-\\u03AB\\u03CF\\u03D2-\\u03D4\\u03D8\\u03DA\\u03DC\\u03DE\\u03E0\\u03E2\\u03E4\\u03E6\\u03E8\\u03EA\\u03EC\\u03EE\\u03F4\\u03F7\\u03F9\\u03FA\\u03FD-\\u042F\\u0460\\u0462\\u0464\\u0466\\u0468\\u046A\\u046C\\u046E\\u0470\\u0472\\u0474\\u0476\\u0478\\u047A\\u047C\\u047E\\u0480\\u048A\\u048C\\u048E\\u0490\\u0492\\u0494\\u0496\\u0498\\u049A\\u049C\\u049E\\u04A0\\u04A2\\u04A4\\u04A6\\u04A8\\u04AA\\u04AC\\u04AE\\u04B0\\u04B2\\u04B4\\u04B6\\u04B8\\u04BA\\u04BC\\u04BE\\u04C0\\u04C1\\u04C3\\u04C5\\u04C7\\u04C9\\u04CB\\u04CD\\u04D0\\u04D2\\u04D4\\u04D6\\u04D8\\u04DA\\u04DC\\u04DE\\u04E0\\u04E2\\u04E4\\u04E6\\u04E8\\u04EA\\u04EC\\u04EE\\u04F0\\u04F2\\u04F4\\u04F6\\u04F8\\u04FA\\u04FC\\u04FE\\u0500\\u0502\\u0504\\u0506\\u0508\\u050A\\u050C\\u050E\\u0510\\u0512\\u0514\\u0516\\u0518\\u051A\\u051C\\u051E\\u0520\\u0522\\u0524\\u0526\\u0531-\\u0556\\u10A0-\\u10C5\\u1E00\\u1E02\\u1E04\\u1E06\\u1E08\\u1E0A\\u1E0C\\u1E0E\\u1E10\\u1E12\\u1E14\\u1E16\\u1E18\\u1E1A\\u1E1C\\u1E1E\\u1E20\\u1E22\\u1E24\\u1E26\\u1E28\\u1E2A\\u1E2C\\u1E2E\\u1E30\\u1E32\\u1E34\\u1E36\\u1E38\\u1E3A\\u1E3C\\u1E3E\\u1E40\\u1E42\\u1E44\\u1E46\\u1E48\\u1E4A\\u1E4C\\u1E4E\\u1E50\\u1E52\\u1E54\\u1E56\\u1E58\\u1E5A\\u1E5C\\u1E5E\\u1E60\\u1E62\\u1E64\\u1E66\\u1E68\\u1E6A\\u1E6C\\u1E6E\\u1E70\\u1E72\\u1E74\\u1E76\\u1E78\\u1E7A\\u1E7C\\u1E7E\\u1E80\\u1E82\\u1E84\\u1E86\\u1E88\\u1E8A\\u1E8C\\u1E8E\\u1E90\\u1E92\\u1E94\\u1E9E\\u1EA0\\u1EA2\\u1EA4\\u1EA6\\u1EA8\\u1EAA\\u1EAC\\u1EAE\\u1EB0\\u1EB2\\u1EB4\\u1EB6\\u1EB8\\u1EBA\\u1EBC\\u1EBE\\u1EC0\\u1EC2\\u1EC4\\u1EC6\\u1EC8\\u1ECA\\u1ECC\\u1ECE\\u1ED0\\u1ED2\\u1ED4\\u1ED6\\u1ED8\\u1EDA\\u1EDC\\u1EDE\\u1EE0\\u1EE2\\u1EE4\\u1EE6\\u1EE8\\u1EEA\\u1EEC\\u1EEE\\u1EF0\\u1EF2\\u1EF4\\u1EF6\\u1EF8\\u1EFA\\u1EFC\\u1EFE\\u1F08-\\u1F0F\\u1F18-\\u1F1D\\u1F28-\\u1F2F\\u1F38-\\u1F3F\\u1F48-\\u1F4D\\u1F59\\u1F5B\\u1F5D\\u1F5F\\u1F68-\\u1F6F\\u1FB8-\\u1FBB\\u1FC8-\\u1FCB\\u1FD8-\\u1FDB\\u1FE8-\\u1FEC\\u1FF8-\\u1FFB\\u2102\\u2107\\u210B-\\u210D\\u2110-\\u2112\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u2130-\\u2133\\u213E\\u213F\\u2145\\u2183\\u2C00-\\u2C2E\\u2C60\\u2C62-\\u2C64\\u2C67\\u2C69\\u2C6B\\u2C6D-\\u2C70\\u2C72\\u2C75\\u2C7E-\\u2C80\\u2C82\\u2C84\\u2C86\\u2C88\\u2C8A\\u2C8C\\u2C8E\\u2C90\\u2C92\\u2C94\\u2C96\\u2C98\\u2C9A\\u2C9C\\u2C9E\\u2CA0\\u2CA2\\u2CA4\\u2CA6\\u2CA8\\u2CAA\\u2CAC\\u2CAE\\u2CB0\\u2CB2\\u2CB4\\u2CB6\\u2CB8\\u2CBA\\u2CBC\\u2CBE\\u2CC0\\u2CC2\\u2CC4\\u2CC6\\u2CC8\\u2CCA\\u2CCC\\u2CCE\\u2CD0\\u2CD2\\u2CD4\\u2CD6\\u2CD8\\u2CDA\\u2CDC\\u2CDE\\u2CE0\\u2CE2\\u2CEB\\u2CED\\uA640\\uA642\\uA644\\uA646\\uA648\\uA64A\\uA64C\\uA64E\\uA650\\uA652\\uA654\\uA656\\uA658\\uA65A\\uA65C\\uA65E\\uA660\\uA662\\uA664\\uA666\\uA668\\uA66A\\uA66C\\uA680\\uA682\\uA684\\uA686\\uA688\\uA68A\\uA68C\\uA68E\\uA690\\uA692\\uA694\\uA696\\uA722\\uA724\\uA726\\uA728\\uA72A\\uA72C\\uA72E\\uA732\\uA734\\uA736\\uA738\\uA73A\\uA73C\\uA73E\\uA740\\uA742\\uA744\\uA746\\uA748\\uA74A\\uA74C\\uA74E\\uA750\\uA752\\uA754\\uA756\\uA758\\uA75A\\uA75C\\uA75E\\uA760\\uA762\\uA764\\uA766\\uA768\\uA76A\\uA76C\\uA76E\\uA779\\uA77B\\uA77D\\uA77E\\uA780\\uA782\\uA784\\uA786\\uA78B\\uA78D\\uA790\\uA7A0\\uA7A2\\uA7A4\\uA7A6\\uA7A8\\uFF21-\\uFF3A\\u0061-\\u007A\\u00AA\\u00B5\\u00BA\\u00DF-\\u00F6\\u00F8-\\u00FF\\u0101\\u0103\\u0105\\u0107\\u0109\\u010B\\u010D\\u010F\\u0111\\u0113\\u0115\\u0117\\u0119\\u011B\\u011D\\u011F\\u0121\\u0123\\u0125\\u0127\\u0129\\u012B\\u012D\\u012F\\u0131\\u0133\\u0135\\u0137\\u0138\\u013A\\u013C\\u013E\\u0140\\u0142\\u0144\\u0146\\u0148\\u0149\\u014B\\u014D\\u014F\\u0151\\u0153\\u0155\\u0157\\u0159\\u015B\\u015D\\u015F\\u0161\\u0163\\u0165\\u0167\\u0169\\u016B\\u016D\\u016F\\u0171\\u0173\\u0175\\u0177\\u017A\\u017C\\u017E-\\u0180\\u0183\\u0185\\u0188\\u018C\\u018D\\u0192\\u0195\\u0199-\\u019B\\u019E\\u01A1\\u01A3\\u01A5\\u01A8\\u01AA\\u01AB\\u01AD\\u01B0\\u01B4\\u01B6\\u01B9\\u01BA\\u01BD-\\u01BF\\u01C6\\u01C9\\u01CC\\u01CE\\u01D0\\u01D2\\u01D4\\u01D6\\u01D8\\u01DA\\u01DC\\u01DD\\u01DF\\u01E1\\u01E3\\u01E5\\u01E7\\u01E9\\u01EB\\u01ED\\u01EF\\u01F0\\u01F3\\u01F5\\u01F9\\u01FB\\u01FD\\u01FF\\u0201\\u0203\\u0205\\u0207\\u0209\\u020B\\u020D\\u020F\\u0211\\u0213\\u0215\\u0217\\u0219\\u021B\\u021D\\u021F\\u0221\\u0223\\u0225\\u0227\\u0229\\u022B\\u022D\\u022F\\u0231\\u0233-\\u0239\\u023C\\u023F\\u0240\\u0242\\u0247\\u0249\\u024B\\u024D\\u024F-\\u0293\\u0295-\\u02AF\\u0371\\u0373\\u0377\\u037B-\\u037D\\u0390\\u03AC-\\u03CE\\u03D0\\u03D1\\u03D5-\\u03D7\\u03D9\\u03DB\\u03DD\\u03DF\\u03E1\\u03E3\\u03E5\\u03E7\\u03E9\\u03EB\\u03ED\\u03EF-\\u03F3\\u03F5\\u03F8\\u03FB\\u03FC\\u0430-\\u045F\\u0461\\u0463\\u0465\\u0467\\u0469\\u046B\\u046D\\u046F\\u0471\\u0473\\u0475\\u0477\\u0479\\u047B\\u047D\\u047F\\u0481\\u048B\\u048D\\u048F\\u0491\\u0493\\u0495\\u0497\\u0499\\u049B\\u049D\\u049F\\u04A1\\u04A3\\u04A5\\u04A7\\u04A9\\u04AB\\u04AD\\u04AF\\u04B1\\u04B3\\u04B5\\u04B7\\u04B9\\u04BB\\u04BD\\u04BF\\u04C2\\u04C4\\u04C6\\u04C8\\u04CA\\u04CC\\u04CE\\u04CF\\u04D1\\u04D3\\u04D5\\u04D7\\u04D9\\u04DB\\u04DD\\u04DF\\u04E1\\u04E3\\u04E5\\u04E7\\u04E9\\u04EB\\u04ED\\u04EF\\u04F1\\u04F3\\u04F5\\u04F7\\u04F9\\u04FB\\u04FD\\u04FF\\u0501\\u0503\\u0505\\u0507\\u0509\\u050B\\u050D\\u050F\\u0511\\u0513\\u0515\\u0517\\u0519\\u051B\\u051D\\u051F\\u0521\\u0523\\u0525\\u0527\\u0561-\\u0587\\u1D00-\\u1D2B\\u1D62-\\u1D77\\u1D79-\\u1D9A\\u1E01\\u1E03\\u1E05\\u1E07\\u1E09\\u1E0B\\u1E0D\\u1E0F\\u1E11\\u1E13\\u1E15\\u1E17\\u1E19\\u1E1B\\u1E1D\\u1E1F\\u1E21\\u1E23\\u1E25\\u1E27\\u1E29\\u1E2B\\u1E2D\\u1E2F\\u1E31\\u1E33\\u1E35\\u1E37\\u1E39\\u1E3B\\u1E3D\\u1E3F\\u1E41\\u1E43\\u1E45\\u1E47\\u1E49\\u1E4B\\u1E4D\\u1E4F\\u1E51\\u1E53\\u1E55\\u1E57\\u1E59\\u1E5B\\u1E5D\\u1E5F\\u1E61\\u1E63\\u1E65\\u1E67\\u1E69\\u1E6B\\u1E6D\\u1E6F\\u1E71\\u1E73\\u1E75\\u1E77\\u1E79\\u1E7B\\u1E7D\\u1E7F\\u1E81\\u1E83\\u1E85\\u1E87\\u1E89\\u1E8B\\u1E8D\\u1E8F\\u1E91\\u1E93\\u1E95-\\u1E9D\\u1E9F\\u1EA1\\u1EA3\\u1EA5\\u1EA7\\u1EA9\\u1EAB\\u1EAD\\u1EAF\\u1EB1\\u1EB3\\u1EB5\\u1EB7\\u1EB9\\u1EBB\\u1EBD\\u1EBF\\u1EC1\\u1EC3\\u1EC5\\u1EC7\\u1EC9\\u1ECB\\u1ECD\\u1ECF\\u1ED1\\u1ED3\\u1ED5\\u1ED7\\u1ED9\\u1EDB\\u1EDD\\u1EDF\\u1EE1\\u1EE3\\u1EE5\\u1EE7\\u1EE9\\u1EEB\\u1EED\\u1EEF\\u1EF1\\u1EF3\\u1EF5\\u1EF7\\u1EF9\\u1EFB\\u1EFD\\u1EFF-\\u1F07\\u1F10-\\u1F15\\u1F20-\\u1F27\\u1F30-\\u1F37\\u1F40-\\u1F45\\u1F50-\\u1F57\\u1F60-\\u1F67\\u1F70-\\u1F7D\\u1F80-\\u1F87\\u1F90-\\u1F97\\u1FA0-\\u1FA7\\u1FB0-\\u1FB4\\u1FB6\\u1FB7\\u1FBE\\u1FC2-\\u1FC4\\u1FC6\\u1FC7\\u1FD0-\\u1FD3\\u1FD6\\u1FD7\\u1FE0-\\u1FE7\\u1FF2-\\u1FF4\\u1FF6\\u1FF7\\u210A\\u210E\\u210F\\u2113\\u212F\\u2134\\u2139\\u213C\\u213D\\u2146-\\u2149\\u214E\\u2184\\u2C30-\\u2C5E\\u2C61\\u2C65\\u2C66\\u2C68\\u2C6A\\u2C6C\\u2C71\\u2C73\\u2C74\\u2C76-\\u2C7C\\u2C81\\u2C83\\u2C85\\u2C87\\u2C89\\u2C8B\\u2C8D\\u2C8F\\u2C91\\u2C93\\u2C95\\u2C97\\u2C99\\u2C9B\\u2C9D\\u2C9F\\u2CA1\\u2CA3\\u2CA5\\u2CA7\\u2CA9\\u2CAB\\u2CAD\\u2CAF\\u2CB1\\u2CB3\\u2CB5\\u2CB7\\u2CB9\\u2CBB\\u2CBD\\u2CBF\\u2CC1\\u2CC3\\u2CC5\\u2CC7\\u2CC9\\u2CCB\\u2CCD\\u2CCF\\u2CD1\\u2CD3\\u2CD5\\u2CD7\\u2CD9\\u2CDB\\u2CDD\\u2CDF\\u2CE1\\u2CE3\\u2CE4\\u2CEC\\u2CEE\\u2D00-\\u2D25\\uA641\\uA643\\uA645\\uA647\\uA649\\uA64B\\uA64D\\uA64F\\uA651\\uA653\\uA655\\uA657\\uA659\\uA65B\\uA65D\\uA65F\\uA661\\uA663\\uA665\\uA667\\uA669\\uA66B\\uA66D\\uA681\\uA683\\uA685\\uA687\\uA689\\uA68B\\uA68D\\uA68F\\uA691\\uA693\\uA695\\uA697\\uA723\\uA725\\uA727\\uA729\\uA72B\\uA72D\\uA72F-\\uA731\\uA733\\uA735\\uA737\\uA739\\uA73B\\uA73D\\uA73F\\uA741\\uA743\\uA745\\uA747\\uA749\\uA74B\\uA74D\\uA74F\\uA751\\uA753\\uA755\\uA757\\uA759\\uA75B\\uA75D\\uA75F\\uA761\\uA763\\uA765\\uA767\\uA769\\uA76B\\uA76D\\uA76F\\uA771-\\uA778\\uA77A\\uA77C\\uA77F\\uA781\\uA783\\uA785\\uA787\\uA78C\\uA78E\\uA791\\uA7A1\\uA7A3\\uA7A5\\uA7A7\\uA7A9\\uA7FA\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFF41-\\uFF5A\\u01C5\\u01C8\\u01CB\\u01F2\\u1F88-\\u1F8F\\u1F98-\\u1F9F\\u1FA8-\\u1FAF\\u1FBC\\u1FCC\\u1FFC\\u02B0-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0374\\u037A\\u0559\\u0640\\u06E5\\u06E6\\u07F4\\u07F5\\u07FA\\u081A\\u0824\\u0828\\u0971\\u0E46\\u0EC6\\u10FC\\u17D7\\u1843\\u1AA7\\u1C78-\\u1C7D\\u1D2C-\\u1D61\\u1D78\\u1D9B-\\u1DBF\\u2071\\u207F\\u2090-\\u209C\\u2C7D\\u2D6F\\u2E2F\\u3005\\u3031-\\u3035\\u303B\\u309D\\u309E\\u30FC-\\u30FE\\uA015\\uA4F8-\\uA4FD\\uA60C\\uA67F\\uA717-\\uA71F\\uA770\\uA788\\uA9CF\\uAA70\\uAADD\\uFF70\\uFF9E\\uFF9F\\u01BB\\u01C0-\\u01C3\\u0294\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u063F\\u0641-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u0800-\\u0815\\u0840-\\u0858\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0972-\\u0977\\u0979-\\u097F\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C33\\u0C35-\\u0C39\\u0C3D\\u0C58\\u0C59\\u0C60\\u0C61\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D60\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E45\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EDC\\u0EDD\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10D0-\\u10FA\\u1100-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F4\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17DC\\u1820-\\u1842\\u1844-\\u1877\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191C\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19C1-\\u19C7\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BC0-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C77\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u2135-\\u2138\\u2D30-\\u2D65\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u3006\\u303C\\u3041-\\u3096\\u309F\\u30A1-\\u30FA\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400\\u4DB5\\u4E00\\u9FCB\\uA000-\\uA014\\uA016-\\uA48C\\uA4D0-\\uA4F7\\uA500-\\uA60B\\uA610-\\uA61F\\uA62A\\uA62B\\uA66E\\uA6A0-\\uA6E5\\uA7FB-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA6F\\uAA71-\\uAA76\\uAA7A\\uAA80-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB\\uAADC\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uABC0-\\uABE2\\uAC00\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA2D\\uFA30-\\uFA6D\\uFA70-\\uFAD9\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF66-\\uFF6F\\uFF71-\\uFF9D\\uFFA0-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC\\u16EE-\\u16F0\\u2160-\\u2182\\u2185-\\u2188\\u3007\\u3021-\\u3029\\u3038-\\u303A\\uA6E6-\\uA6EF]"],[4,464,465],[4,466,467],[4,468,469],[4,470,471],[4,369,472],[4,363,473],[4,365,474],[4,475,476],[4,372,477],[4,478,479],[4,480,481],[4,482,483],[4,484,485],[4,486,487],[4,488,489],[4,367,490],[4,491,492],[4,493,494,494,494,494],[4,255,256],[5,"*="],[5,"/="],[5,"%="],[5,"+="],[5,"-="],[5,"<<="],[5,">>="],[5,">>>="],[5,"&="],[5,"^="],[5,"|="],[4,495,496],[4,3,497,3,177,3,105,3,177],[0,"AssignmentExpressionNoIn",498],[6,499],[4,302,500],[4,501,3,502,503],[3,501,504],[8,505],[0,"CASE",506],[3,507,508,509],[3,510,508,509],[4,511,512],[4,51,3,513],[4,3,172,3,355],[4,514,515,3,516,3,517,3,55,3,56,3,57],[4,518,515,3,516,3,517,3,55,3,56,3,57],[5,"null"],[4,519,124],[4,520,124],[5,"\uD82C"],[2,"[\\uDC00\\uDC01]"],[5,"\uD808"],[2,"[\\uDC00-\\uDF6E]"],[5,"\uD869"],[2,"[\\uDED6\\uDF00]"],[5,"\uD809"],[2,"[\\uDC00-\\uDC62]"],[2,"[\\uDC00-\\uDC19\\uDC34-\\uDC4D\\uDC68-\\uDC81\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB5\\uDCD0-\\uDCE9\\uDD04\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD38\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD6C-\\uDD85\\uDDA0-\\uDDB9\\uDDD4-\\uDDED\\uDE08-\\uDE21\\uDE3C-\\uDE55\\uDE70-\\uDE89\\uDEA8-\\uDEC0\\uDEE2-\\uDEFA\\uDF1C-\\uDF34\\uDF56-\\uDF6E\\uDF90-\\uDFA8\\uDFCA\\uDC1A-\\uDC33\\uDC4E-\\uDC54\\uDC56-\\uDC67\\uDC82-\\uDC9B\\uDCB6-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDCCF\\uDCEA-\\uDD03\\uDD1E-\\uDD37\\uDD52-\\uDD6B\\uDD86-\\uDD9F\\uDDBA-\\uDDD3\\uDDEE-\\uDE07\\uDE22-\\uDE3B\\uDE56-\\uDE6F\\uDE8A-\\uDEA5\\uDEC2-\\uDEDA\\uDEDC-\\uDEE1\\uDEFC-\\uDF14\\uDF16-\\uDF1B\\uDF36-\\uDF4E\\uDF50-\\uDF55\\uDF70-\\uDF88\\uDF8A-\\uDF8F\\uDFAA-\\uDFC2\\uDFC4-\\uDFC9\\uDFCB]"],[2,"[\\uDC03-\\uDC37\\uDC83-\\uDCAF]"],[2,"[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDF00-\\uDF1E\\uDF30-\\uDF40\\uDF42-\\uDF49\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF\\uDD40-\\uDD74\\uDF41\\uDF4A\\uDFD1-\\uDFD5]"],[5,"\uD80C"],[2,"[\\uDC00-\\uDFFF]"],[2,"[\\uDC00-\\uDC9D]"],[5,"\uD86E"],[2,"[\\uDC1D]"],[5,"\uD803"],[2,"[\\uDC00-\\uDC48]"],[5,"\uD840"],[2,"[\\uDC00]"],[5,"\uD87E"],[2,"[\\uDC00-\\uDE1D]"],[5,"\uD86D"],[2,"[\\uDF34\\uDF40]"],[5,"\uD81A"],[2,"[\\uDC00-\\uDE38]"],[2,"[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDD00-\\uDD15\\uDD20-\\uDD39\\uDE00\\uDE10-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE33\\uDE60-\\uDE7C\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF60-\\uDF72]"],[5,"\uD80D"],[2,"[\\uDC00-\\uDC2E]"],[5,"u"],[0,"HexDigit",521],[0,"LogicalAndExpression",522],[6,523],[5,"?"],[3,524,525],[4,3,172,3,447],[6,526],[0,"MemberExpression",527],[0,"Arguments",528],[6,529],[4,530,3,343],[4,3,255,256,3,447],[4,374,124],[4,531,82],[4,334,532],[0,"LineContinuation",533],[4,534,82],[0,"IvarTypeElement",535],[6,536],[8,537],[5,"+"],[8,538],[0,"MethodSelector",539],[8,62],[5,"-"],[5,"true"],[5,"false"],[2,"[0-9a-fA-F]"],[4,540,541],[4,3,542,3,495],[4,266,3,297,3,447],[0,"ConditionalExpressionNoIn",543],[4,3,172,3,302],[4,544,545],[4,52,3,546,3,54],[4,3,547],[0,"NEW",548],[9,549],[0,"EscapeSequence",550],[4,334,219],[9,551],[4,552,553],[4,3,511],[0,"Accessors",554],[4,3,555],[3,556,557],[0,"BitwiseOrExpression",558],[6,559],[5,"||"],[4,560,561],[3,562,563,564],[6,565],[8,566],[3,502,567,568],[4,378,124],[3,569,334,10],[3,570,571,572,335],[3,573,334,10],[9,574],[3,51,575],[4,576,577],[0,"MethodType",578],[4,579,580],[0,"UnarySelector",581],[4,582,583],[4,3,584,3,540],[0,"LogicalOrExpressionNoIn",585],[8,586],[0,"PrimaryExpression",587],[0,"FunctionExpression",588],[4,530,3,501,3,502],[4,3,589],[0,"ArgumentList",590],[0,"BracketedAccessor",591],[0,"DotAccessor",592],[2,"[\"]"],[0,"CharacterEscapeSequence",593],[4,594,595],[0,"HexEscapeSequence",596],[2,"[']"],[4,553,3,597],[5,"@outlet"],[5,"@accessors"],[8,598],[4,52,3,599,600,3,54],[0,"KeywordSelector",601],[8,602],[0,"Selector",51],[0,"BitwiseXOrExpression",603],[6,604],[5,"&&"],[4,605,606],[4,3,497,3,447,3,105,3,447],[3,607,51,608,609,610,611],[4,50,3,612,3,52,3,53,3,54,3,55,3,56,3,57],[3,567,568],[4,177,3,613],[4,119,3,90,3,122],[4,614,3,126],[3,615,616],[5,"0"],[9,617],[4,618,494,494],[3,537,88,172],[4,52,619,54],[3,381,51],[6,620],[4,621,622],[4,3,172,3,623],[4,624,625],[4,3,626,256,3,582],[0,"LogicalAndExpressionNoIn",627],[6,628],[0,"THIS",629],[0,"Literal",630],[0,"ArrayLiteral",631],[0,"ObjectLiteral",632],[4,52,3,90,3,54],[8,51],[6,633],[5,"."],[0,"SingleEscapeCharacter",634],[0,"NonEscapeCharacter",635],[0,"DecimalDigit",636],[5,"x"],[8,637],[4,3,599],[0,"KeywordDeclarator",638],[6,639],[5,"..."],[0,"BitwiseAndExpression",640],[6,641],[5,"|"],[4,642,643],[4,3,542,3,605],[4,379,124],[3,287,288,644,204,645],[4,119,3,646,3,122],[4,55,3,647,3,57],[4,172,3,177],[2,"['\"\\\\bfnrtv]"],[4,128,648,82],[2,"[0-9]"],[4,649,650],[4,651,105,515,3,51],[4,3,621],[4,652,653],[4,3,654,256,3,624],[0,"BitwiseOrExpressionNoIn",655],[6,656],[0,"NumericLiteral",657],[0,"RegularExpressionLiteral",658],[0,"ElementList",659],[8,660],[9,661],[0,"AccessorsConfiguration",662],[6,663],[8,664],[0,"EqualityExpression",665],[6,666],[5,"^"],[4,667,668],[4,3,584,3,642],[4,669,670],[4,671,672,671,673],[4,674,675,3,676],[4,677,3,678],[0,"EscapeCharacter",679],[3,680,681,682,683],[4,3,172,3,649],[4,581,3],[4,684,685],[4,3,686,256,3,652],[0,"BitwiseXOrExpressionNoIn",687],[6,688],[3,689,690],[9,214],[5,"/"],[0,"RegularExpressionBody",691],[0,"RegularExpressionFlags",215],[6,692],[6,693],[8,177],[0,"PropertyNameAndValueList",694],[8,172],[3,615,617,618,493],[0,"IvarPropertyName",695],[0,"IvarGetterName",696],[0,"IvarSetterName",697],[5,"readonly"],[0,"RelationalExpression",698],[6,699],[5,"&"],[4,700,701],[4,3,626,256,3,667],[0,"DecimalLiteral",702],[0,"HexIntegerLiteral",703],[4,704,705],[4,172,3],[4,3,177,706],[4,707,708],[4,709,3,255,3,51],[4,710,3,255,3,51],[4,711,3,255,3,51,712],[4,713,714],[4,3,715,3,684],[0,"BitwiseAndExpressionNoIn",716],[6,717],[4,718,719],[4,594,720,721],[0,"RegularExpressionFirstChar",722],[6,723],[7,724],[0,"PropertyAssignment",725],[6,726],[5,"property"],[5,"getter"],[5,"setter"],[8,727],[0,"ShiftExpression",728],[6,729],[0,"EqualityOperator",730],[4,731,732],[4,3,654,256,3,700],[3,733,734,735],[8,736],[2,"[Xx]"],[7,494],[3,737,738,739],[0,"RegularExpressionChar",740],[4,3,172],[3,741,742,743],[4,3,172,3,707],[4,3,105],[4,744,745],[4,3,746,3,713],[3,747,748,749,750],[0,"EqualityExpressionNoIn",751],[6,752],[4,735,614,753],[4,614,754],[0,"DecimalIntegerLiteral",755],[0,"ExponentPart",756],[4,757,758],[0,"RegularExpressionBackslashSequence",759],[0,"RegularExpressionClass",760],[3,761,738,739],[4,762,3,105,3,177],[0,"PropertyGetter",763],[0,"PropertySetter",764],[0,"AdditiveExpression",765],[6,766],[0,"RelationalOperator",767],[5,"==="],[5,"!=="],[5,"=="],[5,"!="],[4,768,769],[4,3,686,256,3,731],[6,617],[7,617],[3,594,770],[4,771,772],[9,773],[0,"RegularExpressionNonTerminator",83],[4,334,758],[4,119,774,122],[4,775,758],[0,"PropertyName",776],[4,777,3,762,3,52,3,54,3,55,3,56,3,57],[4,778,3,762,3,52,3,779,3,54,3,55,3,56,3,57],[4,780,781],[4,3,782,3,744],[3,783,784,239,241,785,187],[0,"RelationalExpressionNoIn",786],[6,787],[4,788,753],[2,"[eE]"],[0,"SignedInteger",789],[2,"[*\\u005C/[]"],[6,790],[9,791],[3,126,204,644],[5,"get"],[5,"set"],[0,"PropertySetParameterList",51],[0,"MultiplicativeExpression",792],[6,793],[0,"ShiftOperator",794],[5,"<="],[5,">="],[0,"INSTANCEOF",795],[4,713,796],[4,3,715,3,768],[2,"[1-9]"],[4,797,754],[0,"RegularExpressionClassChar",798],[2,"[\\u005C/[]"],[4,799,800],[4,3,801,3,780],[3,802,803,804],[4,377,124],[6,805],[8,806],[3,807,738],[0,"UnaryExpression",808],[6,809],[0,"AdditiveOperator",810],[5,"<<"],[5,">>"],[5,">>>"],[4,3,811,3,713],[2,"[+-]"],[4,812,758],[3,813,814,815,816,817,818,819,820,821,822],[4,3,823,3,799],[4,824,256],[0,"RelationalOperatorNoIn",825],[9,826],[0,"PostfixExpression",827],[4,828,3,799],[4,829,3,799],[4,830,3,799],[4,831,3,799],[4,832,3,799],[4,514,3,799],[4,518,3,799],[4,833,3,799],[4,834,3,799],[0,"MultiplicativeOperator",835],[3,836,837],[3,783,784,239,241,785],[2,"[\\u005C\\]]"],[4,266,838],[0,"DELETE",839],[0,"VOID",840],[0,"TYPEOF",841],[5,"++"],[5,"--"],[5,"~"],[5,"!"],[4,842,256],[4,514,843],[4,518,844],[8,845],[4,376,124],[4,381,124],[4,380,124],[3,846,671,847],[9,514],[9,518],[4,99,848],[5,"*"],[5,"%"],[3,831,832],[0,"%start",850],[4,851,852,851],[0,"%_",853],[8,854],[6,855],[0,"%SourceElements",856],[3,857,858,859],[4,860,861],[0,"%WhiteSpace",14],[0,"%LineTerminator",15],[0,"%Comment",862],[0,"%SourceElement",863],[6,864],[3,865,866],[3,867,868],[4,851,860],[0,"%MultiLineComment",23],[0,"%SingleLineComment",869],[0,"%Statement",870],[0,"%FunctionDeclaration",871],[4,30,872],[3,873,874,875,876,877,878,879,880,881,882,883,884,885,886,887,888,889,890],[4,891,851,892,851,52,851,893,851,54,851,55,851,894,851,57],[6,895],[0,"%Block",896],[0,"%VariableStatement",897],[0,"%EmptyStatement",62],[0,"%ExpressionStatement",898],[0,"%IfStatement",899],[0,"%IterationStatement",900],[0,"%ContinueStatement",901],[0,"%BreakStatement",902],[0,"%ReturnStatement",903],[0,"%WithStatement",904],[0,"%LabelledStatement",905],[0,"%SwitchStatement",906],[0,"%ThrowStatement",907],[0,"%TryStatement",908],[0,"%DebuggerStatement",909],[0,"%ImportStatement",910],[0,"%ClassDeclarationStatement",911],[0,"%MessageStatement",912],[0,"%FUNCTION",913],[0,"%Identifier",914],[8,915],[0,"%FunctionBody",850],[0,"%SingleLineCommentChar",916],[12,917,918],[4,919,851,920,921,922],[4,923,924,922],[4,925,851,52,851,924,851,54,851,867,926],[3,927,928,929,930,931],[4,932,933,934],[4,935,933,934],[4,936,933,937],[4,938,851,52,851,924,851,54,851,867],[4,892,851,105,851,867],[4,939,851,52,851,924,851,54,851,940],[4,941,933,937],[4,942,851,873,851,943],[4,944,922],[4,112,851,945,922],[4,114,851,892,851,946,851,947,851,948,851,118,922],[4,119,851,949,851,892,950,851,122],[4,123,951],[12,952,953],[0,"%FormalParameterList",954],[4,955,82],[4,55,851,956,851,57],[11,"%BadBlock",957,"Missing ending brace"],[0,"%VAR",958],[0,"%VariableDeclaration",959],[6,960],[0,"%EOS",961],[9,962],[0,"%Expression",963],[0,"%IF",964],[8,965],[0,"%DoWhileStatement",966],[0,"%WhileStatement",967],[0,"%ForStatement",968],[0,"%ForInStatement",969],[0,"%EachStatement",970],[0,"%CONTINUE",971],[0,"%__",972],[3,973,974],[0,"%BREAK",975],[0,"%RETURN",976],[3,974,977],[0,"%WITH",978],[0,"%SWITCH",979],[0,"%CaseBlock",980],[0,"%THROW",981],[0,"%TRY",982],[3,983,984],[0,"%DEBUGGER",985],[3,986,987],[8,988],[8,989],[0,"%ClassBody",990],[3,991,924],[8,992],[9,993],[4,994,995],[0,"%BadIdentifier",996],[4,892,997],[9,858],[8,998],[4,55,851,956,851],[4,170,951],[4,892,999],[4,851,172,851,920],[3,1000,1001,1002,1003],[3,55,891],[4,1004,1005],[4,179,951],[4,851,1006,851,867],[4,1007,851,867,851,1008,851,52,851,924,851,54,922],[4,1008,851,52,851,924,851,54,851,867],[4,1009,851,52,851,1010,851,62,851,1011,851,62,851,1011,851,54,851,867],[4,1009,851,52,851,1012,851,1013,851,924,851,54,851,867],[4,188,851,52,851,1012,851,1013,851,924,851,54,851,867],[4,189,951],[6,1014],[4,892,922],[0,"%SemicolonInsertionEOS",1015],[4,192,951],[4,193,951],[4,924,922],[4,194,951],[4,195,951],[4,55,851,1016,851,1017,851,1016,851,57],[4,198,951],[4,199,951],[4,1018,1019],[0,"%Finally",1020],[4,203,951],[0,"%LocalFilePath",1021],[0,"%StandardFilePath",1022],[3,1023,1024],[4,55,1025,851,57],[8,1026],[0,"%SuperExpression",210],[4,105,924,1027],[0,"%IdentifierPart",1028],[9,1029],[0,"%IdentifierName",1030],[3,1031,1032],[6,1033],[0,"%StatementList",1034],[8,1035],[4,851,62],[4,933,1036],[4,933,220],[4,933,1037],[0,"%AssignmentExpression",1038],[6,1039],[0,"%ELSE",1040],[0,"%DO",1041],[0,"%WHILE",1042],[0,"%FOR",1043],[8,1044],[8,924],[0,"%ForInFirstExpression",1045],[0,"%IN",1046],[3,857,1047,866],[3,1048,1001,1002,1003],[8,1049],[8,1050],[0,"%Catch",1051],[8,1052],[4,1053,851,873],[0,"%StringLiteral",1054],[4,239,851,240,851,241],[0,"%SuperclassDeclaration",1055],[0,"%CategoryDeclaration",1056],[6,1057],[0,"%ClassElements",1058],[6,1059],[3,1060,1061,1062,1063,1064,1065],[4,1066,951],[4,1060,1067],[11,"%ReservedWordIdentifier",1029,"Identifier cannot be a reserved word"],[11,"%DigitIdentifier",1068,"Identifier cannot start with a digit"],[4,851,172,851,892],[4,867,1069],[4,851,255,256,851,1004],[0,"%LineTerminatorSequence",257],[0,"%EOF",258],[3,1070,1071],[4,851,172,851,1004],[4,261,951],[4,262,951],[4,263,951],[4,264,951],[0,"%ForFirstExpression",1072],[3,1073,1074],[4,268,951],[0,"%SingleLineMultiLineComment",1075],[4,933,62],[0,"%CaseClauses",1076],[0,"%DefaultClause",1077],[4,1078,851,52,851,892,851,54,851,873],[4,851,984],[0,"%FINALLY",1079],[3,1080,1081],[4,105,851,892],[4,52,851,892,851,54],[4,851,1082],[4,1083,1084],[4,851,892,105,851,924],[0,"%IdentifierStart",1085],[0,"%UnicodeCombiningMark",280],[0,"%UnicodeDigit",281],[0,"%UnicodeConnectorPunctuation",282],[0,"%ZWNJ",283],[0,"%ZWJ",284],[0,"%ReservedWord",1086],[6,993],[4,1062,1087],[6,1088],[4,1073,851,1089,851,1004],[0,"%ConditionalExpression",1090],[3,1091,1092],[0,"%LeftHandSideExpression",1093],[4,919,851,1094],[4,27,1095,29],[4,1096,1097],[4,1098,851,105,1099],[0,"%CATCH",1100],[4,309,951],[4,310,1101,310],[4,312,1102,312],[0,"%CompoundIvarDeclaration",1103],[0,"%ClassElement",1104],[6,1105],[3,1106,290,1107],[3,1108,1109,1110,1111],[7,993],[4,851,867],[0,"%AssignmentOperator",337],[4,1112,1113],[0,"%ExpressionNoIn",1114],[4,919,851,1115],[3,1116,1117],[0,"%VariableDeclarationNoIn",1118],[6,1119],[0,"%CaseClause",1120],[6,1121],[0,"%DEFAULT",1122],[8,1123],[4,350,951],[6,1124],[6,1125],[4,1126,851,1127,1128,922],[3,1129,1130,867,868],[4,851,1083],[0,"%UnicodeLetter",333],[4,334,1131],[0,"%Keyword",329],[0,"%FutureReservedWord",330],[0,"%NullLiteral",1132],[0,"%BooleanLiteral",1133],[0,"%LogicalOrExpression",1134],[8,1135],[4,1136,1137],[0,"%VariableDeclarationListNoIn",1138],[0,"%CallExpression",1139],[0,"%NewExpression",1140],[4,892,1141],[4,81,955,82],[4,1142,851,924,851,105,1099],[4,851,1096],[4,375,951],[4,851,998],[0,"%DoubleStringCharacter",1143],[0,"%SingleStringCharacter",1144],[0,"%IvarType",1145],[0,"%IvarDeclaration",1146],[6,1147],[0,"%ClassMethodDeclaration",1148],[0,"%InstanceMethodDeclaration",1149],[0,"%UnicodeEscapeSequence",1150],[0,"%NULL",1151],[3,1152,1153],[4,1154,1155],[4,851,497,851,1004,851,105,851,1004],[0,"%AssignmentExpressionNoIn",1156],[6,1157],[4,1094,1158],[4,1159,851,1160,1161],[3,1159,1162],[8,1163],[0,"%CASE",1164],[3,1165,1166,1167],[3,1168,1166,1167],[4,1169,1170],[4,892,851,1171],[4,851,172,851,1127],[4,514,1172,851,1173,851,517,851,55,851,894,851,57],[4,518,1172,851,1173,851,517,851,55,851,894,851,57],[4,493,1174,1174,1174,1174],[4,461,951],[0,"%TRUE",1175],[0,"%FALSE",1176],[0,"%LogicalAndExpression",1177],[6,1178],[3,1179,1180],[4,851,172,851,1136],[6,1181],[0,"%MemberExpression",1182],[0,"%Arguments",1183],[6,1184],[4,1185,851,1117],[4,851,255,256,851,1136],[4,374,951],[4,1186,82],[4,334,1187],[0,"%LineContinuation",1188],[4,1189,82],[0,"%IvarTypeElement",1190],[6,1191],[8,1192],[8,1193],[0,"%MethodSelector",1194],[0,"%HexDigit",521],[4,519,951],[4,520,951],[4,1195,1196],[4,851,542,851,1154],[4,1073,851,1089,851,1136],[0,"%ConditionalExpressionNoIn",1197],[4,851,172,851,1094],[4,1198,1199],[4,52,851,1200,851,54],[4,851,1201],[0,"%NEW",1202],[9,1203],[0,"%EscapeSequence",1204],[4,334,1036],[9,1205],[4,1206,1207],[4,851,1169],[0,"%Accessors",1208],[4,851,1209],[3,1210,1211],[0,"%BitwiseOrExpression",1212],[6,1213],[4,1214,1215],[3,1216,1217,1218],[6,1219],[8,1220],[3,1160,1221,1222],[4,378,951],[3,569,334,858],[3,1223,1224,1225,1131],[3,573,334,858],[9,1226],[3,892,575],[4,576,1227],[0,"%MethodType",1228],[4,1229,1230],[0,"%UnarySelector",1231],[4,1232,1233],[4,851,584,851,1195],[0,"%LogicalOrExpressionNoIn",1234],[8,1235],[0,"%PrimaryExpression",1236],[0,"%FunctionExpression",1237],[4,1185,851,1159,851,1160],[4,851,1238],[0,"%ArgumentList",1239],[0,"%BracketedAccessor",1240],[0,"%DotAccessor",1241],[0,"%CharacterEscapeSequence",1242],[4,594,1243],[0,"%HexEscapeSequence",1244],[4,1207,851,1245],[8,1246],[4,52,851,1247,1248,851,54],[0,"%KeywordSelector",1249],[8,1250],[0,"%Selector",892],[0,"%BitwiseXOrExpression",1251],[6,1252],[4,1253,1254],[4,851,497,851,1136,851,105,851,1136],[3,1255,892,1256,1257,1258,1259],[4,891,851,1260,851,52,851,893,851,54,851,55,851,894,851,57],[3,1221,1222],[4,1004,851,1261],[4,119,851,924,851,122],[4,614,851,995],[3,1262,1263],[9,1264],[4,618,1174,1174],[3,1192,922,172],[4,52,1265,54],[3,381,892],[6,1266],[4,1267,1268],[4,851,172,851,623],[4,1269,1270],[4,851,626,256,851,1232],[0,"%LogicalAndExpressionNoIn",1271],[6,1272],[0,"%THIS",1273],[0,"%Literal",1274],[0,"%ArrayLiteral",1275],[0,"%ObjectLiteral",1276],[4,52,851,924,851,54],[8,892],[6,1277],[0,"%SingleEscapeCharacter",634],[0,"%NonEscapeCharacter",1278],[0,"%DecimalDigit",636],[8,1279],[4,851,1247],[0,"%KeywordDeclarator",1280],[6,1281],[0,"%BitwiseAndExpression",1282],[6,1283],[4,1284,1285],[4,851,542,851,1253],[4,379,951],[3,1110,1111,1286,1021,1287],[4,119,851,1288,851,122],[4,55,851,1289,851,57],[4,172,851,1004],[4,955,1290,82],[4,1291,1292],[4,1293,105,1172,851,892],[4,851,1267],[4,1294,1295],[4,851,654,256,851,1269],[0,"%BitwiseOrExpressionNoIn",1296],[6,1297],[0,"%NumericLiteral",1298],[0,"%RegularExpressionLiteral",1299],[0,"%ElementList",1300],[8,1301],[9,1302],[0,"%AccessorsConfiguration",1303],[6,1304],[8,1305],[0,"%EqualityExpression",1306],[6,1307],[4,1308,1309],[4,851,584,851,1284],[4,1310,1311],[4,671,1312,671,1313],[4,1314,1315,851,1316],[4,1317,851,678],[0,"%EscapeCharacter",1318],[3,1319,1320,1321,683],[4,851,172,851,1291],[4,1231,851],[4,1322,1323],[4,851,686,256,851,1294],[0,"%BitwiseXOrExpressionNoIn",1324],[6,1325],[3,1326,1327],[9,1060],[0,"%RegularExpressionBody",1328],[0,"%RegularExpressionFlags",1067],[6,1329],[6,1330],[8,1004],[0,"%PropertyNameAndValueList",1331],[3,1262,1264,618,493],[0,"%IvarPropertyName",1332],[0,"%IvarGetterName",1333],[0,"%IvarSetterName",1334],[0,"%RelationalExpression",1335],[6,1336],[4,1337,1338],[4,851,626,256,851,1308],[0,"%DecimalLiteral",1339],[0,"%HexIntegerLiteral",1340],[4,1341,1342],[4,172,851],[4,851,1004,1343],[4,1344,1345],[4,709,851,255,851,892],[4,710,851,255,851,892],[4,711,851,255,851,892,1346],[4,1347,1348],[4,851,1349,851,1322],[0,"%BitwiseAndExpressionNoIn",1350],[6,1351],[4,1352,1353],[4,594,720,1354],[0,"%RegularExpressionFirstChar",1355],[6,1356],[7,1357],[0,"%PropertyAssignment",1358],[6,1359],[8,1360],[0,"%ShiftExpression",1361],[6,1362],[0,"%EqualityOperator",730],[4,1363,1364],[4,851,654,256,851,1337],[3,1365,1366,1367],[8,1368],[7,1174],[3,1369,1370,1371],[0,"%RegularExpressionChar",1372],[4,851,172],[3,1373,1374,1375],[4,851,172,851,1344],[4,851,105],[4,1376,1377],[4,851,1378,851,1347],[0,"%EqualityExpressionNoIn",1379],[6,1380],[4,1367,614,1381],[4,614,1382],[0,"%DecimalIntegerLiteral",1383],[0,"%ExponentPart",1384],[4,757,1385],[0,"%RegularExpressionBackslashSequence",1386],[0,"%RegularExpressionClass",1387],[3,1388,1370,1371],[4,1389,851,105,851,1004],[0,"%PropertyGetter",1390],[0,"%PropertySetter",1391],[0,"%AdditiveExpression",1392],[6,1393],[0,"%RelationalOperator",1394],[4,1395,1396],[4,851,686,256,851,1363],[6,1264],[7,1264],[3,594,1397],[4,771,1398],[0,"%RegularExpressionNonTerminator",916],[4,334,1385],[4,119,1399,122],[4,775,1385],[0,"%PropertyName",1400],[4,777,851,1389,851,52,851,54,851,55,851,894,851,57],[4,778,851,1389,851,52,851,1401,851,54,851,55,851,894,851,57],[4,1402,1403],[4,851,1404,851,1376],[3,783,784,239,241,1405,1013],[0,"%RelationalExpressionNoIn",1406],[6,1407],[4,788,1381],[0,"%SignedInteger",1408],[6,1409],[3,995,1021,1286],[0,"%PropertySetParameterList",892],[0,"%MultiplicativeExpression",1410],[6,1411],[0,"%ShiftOperator",794],[0,"%INSTANCEOF",1412],[4,1347,1413],[4,851,1349,851,1395],[4,797,1382],[0,"%RegularExpressionClassChar",1414],[4,1415,1416],[4,851,1417,851,1402],[4,377,951],[6,1418],[3,1419,1370],[0,"%UnaryExpression",1420],[6,1421],[0,"%AdditiveOperator",810],[4,851,1422,851,1347],[4,812,1385],[3,1423,1424,1425,1426,1427,1428,1429,1430,1431,1432],[4,851,1433,851,1415],[0,"%RelationalOperatorNoIn",1434],[0,"%PostfixExpression",1435],[4,1436,851,1415],[4,1437,851,1415],[4,1438,851,1415],[4,831,851,1415],[4,832,851,1415],[4,514,851,1415],[4,518,851,1415],[4,833,851,1415],[4,834,851,1415],[0,"%MultiplicativeOperator",835],[3,783,784,239,241,1405],[4,1073,1439],[0,"%DELETE",1440],[0,"%VOID",1441],[0,"%TYPEOF",1442],[8,1443],[4,376,951],[4,381,951],[4,380,951],[4,933,848]],"nameToUID":{"start":1,"_":3,"SourceElements":6,"WhiteSpace":9,"LineTerminator":10,"Comment":11,"SourceElement":12,"MultiLineComment":19,"SingleLineComment":20,"Statement":21,"FunctionDeclaration":22,"Block":32,"VariableStatement":33,"EmptyStatement":34,"ExpressionStatement":35,"IfStatement":36,"IterationStatement":37,"ContinueStatement":38,"BreakStatement":39,"ReturnStatement":40,"WithStatement":41,"LabelledStatement":42,"SwitchStatement":43,"ThrowStatement":44,"TryStatement":45,"DebuggerStatement":46,"ImportStatement":47,"ClassDeclarationStatement":48,"MessageStatement":49,"FUNCTION":50,"Identifier":51,"FunctionBody":56,"SingleLineCommentChar":59,"FormalParameterList":80,"VAR":85,"VariableDeclaration":86,"EOS":88,"Expression":90,"IF":91,"DoWhileStatement":93,"WhileStatement":94,"ForStatement":95,"ForInStatement":96,"EachStatement":97,"CONTINUE":98,"__":99,"BREAK":101,"RETURN":102,"WITH":104,"SWITCH":106,"CaseBlock":107,"THROW":108,"TRY":109,"DEBUGGER":111,"ClassBody":117,"IdentifierName":126,"StatementList":129,"SemicolonInsertionEOS":146,"Finally":156,"LocalFilePath":158,"StandardFilePath":159,"SuperExpression":163,"IdentifierPart":165,"AssignmentExpression":177,"ELSE":180,"DO":181,"WHILE":182,"FOR":183,"ForInFirstExpression":186,"IN":187,"Catch":200,"StringLiteral":204,"SuperclassDeclaration":206,"CategoryDeclaration":207,"ClassElements":209,"ReservedWord":213,"IdentifierStart":214,"LineTerminatorSequence":219,"EOF":221,"ForFirstExpression":228,"SingleLineMultiLineComment":231,"CaseClauses":233,"DefaultClause":234,"FINALLY":237,"UnicodeCombiningMark":247,"UnicodeDigit":248,"UnicodeConnectorPunctuation":249,"ZWNJ":250,"ZWJ":251,"ConditionalExpression":260,"LeftHandSideExpression":266,"CATCH":272,"CompoundIvarDeclaration":277,"ClassElement":278,"Keyword":285,"FutureReservedWord":286,"NullLiteral":287,"BooleanLiteral":288,"UnicodeLetter":289,"AssignmentOperator":297,"ExpressionNoIn":299,"VariableDeclarationNoIn":302,"CaseClause":304,"DEFAULT":306,"NULL":331,"UnicodeEscapeSequence":335,"LogicalOrExpression":338,"VariableDeclarationListNoIn":341,"CallExpression":342,"NewExpression":343,"DoubleStringCharacter":351,"SingleStringCharacter":352,"IvarType":354,"IvarDeclaration":355,"ClassMethodDeclaration":357,"InstanceMethodDeclaration":358,"TRUE":412,"FALSE":413,"AssignmentExpressionNoIn":447,"CASE":453,"HexDigit":494,"LogicalAndExpression":495,"MemberExpression":501,"Arguments":502,"LineContinuation":509,"IvarTypeElement":511,"MethodSelector":516,"ConditionalExpressionNoIn":525,"NEW":530,"EscapeSequence":532,"Accessors":537,"BitwiseOrExpression":540,"MethodType":555,"UnarySelector":557,"LogicalOrExpressionNoIn":560,"PrimaryExpression":562,"FunctionExpression":563,"ArgumentList":566,"BracketedAccessor":567,"DotAccessor":568,"CharacterEscapeSequence":570,"HexEscapeSequence":572,"KeywordSelector":579,"Selector":581,"BitwiseXOrExpression":582,"LogicalAndExpressionNoIn":605,"THIS":607,"Literal":608,"ArrayLiteral":609,"ObjectLiteral":610,"SingleEscapeCharacter":615,"NonEscapeCharacter":616,"DecimalDigit":617,"KeywordDeclarator":621,"BitwiseAndExpression":624,"BitwiseOrExpressionNoIn":642,"NumericLiteral":644,"RegularExpressionLiteral":645,"ElementList":646,"AccessorsConfiguration":649,"EqualityExpression":652,"EscapeCharacter":661,"BitwiseXOrExpressionNoIn":667,"RegularExpressionBody":672,"RegularExpressionFlags":673,"PropertyNameAndValueList":677,"IvarPropertyName":680,"IvarGetterName":681,"IvarSetterName":682,"RelationalExpression":684,"DecimalLiteral":689,"HexIntegerLiteral":690,"BitwiseAndExpressionNoIn":700,"RegularExpressionFirstChar":704,"PropertyAssignment":707,"ShiftExpression":713,"EqualityOperator":715,"RegularExpressionChar":723,"EqualityExpressionNoIn":731,"DecimalIntegerLiteral":735,"ExponentPart":736,"RegularExpressionBackslashSequence":738,"RegularExpressionClass":739,"PropertyGetter":742,"PropertySetter":743,"AdditiveExpression":744,"RelationalOperator":746,"RegularExpressionNonTerminator":758,"PropertyName":762,"RelationalExpressionNoIn":768,"SignedInteger":772,"PropertySetParameterList":779,"MultiplicativeExpression":780,"ShiftOperator":782,"INSTANCEOF":785,"RegularExpressionClassChar":790,"UnaryExpression":799,"AdditiveOperator":801,"RelationalOperatorNoIn":811,"PostfixExpression":813,"MultiplicativeOperator":823,"DELETE":828,"VOID":829,"TYPEOF":830,"%start":849,"%_":851,"%SourceElements":854,"%WhiteSpace":857,"%LineTerminator":858,"%Comment":859,"%SourceElement":860,"%MultiLineComment":865,"%SingleLineComment":866,"%Statement":867,"%FunctionDeclaration":868,"%Block":873,"%VariableStatement":874,"%EmptyStatement":875,"%ExpressionStatement":876,"%IfStatement":877,"%IterationStatement":878,"%ContinueStatement":879,"%BreakStatement":880,"%ReturnStatement":881,"%WithStatement":882,"%LabelledStatement":883,"%SwitchStatement":884,"%ThrowStatement":885,"%TryStatement":886,"%DebuggerStatement":887,"%ImportStatement":888,"%ClassDeclarationStatement":889,"%MessageStatement":890,"%FUNCTION":891,"%Identifier":892,"%FunctionBody":894,"%SingleLineCommentChar":895,"%FormalParameterList":915,"%BadBlock":918,"%VAR":919,"%VariableDeclaration":920,"%EOS":922,"%Expression":924,"%IF":925,"%DoWhileStatement":927,"%WhileStatement":928,"%ForStatement":929,"%ForInStatement":930,"%EachStatement":931,"%CONTINUE":932,"%__":933,"%BREAK":935,"%RETURN":936,"%WITH":938,"%SWITCH":939,"%CaseBlock":940,"%THROW":941,"%TRY":942,"%DEBUGGER":944,"%ClassBody":948,"%BadIdentifier":953,"%SemicolonInsertionEOS":974,"%Finally":984,"%LocalFilePath":986,"%StandardFilePath":987,"%SuperExpression":991,"%IdentifierPart":993,"%IdentifierName":995,"%StatementList":998,"%AssignmentExpression":1004,"%ELSE":1006,"%DO":1007,"%WHILE":1008,"%FOR":1009,"%ForInFirstExpression":1012,"%IN":1013,"%Catch":1018,"%StringLiteral":1021,"%SuperclassDeclaration":1023,"%CategoryDeclaration":1024,"%ClassElements":1026,"%ReservedWordIdentifier":1031,"%DigitIdentifier":1032,"%LineTerminatorSequence":1036,"%EOF":1037,"%ForFirstExpression":1044,"%SingleLineMultiLineComment":1047,"%CaseClauses":1049,"%DefaultClause":1050,"%FINALLY":1053,"%IdentifierStart":1060,"%UnicodeCombiningMark":1061,"%UnicodeDigit":1062,"%UnicodeConnectorPunctuation":1063,"%ZWNJ":1064,"%ZWJ":1065,"%ReservedWord":1066,"%ConditionalExpression":1071,"%LeftHandSideExpression":1073,"%CATCH":1078,"%CompoundIvarDeclaration":1082,"%ClassElement":1083,"%AssignmentOperator":1089,"%ExpressionNoIn":1091,"%VariableDeclarationNoIn":1094,"%CaseClause":1096,"%DEFAULT":1098,"%UnicodeLetter":1106,"%Keyword":1108,"%FutureReservedWord":1109,"%NullLiteral":1110,"%BooleanLiteral":1111,"%LogicalOrExpression":1112,"%VariableDeclarationListNoIn":1115,"%CallExpression":1116,"%NewExpression":1117,"%DoubleStringCharacter":1124,"%SingleStringCharacter":1125,"%IvarType":1126,"%IvarDeclaration":1127,"%ClassMethodDeclaration":1129,"%InstanceMethodDeclaration":1130,"%UnicodeEscapeSequence":1131,"%NULL":1132,"%AssignmentExpressionNoIn":1136,"%CASE":1142,"%TRUE":1152,"%FALSE":1153,"%LogicalAndExpression":1154,"%MemberExpression":1159,"%Arguments":1160,"%LineContinuation":1167,"%IvarTypeElement":1169,"%MethodSelector":1173,"%HexDigit":1174,"%ConditionalExpressionNoIn":1180,"%NEW":1185,"%EscapeSequence":1187,"%Accessors":1192,"%BitwiseOrExpression":1195,"%MethodType":1209,"%UnarySelector":1211,"%LogicalOrExpressionNoIn":1214,"%PrimaryExpression":1216,"%FunctionExpression":1217,"%ArgumentList":1220,"%BracketedAccessor":1221,"%DotAccessor":1222,"%CharacterEscapeSequence":1223,"%HexEscapeSequence":1225,"%KeywordSelector":1229,"%Selector":1231,"%BitwiseXOrExpression":1232,"%LogicalAndExpressionNoIn":1253,"%THIS":1255,"%Literal":1256,"%ArrayLiteral":1257,"%ObjectLiteral":1258,"%SingleEscapeCharacter":1262,"%NonEscapeCharacter":1263,"%DecimalDigit":1264,"%KeywordDeclarator":1267,"%BitwiseAndExpression":1269,"%BitwiseOrExpressionNoIn":1284,"%NumericLiteral":1286,"%RegularExpressionLiteral":1287,"%ElementList":1288,"%AccessorsConfiguration":1291,"%EqualityExpression":1294,"%EscapeCharacter":1302,"%BitwiseXOrExpressionNoIn":1308,"%RegularExpressionBody":1312,"%RegularExpressionFlags":1313,"%PropertyNameAndValueList":1317,"%IvarPropertyName":1319,"%IvarGetterName":1320,"%IvarSetterName":1321,"%RelationalExpression":1322,"%DecimalLiteral":1326,"%HexIntegerLiteral":1327,"%BitwiseAndExpressionNoIn":1337,"%RegularExpressionFirstChar":1341,"%PropertyAssignment":1344,"%ShiftExpression":1347,"%EqualityOperator":1349,"%RegularExpressionChar":1356,"%EqualityExpressionNoIn":1363,"%DecimalIntegerLiteral":1367,"%ExponentPart":1368,"%RegularExpressionBackslashSequence":1370,"%RegularExpressionClass":1371,"%PropertyGetter":1374,"%PropertySetter":1375,"%AdditiveExpression":1376,"%RelationalOperator":1378,"%RegularExpressionNonTerminator":1385,"%PropertyName":1389,"%RelationalExpressionNoIn":1395,"%SignedInteger":1398,"%PropertySetParameterList":1401,"%MultiplicativeExpression":1402,"%ShiftOperator":1404,"%INSTANCEOF":1405,"%RegularExpressionClassChar":1409,"%UnaryExpression":1415,"%AdditiveOperator":1417,"%RelationalOperatorNoIn":1422,"%PostfixExpression":1423,"%MultiplicativeOperator":1433,"%DELETE":1436,"%VOID":1437,"%TYPEOF":1438}};


function Parser(/*String | CompiledGrammar*/ aGrammar)
{
    if (typeof aGrammar.valueOf() === "string")
        this.compiledGrammar = new (require("./compiledgrammar"))(aGrammar);
    else
        this.compiledGrammar = aGrammar;

    return this;
}

module.exports = Parser;

Parser.prototype.parse = function(input)
{
    return parse(this.compiledGrammar, input);
}

var NAME                = 0,
    DOT                 = 1,
    CHARACTER_CLASS     = 2,
    ORDERED_CHOICE      = 3,
    SEQUENCE            = 4,
    STRING_LITERAL      = 5,
    ZERO_OR_MORE        = 6,
    ONE_OR_MORE         = 7,
    OPTIONAL            = 8,
    NEGATIVE_LOOK_AHEAD = 9,
    POSITIVE_LOOK_AHEAD = 10,
    ERROR_NAME          = 11,
    ERROR_CHOICE        = 12;

function parse(aCompiledGrammar, input, name)
{
    var node = new SyntaxNode("#document", input, 0, 0),
        table = aCompiledGrammar.table,
        nameToUID = aCompiledGrammar.nameToUID;

    name = name || "start";

    // This is a stupid check.
    if (aCompiledGrammar.nameToUID["EOF"] !== undefined)
        table[0] = [SEQUENCE, nameToUID[name], nameToUID["EOF"]];

    if (!evaluate(new context(input, table), node, table, 0))
    {
        // This is a stupid check.
        if (aCompiledGrammar.nameToUID["EOF"] !== undefined)
            table[0] = [SEQUENCE, nameToUID["%" + name], nameToUID["EOF"]];

        node.children.length = 0;

        evaluate(new context(input, table), node, table, 0);

        node.traverse(
        {
            traverseTextNodes:false,
            enteredNode:function(node)
            {
                if (node.error)
                    console.log(node.message() + "\n");
            }
        });
    }

    return node;
}

exports.parse = parse;

function context(input, table)
{
    this.position = 0;
    this.input = input;
    this.memos = [];
    for (var i=0;i<table.length;++i)
        this.memos[i] = [];
}

function evaluate(context, parent, rules, rule_id)
{
    var rule = rules[rule_id],
        type = rule[0],
        input_length = context.input.length,
        memos = context.memos[rule_id];

    var uid = context.position,
        entry = memos[uid];

    if (entry === false)
        return false;
    else if (entry === true)
        return true;
    else if (entry)
    {
        if (parent)
            parent.children.push(entry.node);
        context.position = entry.position;
        return true;
    }

    switch (type)
    {
        case NAME:
        case ERROR_NAME:
            var node = new SyntaxNode(rule[1], context.input, context.position, 0, rule[3]);
            if (!evaluate(context, node, rules, rule[2]))
            {
                memos[uid] = false;
                return false;
            }
            node.range.length = context.position - node.range.location;
            memos[uid] = { node:node, position:context.position };

            if (parent)
                parent.children.push(node);
            return true;

        case CHARACTER_CLASS:
            var character = context.input.charAt(context.position);

            if (typeof rule[1] !== "function")
                rule[1] = new RegExp(rule[1], "g");

            if (character.match(rule[1]))
            {
                if (parent)
                    parent.children.push(character);
                ++context.position;
                return true;
            }
            memos[uid] = false;
            return false;

        case SEQUENCE:
            var index = 1,
                count = rule.length;

            for (; index < count; ++index)
                if (!evaluate(context, parent, rules, rule[index]))
                {
                    memos[uid] = false;
                    return false;
                }

            return true;

        case ORDERED_CHOICE:
        case ERROR_CHOICE:
            var index = 1,
                count = rule.length,
                position = context.position;

            for (; index < count; ++index)
            {
                // cache opportunity here.
                var child_count = parent && parent.children.length;

                if (evaluate(context, parent, rules, rule[index]))
                    return true;

                if (parent)
                    parent.children.length = child_count;
                context.position = position;
            }
            memos[uid] = false;
            return false;

        case STRING_LITERAL:
            var string = rule[1],
                string_length = string.length;

            if (string_length + context.position > input_length)
            {
                memos[uid] = false;
                return false;
            }

            var index = 0;

            for (; index < string_length; ++context.position, ++index)
                if (context.input.charAt(context.position) !== string.charAt(index))
                {
                    context.position -= index;
                    memos[uid] = false;
                    return false;
                }

//            memos[uid] = string;
            if (parent)
                parent.children.push(string);

            return true;
        case DOT:
            if (context.position < input_length)
            {
                if (parent)
                    parent.children.push(context.input.charAt(context.position));
                ++context.position;
                return true;
            }
            memos[uid] = false;
            return false;
        case POSITIVE_LOOK_AHEAD:
        case NEGATIVE_LOOK_AHEAD:
            var position = context.position,
                result = evaluate(context, null, rules, rule[1]) === (type === POSITIVE_LOOK_AHEAD);
            context.position = position;
            memos[uid] = result;

            return result;

        case ZERO_OR_MORE:
            var child,
                position = context.position,
                childCount = parent && parent.children.length;

            while (evaluate(context, parent, rules, rule[1]))
            {
                position = context.position,
                childCount = parent && parent.children.length;
            }

            context.position = position;
            if (parent)
                parent.children.length = childCount;

            return true;

        case ONE_OR_MORE:
            var position = context.position,
                childCount = parent && parent.children.length;
            if (!evaluate(context, parent, rules, rule[1]))
            {
                memos[uid] = false;
                context.position = position;
                if (parent)
                    parent.children.length = childCount;
                return false;
            }
            position = context.position,
            childCount = parent && parent.children.length;
            while (evaluate(context, parent, rules, rule[1]))
            {
                position = context.position;
                childCount = parent && parent.children.length;
            }
            context.position = position;
            if (parent)
                parent.children.length = childCount;
            return true;

        case OPTIONAL:
            var position = context.position,
                childCount = parent && parent.children.length;

            if (!evaluate(context, parent, rules, rule[1]))
            {
                context.position = position;

                if (parent)
                    parent.children.length = childCount;
            }

            return true;
    }
}

function SyntaxNode(/*String*/ aName, /*String*/ aSource, /*Number*/ aLocation, /*Number*/ aLength, /*String*/anErrorMessage)
{
    this.name = aName;
    this.source = aSource;
    this.range = { location:aLocation, length:aLength };
    this.children = [];

    if (anErrorMessage)
        this.error = anErrorMessage;
}

SyntaxNode.prototype.message = function()
{
    var source = this.source,
        lineNumber = 1,
        index = 0,
        start = 0,
        length = source.length,
        range = this.range;

    for (; index < range.location; ++index)
        if (source.charAt(index) === '\n')
        {
            ++lineNumber;
            start = index + 1;
        }

    for (; index < length; ++index)
        if (source.charAt(index) === '\n')
            break;

    var line = source.substring(start, index);
        message = line + "\n";

    message += (new Array(this.range.location - start + 1)).join(" ");
    message += (new Array(Math.min(range.length, line.length) + 1)).join("^") + "\n";
    message += "ERROR line " + lineNumber + ": " + this.error;

    return message;
}

SyntaxNode.prototype.toString = function(/*String*/ spaces)
{
    if (!spaces)
        spaces = "";

    var string = spaces + this.name +  " <" + this.innerText() + "> ",
        children = this.children,
        index = 0,
        count = children.length;

    for (; index < count; ++index)
    {
        var child = children[index];

        if (typeof child === "string")
            string += "\n" + spaces + "\t" + child;

        else
            string += "\n" + children[index].toString(spaces + '\t');
    }

    return string;
}

SyntaxNode.prototype.innerText = function()
{
    var range = this.range;

    return this.source.substr(range.location, range.length);
}

SyntaxNode.prototype.traverse = function(walker)
{
    if (!walker.enteredNode || walker.enteredNode(this) !== false)
    {
        var children = this.children,
            index = 0,
            count = children && children.length;

        for (; index < count; ++index)
        {
            var child = children[index];

            if (typeof child !== "string")
                child.traverse(walker);

            else if (walker.traversesTextNodes)
            {
                walker.enteredNode(child);
                walker.exitedNode(child);
            }
        }
    }

    if (walker.exitedNode)
        walker.exitedNode(this);
}


exports.Parser = new Parser(compiledGrammar);
})(window, Parser, { exports: Parser });

