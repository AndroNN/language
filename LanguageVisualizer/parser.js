
var Parser = { };

(function(global, exports, module)
{
var compiledGrammar = {"table":[[0,"source",1],[0,"start",2],[8,3],[0,"SourceElements",4],[4,5,6,7,5],[0,"_",8],[0,"SourceElement",9],[6,10],[6,11],[3,12,13,14,15],[4,5,6],[3,16,17,18],[0,"Statement",19],[0,"FunctionDeclaration",20],[0,"ClassDeclaration",21],[0,"ImportStatement",22],[0,"WhiteSpace",23],[0,"LineTerminator",24],[0,"Comment",25],[3,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41],[4,42,5,43,5,44,5,45,5,46,5,47,5,48,5,49],[4,50,5,43,5,51,5,47,5,49,5,52,5,53],[4,54,5,55],[2,"[\\u0009\\u000B\\u000C\\u0020\\u00A0\\uFEFF\\u1680\\u180E\\u2000-\\u200A\\u202F\\u205F\\u3000]"],[2,"[\\u000A\\u000D\\u2028\\u2029]"],[3,56,57],[0,"Block",58],[0,"VariableStatement",59],[0,"EmptyStatement",60],[0,"ExpressionStatement",61],[0,"IfStatement",62],[0,"IterationStatement",63],[0,"ContinueStatement",64],[0,"BreakStatement",65],[0,"ReturnStatement",66],[0,"WithStatement",67],[0,"LabelledStatement",68],[0,"SwitchStatement",69],[0,"ThrowStatement",70],[0,"TryStatement",71],[0,"DebuggerStatement",72],[0,"MessageStatement",73],[0,"FUNCTION",74],[0,"Identifier",75],[5,"("],[8,76],[5,")"],[5,"{"],[0,"FunctionBody",2],[5,"}"],[5,"@implementation"],[8,77],[0,"ClassBody",78],[5,"@end"],[5,"@import"],[3,79,80],[0,"MultiLineComment",81],[0,"SingleLineComment",82],[4,47,5,83,5,49],[4,84,5,85,86,87],[5,";"],[4,88,89,87],[4,90,5,44,5,89,5,46,5,12,91],[3,92,93,94,95,96],[4,97,98,99],[4,100,98,99],[4,101,98,102],[4,103,5,44,5,89,5,46,5,12],[4,43,5,104,5,12],[4,105,5,44,5,89,5,46,5,106],[4,107,98,102],[4,108,5,26,5,109],[4,110,5,87],[4,111,5,112,5,43,113,5,114],[4,115,116],[4,117,118],[0,"FormalParameterList",119],[0,"SuperclassDeclaration",120],[8,121],[0,"LocalFilePath",122],[0,"StandardFilePath",123],[4,124,125,126],[4,127,128],[8,129],[0,"VAR",130],[0,"VariableDeclaration",131],[6,132],[0,"EOS",133],[9,134],[0,"Expression",135],[0,"IF",136],[8,137],[0,"DoWhileStatement",138],[0,"WhileStatement",139],[0,"ForStatement",140],[0,"ForInStatement",141],[0,"EachStatement",142],[0,"CONTINUE",143],[0,"__",144],[3,145,146],[0,"BREAK",147],[0,"RETURN",148],[3,146,149],[0,"WITH",150],[5,":"],[0,"SWITCH",151],[0,"CaseBlock",152],[0,"THROW",153],[0,"TRY",154],[3,155,156],[0,"DEBUGGER",157],[5,"["],[3,158,89],[8,159],[5,"]"],[5,"function"],[9,160],[9,161],[0,"IdentifierName",162],[4,43,163],[4,104,5,43],[0,"ClassElements",164],[0,"StringLiteral",165],[4,166,5,167,5,168],[5,"/*"],[6,169],[5,"*/"],[5,"//"],[6,170],[0,"StatementList",171],[4,172,116],[4,43,173],[4,5,174,5,85],[3,175,176,177,178],[3,47,42],[4,179,180],[4,181,116],[4,5,182,5,12],[4,183,5,12,5,184,5,44,5,89,5,46,5,87],[4,184,5,44,5,89,5,46,5,12],[4,185,5,44,5,186,5,60,5,187,5,60,5,187,5,46,5,12],[4,185,5,44,5,188,5,189,5,89,5,46,5,12],[4,190,5,44,5,188,5,189,5,89,5,46,5,12],[4,191,116],[6,192],[4,43,87],[0,"SemicolonInsertionEOS",193],[4,194,116],[4,195,116],[4,89,87],[4,196,116],[4,197,116],[4,47,5,198,5,199,5,198,5,49],[4,200,116],[4,201,116],[4,202,203],[0,"Finally",204],[4,205,116],[0,"SuperExpression",206],[4,104,89,207],[0,"IdentifierPart",208],[4,209,116],[4,210,211],[6,212],[4,5,213,214,5],[3,215,216],[5,"<"],[6,217],[5,">"],[4,218,219],[0,"SingleLineCommentChar",220],[4,12,221],[5,"var"],[8,222],[5,","],[4,5,60],[4,98,223],[4,98,224],[4,98,225],[0,"AssignmentExpression",226],[6,227],[5,"if"],[0,"ELSE",228],[0,"DO",229],[0,"WHILE",230],[0,"FOR",231],[8,232],[8,89],[0,"ForInFirstExpression",233],[0,"IN",234],[5,"@each"],[5,"continue"],[3,16,235,57],[3,236,176,177,178],[5,"break"],[5,"return"],[5,"with"],[5,"switch"],[8,237],[8,238],[5,"throw"],[5,"try"],[0,"Catch",239],[8,240],[4,241,5,26],[5,"debugger"],[5,"super"],[6,242],[3,210,243,244,245,246,247],[0,"ReservedWord",248],[0,"IdentifierStart",249],[6,160],[4,5,174,5,43],[0,"ClassElement",250],[6,251],[4,252,253,252],[4,254,255,254],[9,168],[9,126],[1],[4,256,219],[6,257],[4,5,258,259,5,179],[0,"LineTerminatorSequence",260],[10,49],[0,"EOF",261],[3,262,263],[4,5,174,5,179],[4,264,116],[4,265,116],[4,266,116],[4,267,116],[0,"ForFirstExpression",268],[3,269,270],[4,271,116],[0,"SingleLineMultiLineComment",272],[4,98,60],[0,"CaseClauses",273],[0,"DefaultClause",274],[4,275,5,44,5,43,5,46,5,26],[4,5,156],[0,"FINALLY",276],[4,5,43,104,5,89],[0,"UnicodeCombiningMark",277],[0,"UnicodeDigit",278],[0,"UnicodeConnectorPunctuation",279],[0,"ZWNJ",280],[0,"ZWJ",281],[3,282,283,284,285],[3,286,287,288],[3,289,12,13],[4,5,213],[5,"\""],[6,290],[5,"'"],[6,291],[9,17],[4,5,12],[5,"="],[9,258],[3,292,293,294,295,296],[9,219],[4,269,5,297,5,179],[0,"ConditionalExpression",298],[5,"else"],[5,"do"],[5,"while"],[5,"for"],[3,299,300],[0,"LeftHandSideExpression",301],[4,84,5,302],[5,"in"],[4,124,303,126],[4,304,305],[4,306,5,104,307],[0,"CATCH",308],[4,309,116],[3,310,311,312,313,314,315],[3,316,317,318,319],[2,"[\\u005F\\u203F\\u2040\\u2054\\uFE33\\uFE34\\uFE4D-\\uFE4F\\uFF3F]"],[5,"\u200C"],[5,"\u200D"],[0,"Keyword",320],[0,"FutureReservedWord",321],[0,"NullLiteral",322],[0,"BooleanLiteral",323],[0,"UnicodeLetter",324],[2,"[$_]"],[4,325,326],[0,"MethodDeclaration",327],[0,"DoubleStringCharacter",328],[0,"SingleStringCharacter",329],[5,"\n"],[4,296,330],[5,"\u2028"],[5,"\u2029"],[5,"\r"],[0,"AssignmentOperator",331],[4,332,333],[0,"ExpressionNoIn",334],[4,84,5,335],[3,336,337],[0,"VariableDeclarationNoIn",338],[6,339],[0,"CaseClause",340],[6,341],[0,"DEFAULT",342],[8,343],[4,344,116],[5,"finally"],[2,"[\\u0300-\\u036F\\u0483-\\u0487\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u0610-\\u061A\\u064B-\\u065F\\u0670\\u06D6-\\u06DC\\u06DF-\\u06E4\\u06E7\\u06E8\\u06EA-\\u06ED\\u0711\\u0730-\\u074A\\u07A6-\\u07B0\\u07EB-\\u07F3\\u0816-\\u0819\\u081B-\\u0823\\u0825-\\u0827\\u0829-\\u082D\\u0859-\\u085B\\u0900-\\u0902\\u093A\\u093C\\u0941-\\u0948\\u094D\\u0951-\\u0957\\u0962\\u0963\\u0981\\u09BC\\u09C1-\\u09C4\\u09CD\\u09E2\\u09E3\\u0A01\\u0A02\\u0A3C\\u0A41\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A70\\u0A71\\u0A75\\u0A81\\u0A82\\u0ABC\\u0AC1-\\u0AC5\\u0AC7\\u0AC8\\u0ACD\\u0AE2\\u0AE3\\u0B01\\u0B3C\\u0B3F\\u0B41-\\u0B44\\u0B4D\\u0B56\\u0B62\\u0B63\\u0B82\\u0BC0\\u0BCD\\u0C3E-\\u0C40\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C62\\u0C63\\u0CBC\\u0CBF\\u0CC6\\u0CCC\\u0CCD\\u0CE2\\u0CE3\\u0D41-\\u0D44\\u0D4D\\u0D62\\u0D63\\u0DCA\\u0DD2-\\u0DD4\\u0DD6\\u0E31\\u0E34-\\u0E3A\\u0E47-\\u0E4E\\u0EB1\\u0EB4-\\u0EB9\\u0EBB\\u0EBC\\u0EC8-\\u0ECD\\u0F18\\u0F19\\u0F35\\u0F37\\u0F39\\u0F71-\\u0F7E\\u0F80-\\u0F84\\u0F86\\u0F87\\u0F8D-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u102D-\\u1030\\u1032-\\u1037\\u1039\\u103A\\u103D\\u103E\\u1058\\u1059\\u105E-\\u1060\\u1071-\\u1074\\u1082\\u1085\\u1086\\u108D\\u109D\\u135D-\\u135F\\u1712-\\u1714\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17B7-\\u17BD\\u17C6\\u17C9-\\u17D3\\u17DD\\u180B-\\u180D\\u18A9\\u1920-\\u1922\\u1927\\u1928\\u1932\\u1939-\\u193B\\u1A17\\u1A18\\u1A56\\u1A58-\\u1A5E\\u1A60\\u1A62\\u1A65-\\u1A6C\\u1A73-\\u1A7C\\u1A7F\\u1B00-\\u1B03\\u1B34\\u1B36-\\u1B3A\\u1B3C\\u1B42\\u1B6B-\\u1B73\\u1B80\\u1B81\\u1BA2-\\u1BA5\\u1BA8\\u1BA9\\u1BE6\\u1BE8\\u1BE9\\u1BED\\u1BEF-\\u1BF1\\u1C2C-\\u1C33\\u1C36\\u1C37\\u1CD0-\\u1CD2\\u1CD4-\\u1CE0\\u1CE2-\\u1CE8\\u1CED\\u1DC0-\\u1DE6\\u1DFC-\\u1DFF\\u20D0-\\u20DC\\u20E1\\u20E5-\\u20F0\\u2CEF-\\u2CF1\\u2D7F\\u2DE0-\\u2DFF\\u302A-\\u302F\\u3099\\u309A\\uA66F\\uA67C\\uA67D\\uA6F0\\uA6F1\\uA802\\uA806\\uA80B\\uA825\\uA826\\uA8C4\\uA8E0-\\uA8F1\\uA926-\\uA92D\\uA947-\\uA951\\uA980-\\uA982\\uA9B3\\uA9B6-\\uA9B9\\uA9BC\\uAA29-\\uAA2E\\uAA31\\uAA32\\uAA35\\uAA36\\uAA43\\uAA4C\\uAAB0\\uAAB2-\\uAAB4\\uAAB7\\uAAB8\\uAABE\\uAABF\\uAAC1\\uABE5\\uABE8\\uABED\\uFB1E\\uFE00-\\uFE0F\\uFE20-\\uFE26\\u0903\\u093B\\u093E-\\u0940\\u0949-\\u094C\\u094E\\u094F\\u0982\\u0983\\u09BE-\\u09C0\\u09C7\\u09C8\\u09CB\\u09CC\\u09D7\\u0A03\\u0A3E-\\u0A40\\u0A83\\u0ABE-\\u0AC0\\u0AC9\\u0ACB\\u0ACC\\u0B02\\u0B03\\u0B3E\\u0B40\\u0B47\\u0B48\\u0B4B\\u0B4C\\u0B57\\u0BBE\\u0BBF\\u0BC1\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCC\\u0BD7\\u0C01-\\u0C03\\u0C41-\\u0C44\\u0C82\\u0C83\\u0CBE\\u0CC0-\\u0CC4\\u0CC7\\u0CC8\\u0CCA\\u0CCB\\u0CD5\\u0CD6\\u0D02\\u0D03\\u0D3E-\\u0D40\\u0D46-\\u0D48\\u0D4A-\\u0D4C\\u0D57\\u0D82\\u0D83\\u0DCF-\\u0DD1\\u0DD8-\\u0DDF\\u0DF2\\u0DF3\\u0F3E\\u0F3F\\u0F7F\\u102B\\u102C\\u1031\\u1038\\u103B\\u103C\\u1056\\u1057\\u1062-\\u1064\\u1067-\\u106D\\u1083\\u1084\\u1087-\\u108C\\u108F\\u109A-\\u109C\\u17B6\\u17BE-\\u17C5\\u17C7\\u17C8\\u1923-\\u1926\\u1929-\\u192B\\u1930\\u1931\\u1933-\\u1938\\u19B0-\\u19C0\\u19C8\\u19C9\\u1A19-\\u1A1B\\u1A55\\u1A57\\u1A61\\u1A63\\u1A64\\u1A6D-\\u1A72\\u1B04\\u1B35\\u1B3B\\u1B3D-\\u1B41\\u1B43\\u1B44\\u1B82\\u1BA1\\u1BA6\\u1BA7\\u1BAA\\u1BE7\\u1BEA-\\u1BEC\\u1BEE\\u1BF2\\u1BF3\\u1C24-\\u1C2B\\u1C34\\u1C35\\u1CE1\\u1CF2\\uA823\\uA824\\uA827\\uA880\\uA881\\uA8B4-\\uA8C3\\uA952\\uA953\\uA983\\uA9B4\\uA9B5\\uA9BA\\uA9BB\\uA9BD-\\uA9C0\\uAA2F\\uAA30\\uAA33\\uAA34\\uAA4D\\uAA7B\\uABE3\\uABE4\\uABE6\\uABE7\\uABE9\\uABEA\\uABEC]"],[4,345,346],[4,347,348],[4,349,350],[4,351,352],[4,353,354],[2,"[\\u0030-\\u0039\\u0660-\\u0669\\u06F0-\\u06F9\\u07C0-\\u07C9\\u0966-\\u096F\\u09E6-\\u09EF\\u0A66-\\u0A6F\\u0AE6-\\u0AEF\\u0B66-\\u0B6F\\u0BE6-\\u0BEF\\u0C66-\\u0C6F\\u0CE6-\\u0CEF\\u0D66-\\u0D6F\\u0E50-\\u0E59\\u0ED0-\\u0ED9\\u0F20-\\u0F29\\u1040-\\u1049\\u1090-\\u1099\\u17E0-\\u17E9\\u1810-\\u1819\\u1946-\\u194F\\u19D0-\\u19D9\\u1A80-\\u1A89\\u1A90-\\u1A99\\u1B50-\\u1B59\\u1BB0-\\u1BB9\\u1C40-\\u1C49\\u1C50-\\u1C59\\uA620-\\uA629\\uA8D0-\\uA8D9\\uA900-\\uA909\\uA9D0-\\uA9D9\\uAA50-\\uAA59\\uABF0-\\uABF9\\uFF10-\\uFF19]"],[4,355,356],[4,349,357],[4,358,359],[3,194,360,344,191,205,361,362,265,264,309,267,115,181,363,271,364,195,197,365,200,201,366,172,367,266,196],[3,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,206,393,394,395,396],[0,"NULL",397],[3,398,399],[3,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417],[5,"\\"],[0,"UnicodeEscapeSequence",418],[4,419,420,5,421,422,5,423,5,47,5,48,5,49],[3,424,425,426],[3,427,425,426],[8,292],[3,428,429,430,431,432,433,434,435,436,437,438,439],[0,"LogicalOrExpression",440],[8,441],[4,442,443],[0,"VariableDeclarationListNoIn",444],[0,"CallExpression",445],[0,"NewExpression",446],[4,43,447],[4,218,256,219],[4,448,5,89,5,104,307],[4,5,304],[4,361,116],[4,5,129],[5,"catch"],[5,"\uDB40"],[2,"[\\uDD00-\\uDDEF]"],[5,"\uD834"],[2,"[\\uDD67-\\uDD69\\uDD7B-\\uDD82\\uDD85-\\uDD8B\\uDDAA-\\uDDAD\\uDE42-\\uDE44\\uDD65\\uDD66\\uDD6D-\\uDD72]"],[5,"\uD804"],[2,"[\\uDC01\\uDC38-\\uDC46\\uDC80\\uDC81\\uDCB3-\\uDCB6\\uDCB9\\uDCBA\\uDC00\\uDC02\\uDC82\\uDCB0-\\uDCB2\\uDCB7\\uDCB8]"],[5,"\uD800"],[2,"[\\uDDFD]"],[5,"\uD802"],[2,"[\\uDE01-\\uDE03\\uDE05\\uDE06\\uDE0C-\\uDE0F\\uDE38-\\uDE3A\\uDE3F]"],[5,"\uD835"],[2,"[\\uDFCE-\\uDFFF]"],[2,"[\\uDC66-\\uDC6F]"],[5,"\uD801"],[2,"[\\uDCA0-\\uDCA9]"],[5,"case"],[5,"default"],[5,"delete"],[5,"instanceof"],[5,"new"],[5,"this"],[5,"typeof"],[5,"void"],[5,"abstract"],[5,"boolean"],[5,"byte"],[5,"char"],[5,"class"],[5,"const"],[5,"double"],[5,"enum"],[5,"export"],[5,"extends"],[5,"final"],[5,"float"],[5,"goto"],[5,"implements"],[5,"import"],[5,"interface"],[5,"int"],[5,"long"],[5,"native"],[5,"package"],[5,"private"],[5,"protected"],[5,"public"],[5,"short"],[5,"static"],[5,"synchronized"],[5,"throws"],[5,"transient"],[5,"volatile"],[4,449,116],[0,"TRUE",450],[0,"FALSE",451],[2,"[\\u0041-\\u005A\\u00C0-\\u00D6\\u00D8-\\u00DE\\u0100\\u0102\\u0104\\u0106\\u0108\\u010A\\u010C\\u010E\\u0110\\u0112\\u0114\\u0116\\u0118\\u011A\\u011C\\u011E\\u0120\\u0122\\u0124\\u0126\\u0128\\u012A\\u012C\\u012E\\u0130\\u0132\\u0134\\u0136\\u0139\\u013B\\u013D\\u013F\\u0141\\u0143\\u0145\\u0147\\u014A\\u014C\\u014E\\u0150\\u0152\\u0154\\u0156\\u0158\\u015A\\u015C\\u015E\\u0160\\u0162\\u0164\\u0166\\u0168\\u016A\\u016C\\u016E\\u0170\\u0172\\u0174\\u0176\\u0178\\u0179\\u017B\\u017D\\u0181\\u0182\\u0184\\u0186\\u0187\\u0189-\\u018B\\u018E-\\u0191\\u0193\\u0194\\u0196-\\u0198\\u019C\\u019D\\u019F\\u01A0\\u01A2\\u01A4\\u01A6\\u01A7\\u01A9\\u01AC\\u01AE\\u01AF\\u01B1-\\u01B3\\u01B5\\u01B7\\u01B8\\u01BC\\u01C4\\u01C7\\u01CA\\u01CD\\u01CF\\u01D1\\u01D3\\u01D5\\u01D7\\u01D9\\u01DB\\u01DE\\u01E0\\u01E2\\u01E4\\u01E6\\u01E8\\u01EA\\u01EC\\u01EE\\u01F1\\u01F4\\u01F6-\\u01F8\\u01FA\\u01FC\\u01FE\\u0200\\u0202\\u0204\\u0206\\u0208\\u020A\\u020C\\u020E\\u0210\\u0212\\u0214\\u0216\\u0218\\u021A\\u021C\\u021E\\u0220\\u0222\\u0224\\u0226\\u0228\\u022A\\u022C\\u022E\\u0230\\u0232\\u023A\\u023B\\u023D\\u023E\\u0241\\u0243-\\u0246\\u0248\\u024A\\u024C\\u024E\\u0370\\u0372\\u0376\\u0386\\u0388-\\u038A\\u038C\\u038E\\u038F\\u0391-\\u03A1\\u03A3-\\u03AB\\u03CF\\u03D2-\\u03D4\\u03D8\\u03DA\\u03DC\\u03DE\\u03E0\\u03E2\\u03E4\\u03E6\\u03E8\\u03EA\\u03EC\\u03EE\\u03F4\\u03F7\\u03F9\\u03FA\\u03FD-\\u042F\\u0460\\u0462\\u0464\\u0466\\u0468\\u046A\\u046C\\u046E\\u0470\\u0472\\u0474\\u0476\\u0478\\u047A\\u047C\\u047E\\u0480\\u048A\\u048C\\u048E\\u0490\\u0492\\u0494\\u0496\\u0498\\u049A\\u049C\\u049E\\u04A0\\u04A2\\u04A4\\u04A6\\u04A8\\u04AA\\u04AC\\u04AE\\u04B0\\u04B2\\u04B4\\u04B6\\u04B8\\u04BA\\u04BC\\u04BE\\u04C0\\u04C1\\u04C3\\u04C5\\u04C7\\u04C9\\u04CB\\u04CD\\u04D0\\u04D2\\u04D4\\u04D6\\u04D8\\u04DA\\u04DC\\u04DE\\u04E0\\u04E2\\u04E4\\u04E6\\u04E8\\u04EA\\u04EC\\u04EE\\u04F0\\u04F2\\u04F4\\u04F6\\u04F8\\u04FA\\u04FC\\u04FE\\u0500\\u0502\\u0504\\u0506\\u0508\\u050A\\u050C\\u050E\\u0510\\u0512\\u0514\\u0516\\u0518\\u051A\\u051C\\u051E\\u0520\\u0522\\u0524\\u0526\\u0531-\\u0556\\u10A0-\\u10C5\\u1E00\\u1E02\\u1E04\\u1E06\\u1E08\\u1E0A\\u1E0C\\u1E0E\\u1E10\\u1E12\\u1E14\\u1E16\\u1E18\\u1E1A\\u1E1C\\u1E1E\\u1E20\\u1E22\\u1E24\\u1E26\\u1E28\\u1E2A\\u1E2C\\u1E2E\\u1E30\\u1E32\\u1E34\\u1E36\\u1E38\\u1E3A\\u1E3C\\u1E3E\\u1E40\\u1E42\\u1E44\\u1E46\\u1E48\\u1E4A\\u1E4C\\u1E4E\\u1E50\\u1E52\\u1E54\\u1E56\\u1E58\\u1E5A\\u1E5C\\u1E5E\\u1E60\\u1E62\\u1E64\\u1E66\\u1E68\\u1E6A\\u1E6C\\u1E6E\\u1E70\\u1E72\\u1E74\\u1E76\\u1E78\\u1E7A\\u1E7C\\u1E7E\\u1E80\\u1E82\\u1E84\\u1E86\\u1E88\\u1E8A\\u1E8C\\u1E8E\\u1E90\\u1E92\\u1E94\\u1E9E\\u1EA0\\u1EA2\\u1EA4\\u1EA6\\u1EA8\\u1EAA\\u1EAC\\u1EAE\\u1EB0\\u1EB2\\u1EB4\\u1EB6\\u1EB8\\u1EBA\\u1EBC\\u1EBE\\u1EC0\\u1EC2\\u1EC4\\u1EC6\\u1EC8\\u1ECA\\u1ECC\\u1ECE\\u1ED0\\u1ED2\\u1ED4\\u1ED6\\u1ED8\\u1EDA\\u1EDC\\u1EDE\\u1EE0\\u1EE2\\u1EE4\\u1EE6\\u1EE8\\u1EEA\\u1EEC\\u1EEE\\u1EF0\\u1EF2\\u1EF4\\u1EF6\\u1EF8\\u1EFA\\u1EFC\\u1EFE\\u1F08-\\u1F0F\\u1F18-\\u1F1D\\u1F28-\\u1F2F\\u1F38-\\u1F3F\\u1F48-\\u1F4D\\u1F59\\u1F5B\\u1F5D\\u1F5F\\u1F68-\\u1F6F\\u1FB8-\\u1FBB\\u1FC8-\\u1FCB\\u1FD8-\\u1FDB\\u1FE8-\\u1FEC\\u1FF8-\\u1FFB\\u2102\\u2107\\u210B-\\u210D\\u2110-\\u2112\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u2130-\\u2133\\u213E\\u213F\\u2145\\u2183\\u2C00-\\u2C2E\\u2C60\\u2C62-\\u2C64\\u2C67\\u2C69\\u2C6B\\u2C6D-\\u2C70\\u2C72\\u2C75\\u2C7E-\\u2C80\\u2C82\\u2C84\\u2C86\\u2C88\\u2C8A\\u2C8C\\u2C8E\\u2C90\\u2C92\\u2C94\\u2C96\\u2C98\\u2C9A\\u2C9C\\u2C9E\\u2CA0\\u2CA2\\u2CA4\\u2CA6\\u2CA8\\u2CAA\\u2CAC\\u2CAE\\u2CB0\\u2CB2\\u2CB4\\u2CB6\\u2CB8\\u2CBA\\u2CBC\\u2CBE\\u2CC0\\u2CC2\\u2CC4\\u2CC6\\u2CC8\\u2CCA\\u2CCC\\u2CCE\\u2CD0\\u2CD2\\u2CD4\\u2CD6\\u2CD8\\u2CDA\\u2CDC\\u2CDE\\u2CE0\\u2CE2\\u2CEB\\u2CED\\uA640\\uA642\\uA644\\uA646\\uA648\\uA64A\\uA64C\\uA64E\\uA650\\uA652\\uA654\\uA656\\uA658\\uA65A\\uA65C\\uA65E\\uA660\\uA662\\uA664\\uA666\\uA668\\uA66A\\uA66C\\uA680\\uA682\\uA684\\uA686\\uA688\\uA68A\\uA68C\\uA68E\\uA690\\uA692\\uA694\\uA696\\uA722\\uA724\\uA726\\uA728\\uA72A\\uA72C\\uA72E\\uA732\\uA734\\uA736\\uA738\\uA73A\\uA73C\\uA73E\\uA740\\uA742\\uA744\\uA746\\uA748\\uA74A\\uA74C\\uA74E\\uA750\\uA752\\uA754\\uA756\\uA758\\uA75A\\uA75C\\uA75E\\uA760\\uA762\\uA764\\uA766\\uA768\\uA76A\\uA76C\\uA76E\\uA779\\uA77B\\uA77D\\uA77E\\uA780\\uA782\\uA784\\uA786\\uA78B\\uA78D\\uA790\\uA7A0\\uA7A2\\uA7A4\\uA7A6\\uA7A8\\uFF21-\\uFF3A\\u0061-\\u007A\\u00AA\\u00B5\\u00BA\\u00DF-\\u00F6\\u00F8-\\u00FF\\u0101\\u0103\\u0105\\u0107\\u0109\\u010B\\u010D\\u010F\\u0111\\u0113\\u0115\\u0117\\u0119\\u011B\\u011D\\u011F\\u0121\\u0123\\u0125\\u0127\\u0129\\u012B\\u012D\\u012F\\u0131\\u0133\\u0135\\u0137\\u0138\\u013A\\u013C\\u013E\\u0140\\u0142\\u0144\\u0146\\u0148\\u0149\\u014B\\u014D\\u014F\\u0151\\u0153\\u0155\\u0157\\u0159\\u015B\\u015D\\u015F\\u0161\\u0163\\u0165\\u0167\\u0169\\u016B\\u016D\\u016F\\u0171\\u0173\\u0175\\u0177\\u017A\\u017C\\u017E-\\u0180\\u0183\\u0185\\u0188\\u018C\\u018D\\u0192\\u0195\\u0199-\\u019B\\u019E\\u01A1\\u01A3\\u01A5\\u01A8\\u01AA\\u01AB\\u01AD\\u01B0\\u01B4\\u01B6\\u01B9\\u01BA\\u01BD-\\u01BF\\u01C6\\u01C9\\u01CC\\u01CE\\u01D0\\u01D2\\u01D4\\u01D6\\u01D8\\u01DA\\u01DC\\u01DD\\u01DF\\u01E1\\u01E3\\u01E5\\u01E7\\u01E9\\u01EB\\u01ED\\u01EF\\u01F0\\u01F3\\u01F5\\u01F9\\u01FB\\u01FD\\u01FF\\u0201\\u0203\\u0205\\u0207\\u0209\\u020B\\u020D\\u020F\\u0211\\u0213\\u0215\\u0217\\u0219\\u021B\\u021D\\u021F\\u0221\\u0223\\u0225\\u0227\\u0229\\u022B\\u022D\\u022F\\u0231\\u0233-\\u0239\\u023C\\u023F\\u0240\\u0242\\u0247\\u0249\\u024B\\u024D\\u024F-\\u0293\\u0295-\\u02AF\\u0371\\u0373\\u0377\\u037B-\\u037D\\u0390\\u03AC-\\u03CE\\u03D0\\u03D1\\u03D5-\\u03D7\\u03D9\\u03DB\\u03DD\\u03DF\\u03E1\\u03E3\\u03E5\\u03E7\\u03E9\\u03EB\\u03ED\\u03EF-\\u03F3\\u03F5\\u03F8\\u03FB\\u03FC\\u0430-\\u045F\\u0461\\u0463\\u0465\\u0467\\u0469\\u046B\\u046D\\u046F\\u0471\\u0473\\u0475\\u0477\\u0479\\u047B\\u047D\\u047F\\u0481\\u048B\\u048D\\u048F\\u0491\\u0493\\u0495\\u0497\\u0499\\u049B\\u049D\\u049F\\u04A1\\u04A3\\u04A5\\u04A7\\u04A9\\u04AB\\u04AD\\u04AF\\u04B1\\u04B3\\u04B5\\u04B7\\u04B9\\u04BB\\u04BD\\u04BF\\u04C2\\u04C4\\u04C6\\u04C8\\u04CA\\u04CC\\u04CE\\u04CF\\u04D1\\u04D3\\u04D5\\u04D7\\u04D9\\u04DB\\u04DD\\u04DF\\u04E1\\u04E3\\u04E5\\u04E7\\u04E9\\u04EB\\u04ED\\u04EF\\u04F1\\u04F3\\u04F5\\u04F7\\u04F9\\u04FB\\u04FD\\u04FF\\u0501\\u0503\\u0505\\u0507\\u0509\\u050B\\u050D\\u050F\\u0511\\u0513\\u0515\\u0517\\u0519\\u051B\\u051D\\u051F\\u0521\\u0523\\u0525\\u0527\\u0561-\\u0587\\u1D00-\\u1D2B\\u1D62-\\u1D77\\u1D79-\\u1D9A\\u1E01\\u1E03\\u1E05\\u1E07\\u1E09\\u1E0B\\u1E0D\\u1E0F\\u1E11\\u1E13\\u1E15\\u1E17\\u1E19\\u1E1B\\u1E1D\\u1E1F\\u1E21\\u1E23\\u1E25\\u1E27\\u1E29\\u1E2B\\u1E2D\\u1E2F\\u1E31\\u1E33\\u1E35\\u1E37\\u1E39\\u1E3B\\u1E3D\\u1E3F\\u1E41\\u1E43\\u1E45\\u1E47\\u1E49\\u1E4B\\u1E4D\\u1E4F\\u1E51\\u1E53\\u1E55\\u1E57\\u1E59\\u1E5B\\u1E5D\\u1E5F\\u1E61\\u1E63\\u1E65\\u1E67\\u1E69\\u1E6B\\u1E6D\\u1E6F\\u1E71\\u1E73\\u1E75\\u1E77\\u1E79\\u1E7B\\u1E7D\\u1E7F\\u1E81\\u1E83\\u1E85\\u1E87\\u1E89\\u1E8B\\u1E8D\\u1E8F\\u1E91\\u1E93\\u1E95-\\u1E9D\\u1E9F\\u1EA1\\u1EA3\\u1EA5\\u1EA7\\u1EA9\\u1EAB\\u1EAD\\u1EAF\\u1EB1\\u1EB3\\u1EB5\\u1EB7\\u1EB9\\u1EBB\\u1EBD\\u1EBF\\u1EC1\\u1EC3\\u1EC5\\u1EC7\\u1EC9\\u1ECB\\u1ECD\\u1ECF\\u1ED1\\u1ED3\\u1ED5\\u1ED7\\u1ED9\\u1EDB\\u1EDD\\u1EDF\\u1EE1\\u1EE3\\u1EE5\\u1EE7\\u1EE9\\u1EEB\\u1EED\\u1EEF\\u1EF1\\u1EF3\\u1EF5\\u1EF7\\u1EF9\\u1EFB\\u1EFD\\u1EFF-\\u1F07\\u1F10-\\u1F15\\u1F20-\\u1F27\\u1F30-\\u1F37\\u1F40-\\u1F45\\u1F50-\\u1F57\\u1F60-\\u1F67\\u1F70-\\u1F7D\\u1F80-\\u1F87\\u1F90-\\u1F97\\u1FA0-\\u1FA7\\u1FB0-\\u1FB4\\u1FB6\\u1FB7\\u1FBE\\u1FC2-\\u1FC4\\u1FC6\\u1FC7\\u1FD0-\\u1FD3\\u1FD6\\u1FD7\\u1FE0-\\u1FE7\\u1FF2-\\u1FF4\\u1FF6\\u1FF7\\u210A\\u210E\\u210F\\u2113\\u212F\\u2134\\u2139\\u213C\\u213D\\u2146-\\u2149\\u214E\\u2184\\u2C30-\\u2C5E\\u2C61\\u2C65\\u2C66\\u2C68\\u2C6A\\u2C6C\\u2C71\\u2C73\\u2C74\\u2C76-\\u2C7C\\u2C81\\u2C83\\u2C85\\u2C87\\u2C89\\u2C8B\\u2C8D\\u2C8F\\u2C91\\u2C93\\u2C95\\u2C97\\u2C99\\u2C9B\\u2C9D\\u2C9F\\u2CA1\\u2CA3\\u2CA5\\u2CA7\\u2CA9\\u2CAB\\u2CAD\\u2CAF\\u2CB1\\u2CB3\\u2CB5\\u2CB7\\u2CB9\\u2CBB\\u2CBD\\u2CBF\\u2CC1\\u2CC3\\u2CC5\\u2CC7\\u2CC9\\u2CCB\\u2CCD\\u2CCF\\u2CD1\\u2CD3\\u2CD5\\u2CD7\\u2CD9\\u2CDB\\u2CDD\\u2CDF\\u2CE1\\u2CE3\\u2CE4\\u2CEC\\u2CEE\\u2D00-\\u2D25\\uA641\\uA643\\uA645\\uA647\\uA649\\uA64B\\uA64D\\uA64F\\uA651\\uA653\\uA655\\uA657\\uA659\\uA65B\\uA65D\\uA65F\\uA661\\uA663\\uA665\\uA667\\uA669\\uA66B\\uA66D\\uA681\\uA683\\uA685\\uA687\\uA689\\uA68B\\uA68D\\uA68F\\uA691\\uA693\\uA695\\uA697\\uA723\\uA725\\uA727\\uA729\\uA72B\\uA72D\\uA72F-\\uA731\\uA733\\uA735\\uA737\\uA739\\uA73B\\uA73D\\uA73F\\uA741\\uA743\\uA745\\uA747\\uA749\\uA74B\\uA74D\\uA74F\\uA751\\uA753\\uA755\\uA757\\uA759\\uA75B\\uA75D\\uA75F\\uA761\\uA763\\uA765\\uA767\\uA769\\uA76B\\uA76D\\uA76F\\uA771-\\uA778\\uA77A\\uA77C\\uA77F\\uA781\\uA783\\uA785\\uA787\\uA78C\\uA78E\\uA791\\uA7A1\\uA7A3\\uA7A5\\uA7A7\\uA7A9\\uA7FA\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFF41-\\uFF5A\\u01C5\\u01C8\\u01CB\\u01F2\\u1F88-\\u1F8F\\u1F98-\\u1F9F\\u1FA8-\\u1FAF\\u1FBC\\u1FCC\\u1FFC\\u02B0-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0374\\u037A\\u0559\\u0640\\u06E5\\u06E6\\u07F4\\u07F5\\u07FA\\u081A\\u0824\\u0828\\u0971\\u0E46\\u0EC6\\u10FC\\u17D7\\u1843\\u1AA7\\u1C78-\\u1C7D\\u1D2C-\\u1D61\\u1D78\\u1D9B-\\u1DBF\\u2071\\u207F\\u2090-\\u209C\\u2C7D\\u2D6F\\u2E2F\\u3005\\u3031-\\u3035\\u303B\\u309D\\u309E\\u30FC-\\u30FE\\uA015\\uA4F8-\\uA4FD\\uA60C\\uA67F\\uA717-\\uA71F\\uA770\\uA788\\uA9CF\\uAA70\\uAADD\\uFF70\\uFF9E\\uFF9F\\u01BB\\u01C0-\\u01C3\\u0294\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u063F\\u0641-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u0800-\\u0815\\u0840-\\u0858\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0972-\\u0977\\u0979-\\u097F\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C33\\u0C35-\\u0C39\\u0C3D\\u0C58\\u0C59\\u0C60\\u0C61\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D60\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E45\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EDC\\u0EDD\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10D0-\\u10FA\\u1100-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F4\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17DC\\u1820-\\u1842\\u1844-\\u1877\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191C\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19C1-\\u19C7\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BC0-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C77\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u2135-\\u2138\\u2D30-\\u2D65\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u3006\\u303C\\u3041-\\u3096\\u309F\\u30A1-\\u30FA\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400\\u4DB5\\u4E00\\u9FCB\\uA000-\\uA014\\uA016-\\uA48C\\uA4D0-\\uA4F7\\uA500-\\uA60B\\uA610-\\uA61F\\uA62A\\uA62B\\uA66E\\uA6A0-\\uA6E5\\uA7FB-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA6F\\uAA71-\\uAA76\\uAA7A\\uAA80-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB\\uAADC\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uABC0-\\uABE2\\uAC00\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA2D\\uFA30-\\uFA6D\\uFA70-\\uFAD9\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF66-\\uFF6F\\uFF71-\\uFF9D\\uFFA0-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC\\u16EE-\\u16F0\\u2160-\\u2182\\u2185-\\u2188\\u3007\\u3021-\\u3029\\u3038-\\u303A\\uA6E6-\\uA6EF]"],[4,452,453],[4,454,455],[4,456,457],[4,458,459],[4,355,460],[4,349,461],[4,351,462],[4,463,464],[4,358,465],[4,466,467],[4,468,469],[4,470,471],[4,472,473],[4,474,475],[4,476,477],[4,353,478],[4,479,480],[4,481,482,482,482,482],[2,"[-+]"],[8,483],[0,"MethodStartLabel",484],[6,485],[8,60],[4,486,219],[4,325,487],[0,"LineContinuation",488],[4,489,219],[4,258,259],[5,"*="],[5,"/="],[5,"%="],[5,"+="],[5,"-="],[5,"<<="],[5,">>="],[5,">>>="],[5,"&="],[5,"^="],[5,"|="],[4,490,491],[4,5,492,5,179,5,104,5,179],[0,"AssignmentExpressionNoIn",493],[6,494],[4,302,495],[4,496,5,497,498],[3,496,499],[8,500],[0,"CASE",501],[5,"null"],[4,502,116],[4,503,116],[5,"\uD82C"],[2,"[\\uDC00\\uDC01]"],[5,"\uD808"],[2,"[\\uDC00-\\uDF6E]"],[5,"\uD869"],[2,"[\\uDED6\\uDF00]"],[5,"\uD809"],[2,"[\\uDC00-\\uDC62]"],[2,"[\\uDC00-\\uDC19\\uDC34-\\uDC4D\\uDC68-\\uDC81\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB5\\uDCD0-\\uDCE9\\uDD04\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD38\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD6C-\\uDD85\\uDDA0-\\uDDB9\\uDDD4-\\uDDED\\uDE08-\\uDE21\\uDE3C-\\uDE55\\uDE70-\\uDE89\\uDEA8-\\uDEC0\\uDEE2-\\uDEFA\\uDF1C-\\uDF34\\uDF56-\\uDF6E\\uDF90-\\uDFA8\\uDFCA\\uDC1A-\\uDC33\\uDC4E-\\uDC54\\uDC56-\\uDC67\\uDC82-\\uDC9B\\uDCB6-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDCCF\\uDCEA-\\uDD03\\uDD1E-\\uDD37\\uDD52-\\uDD6B\\uDD86-\\uDD9F\\uDDBA-\\uDDD3\\uDDEE-\\uDE07\\uDE22-\\uDE3B\\uDE56-\\uDE6F\\uDE8A-\\uDEA5\\uDEC2-\\uDEDA\\uDEDC-\\uDEE1\\uDEFC-\\uDF14\\uDF16-\\uDF1B\\uDF36-\\uDF4E\\uDF50-\\uDF55\\uDF70-\\uDF88\\uDF8A-\\uDF8F\\uDFAA-\\uDFC2\\uDFC4-\\uDFC9\\uDFCB]"],[2,"[\\uDC03-\\uDC37\\uDC83-\\uDCAF]"],[2,"[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDF00-\\uDF1E\\uDF30-\\uDF40\\uDF42-\\uDF49\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF\\uDD40-\\uDD74\\uDF41\\uDF4A\\uDFD1-\\uDFD5]"],[5,"\uD80C"],[2,"[\\uDC00-\\uDFFF]"],[2,"[\\uDC00-\\uDC9D]"],[5,"\uD86E"],[2,"[\\uDC1D]"],[5,"\uD803"],[2,"[\\uDC00-\\uDC48]"],[5,"\uD840"],[2,"[\\uDC00]"],[5,"\uD87E"],[2,"[\\uDC00-\\uDE1D]"],[5,"\uD86D"],[2,"[\\uDF34\\uDF40]"],[5,"\uD81A"],[2,"[\\uDC00-\\uDE38]"],[2,"[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDD00-\\uDD15\\uDD20-\\uDD39\\uDE00\\uDE10-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE33\\uDE60-\\uDE7C\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF60-\\uDF72]"],[5,"\uD80D"],[2,"[\\uDC00-\\uDC2E]"],[5,"u"],[0,"HexDigit",504],[4,5,44,5,505,5,46],[4,43,506],[4,5,507],[9,508],[0,"EscapeSequence",509],[4,325,223],[9,510],[0,"LogicalAndExpression",511],[6,512],[5,"?"],[3,513,514],[4,5,174,5,442],[6,515],[0,"MemberExpression",516],[0,"Arguments",517],[6,518],[4,519,5,89],[4,5,258,259,5,442],[4,360,116],[5,"true"],[5,"false"],[2,"[0-9a-fA-F]"],[0,"MethodReturnType",520],[8,521],[0,"MethodLabel",522],[3,523,325,17],[3,524,525,526,326],[3,527,325,17],[4,528,529],[4,5,530,5,490],[4,269,5,297,5,442],[0,"ConditionalExpressionNoIn",531],[4,5,174,5,302],[4,532,533],[4,44,5,534,5,46],[4,5,535],[0,"NEW",536],[0,"MethodType",537],[4,5,104,538,5,43],[4,43,5,104,538,5,43],[2,"[\"]"],[0,"CharacterEscapeSequence",539],[4,540,541],[0,"HexEscapeSequence",542],[2,"[']"],[0,"BitwiseOrExpression",543],[6,544],[5,"||"],[4,545,546],[3,547,548,549],[6,550],[8,551],[3,497,552,553],[4,364,116],[4,43,554],[8,555],[3,556,557],[5,"0"],[9,558],[4,559,482,482],[4,560,561],[4,5,562,5,528],[0,"LogicalOrExpressionNoIn",563],[8,564],[0,"PrimaryExpression",565],[0,"FunctionExpression",566],[0,"NewExpressionWithArguments",567],[4,5,568],[0,"ArgumentList",569],[0,"BracketedAccessor",570],[0,"DotAccessor",571],[6,572],[4,5,44,5,573,5,46],[0,"SingleEscapeCharacter",574],[0,"NonEscapeCharacter",575],[0,"DecimalDigit",576],[5,"x"],[0,"BitwiseXOrExpression",577],[6,578],[5,"&&"],[4,579,580],[4,5,492,5,442,5,104,5,442],[3,581,43,582,583,584,585],[4,42,5,586,5,44,5,45,5,46,5,47,5,48,5,49],[4,519,5,89,5,497],[3,552,553],[4,179,5,587],[4,111,5,89,5,114],[4,588,5,118],[4,5,43],[0,"MethodParameterType",520],[2,"['\"\\\\bfnrtv]"],[4,256,589,219],[2,"[0-9]"],[4,590,591],[4,5,592,259,5,560],[0,"LogicalAndExpressionNoIn",593],[6,594],[0,"THIS",595],[0,"Literal",596],[0,"ArrayLiteral",597],[0,"ObjectLiteral",598],[4,44,5,89,5,46],[8,43],[6,599],[5,"."],[9,600],[0,"BitwiseAndExpression",601],[6,602],[5,"|"],[4,603,604],[4,5,530,5,579],[4,365,116],[3,284,285,605,122,606],[4,111,5,607,5,114],[4,47,5,608,5,49],[4,174,5,179],[0,"EscapeCharacter",609],[4,610,611],[4,5,612,259,5,590],[0,"BitwiseOrExpressionNoIn",613],[6,614],[0,"NumericLiteral",615],[0,"RegularExpressionLiteral",616],[0,"ElementList",617],[8,618],[3,556,558,559,481],[0,"EqualityExpression",619],[6,620],[5,"^"],[4,621,622],[4,5,562,5,603],[4,623,624],[4,625,626,625,627],[4,628,629,5,630],[4,631,5,632],[4,633,634],[4,5,635,259,5,610],[0,"BitwiseXOrExpressionNoIn",636],[6,637],[3,638,639],[9,210],[5,"/"],[0,"RegularExpressionBody",640],[0,"RegularExpressionFlags",211],[6,641],[6,642],[8,179],[0,"PropertyNameAndValueList",643],[8,174],[0,"RelationalExpression",644],[6,645],[5,"&"],[4,646,647],[4,5,592,259,5,621],[0,"DecimalLiteral",648],[0,"HexIntegerLiteral",649],[4,650,651],[4,174,5],[4,5,179,652],[4,653,654],[4,655,656],[4,5,657,5,633],[0,"BitwiseAndExpressionNoIn",658],[6,659],[4,660,661],[4,540,662,663],[0,"RegularExpressionFirstChar",664],[6,665],[7,666],[0,"PropertyAssignment",667],[6,668],[0,"ShiftExpression",669],[6,670],[0,"EqualityOperator",671],[4,672,673],[4,5,612,259,5,646],[3,674,675,676],[8,677],[2,"[Xx]"],[7,482],[3,678,679,680],[0,"RegularExpressionChar",681],[4,5,174],[3,682,683,684],[4,5,174,5,653],[4,685,686],[4,5,687,5,655],[3,688,689,690,691],[0,"EqualityExpressionNoIn",692],[6,693],[4,676,588,694],[4,588,695],[0,"DecimalIntegerLiteral",696],[0,"ExponentPart",697],[4,698,699],[0,"RegularExpressionBackslashSequence",700],[0,"RegularExpressionClass",701],[3,702,679,680],[4,703,5,104,5,179],[0,"PropertyGetter",704],[0,"PropertySetter",705],[0,"AdditiveExpression",706],[6,707],[0,"RelationalOperator",708],[5,"==="],[5,"!=="],[5,"=="],[5,"!="],[4,709,710],[4,5,635,259,5,672],[6,558],[7,558],[3,540,711],[4,712,713],[9,714],[0,"RegularExpressionNonTerminator",220],[4,325,699],[4,111,715,114],[4,716,699],[0,"PropertyName",717],[4,718,5,703,5,44,5,46,5,47,5,48,5,49],[4,719,5,703,5,44,5,720,5,46,5,47,5,48,5,49],[4,721,722],[4,5,723,5,685],[3,724,725,166,168,726,189],[0,"RelationalExpressionNoIn",727],[6,728],[4,729,694],[2,"[eE]"],[0,"SignedInteger",730],[2,"[*\\u005C/[]"],[6,731],[9,732],[3,118,122,605],[5,"get"],[5,"set"],[0,"PropertySetParameterList",43],[0,"MultiplicativeExpression",733],[6,734],[0,"ShiftOperator",735],[5,"<="],[5,">="],[0,"INSTANCEOF",736],[4,655,737],[4,5,657,5,709],[2,"[1-9]"],[4,738,695],[0,"RegularExpressionClassChar",739],[2,"[\\u005C/[]"],[4,740,741],[4,5,742,5,721],[3,743,744,745],[4,363,116],[6,746],[8,747],[3,748,679],[0,"UnaryExpression",749],[6,750],[0,"AdditiveOperator",751],[5,"<<"],[5,">>"],[5,">>>"],[4,5,752,5,655],[2,"[+-]"],[4,753,699],[3,754,755,756,757,758,759,760,761,762,763],[4,5,764,5,740],[4,765,259],[0,"RelationalOperatorNoIn",766],[9,767],[0,"PostfixExpression",768],[4,769,5,740],[4,770,5,740],[4,771,5,740],[4,772,5,740],[4,773,5,740],[4,774,5,740],[4,775,5,740],[4,776,5,740],[4,777,5,740],[0,"MultiplicativeOperator",778],[3,779,780],[3,724,725,166,168,726],[2,"[\\u005C\\]]"],[4,269,781],[0,"DELETE",782],[0,"VOID",783],[0,"TYPEOF",784],[5,"++"],[5,"--"],[5,"+"],[5,"-"],[5,"~"],[5,"!"],[4,785,259],[4,774,786],[4,775,787],[8,788],[4,362,116],[4,367,116],[4,366,116],[3,789,625,790],[9,774],[9,775],[4,98,791],[5,"*"],[5,"%"],[3,772,773],[0,"%start",793],[8,794],[0,"%SourceElements",795],[4,796,797,798,796],[0,"%_",799],[0,"%SourceElement",800],[6,801],[6,802],[3,803,804,805,806],[4,796,797],[3,807,808,809],[0,"%Statement",810],[0,"%FunctionDeclaration",811],[0,"%ClassDeclaration",812],[0,"%ImportStatement",813],[0,"%WhiteSpace",23],[0,"%LineTerminator",24],[0,"%Comment",814],[3,815,816,817,818,819,820,821,822,823,824,825,826,827,828,829,830],[4,831,796,832,796,44,796,833,796,46,796,47,796,834,796,49],[4,50,796,832,796,835,796,47,796,49,796,836,796,53],[4,54,796,837],[3,838,839],[0,"%Block",840],[0,"%VariableStatement",841],[0,"%EmptyStatement",60],[0,"%ExpressionStatement",842],[0,"%IfStatement",843],[0,"%IterationStatement",844],[0,"%ContinueStatement",845],[0,"%BreakStatement",846],[0,"%ReturnStatement",847],[0,"%WithStatement",848],[0,"%LabelledStatement",849],[0,"%SwitchStatement",850],[0,"%ThrowStatement",851],[0,"%TryStatement",852],[0,"%DebuggerStatement",853],[0,"%MessageStatement",854],[0,"%FUNCTION",855],[0,"%Identifier",856],[8,857],[0,"%FunctionBody",793],[8,858],[0,"%ClassBody",859],[3,860,861],[0,"%MultiLineComment",81],[0,"%SingleLineComment",862],[12,863,864],[4,865,796,866,867,868],[4,869,870,868],[4,871,796,44,796,870,796,46,796,803,872],[3,873,874,875,876,877],[4,878,879,880],[4,881,879,880],[4,882,879,883],[4,884,796,44,796,870,796,46,796,803],[4,832,796,104,796,803],[4,885,796,44,796,870,796,46,796,886],[4,887,879,883],[4,888,796,815,796,889],[4,890,796,868],[4,111,796,891,796,832,892,796,114],[4,115,893],[12,894,895],[0,"%FormalParameterList",896],[0,"%SuperclassDeclaration",897],[8,898],[0,"%LocalFilePath",899],[0,"%StandardFilePath",900],[4,127,901],[4,47,796,902,796,49],[11,"%BadBlock",903,"Missing ending brace"],[0,"%VAR",904],[0,"%VariableDeclaration",905],[6,906],[0,"%EOS",907],[9,908],[0,"%Expression",909],[0,"%IF",910],[8,911],[0,"%DoWhileStatement",912],[0,"%WhileStatement",913],[0,"%ForStatement",914],[0,"%ForInStatement",915],[0,"%EachStatement",916],[0,"%CONTINUE",917],[0,"%__",918],[3,919,920],[0,"%BREAK",921],[0,"%RETURN",922],[3,920,923],[0,"%WITH",924],[0,"%SWITCH",925],[0,"%CaseBlock",926],[0,"%THROW",927],[0,"%TRY",928],[3,929,930],[0,"%DEBUGGER",931],[3,932,870],[8,933],[9,934],[4,935,936],[0,"%BadIdentifier",937],[4,832,938],[4,104,796,832],[0,"%ClassElements",939],[0,"%StringLiteral",940],[4,166,796,167,796,168],[6,941],[8,942],[4,47,796,902,796],[4,172,893],[4,832,943],[4,796,174,796,866],[3,944,945,946,947],[3,47,831],[4,948,949],[4,181,893],[4,796,950,796,803],[4,951,796,803,796,952,796,44,796,870,796,46,796,868],[4,952,796,44,796,870,796,46,796,803],[4,953,796,44,796,954,796,60,796,955,796,60,796,955,796,46,796,803],[4,953,796,44,796,956,796,957,796,870,796,46,796,803],[4,190,796,44,796,956,796,957,796,870,796,46,796,803],[4,191,893],[6,958],[4,832,868],[0,"%SemicolonInsertionEOS",959],[4,194,893],[4,195,893],[4,870,868],[4,196,893],[4,197,893],[4,47,796,960,796,961,796,960,796,49],[4,200,893],[4,201,893],[4,962,963],[0,"%Finally",964],[4,205,893],[0,"%SuperExpression",206],[4,104,870,965],[0,"%IdentifierPart",966],[9,967],[0,"%IdentifierName",968],[3,969,970],[6,971],[4,796,972,973,796],[3,974,975],[0,"%SingleLineCommentChar",976],[0,"%StatementList",977],[8,978],[4,796,60],[4,879,979],[4,879,224],[4,879,980],[0,"%AssignmentExpression",981],[6,982],[0,"%ELSE",983],[0,"%DO",984],[0,"%WHILE",985],[0,"%FOR",986],[8,987],[8,870],[0,"%ForInFirstExpression",988],[0,"%IN",989],[3,807,990,839],[3,991,945,946,947],[8,992],[8,993],[0,"%Catch",994],[8,995],[4,996,796,815],[6,997],[3,998,999,1000,1001,1002,1003],[4,1004,893],[4,998,1005],[11,"%ReservedWordIdentifier",967,"Identifier cannot be a reserved word"],[11,"%DigitIdentifier",1006,"Identifier cannot start with a digit"],[4,796,174,796,832],[0,"%ClassElement",1007],[6,1008],[4,252,1009,252],[4,254,1010,254],[4,1011,219],[4,803,1012],[4,796,258,259,796,948],[0,"%LineTerminatorSequence",260],[0,"%EOF",261],[3,1013,1014],[4,796,174,796,948],[4,264,893],[4,265,893],[4,266,893],[4,267,893],[0,"%ForFirstExpression",1015],[3,1016,1017],[4,271,893],[0,"%SingleLineMultiLineComment",1018],[4,879,60],[0,"%CaseClauses",1019],[0,"%DefaultClause",1020],[4,1021,796,44,796,832,796,46,796,815],[4,796,930],[0,"%FINALLY",1022],[4,796,832,104,796,870],[0,"%IdentifierStart",1023],[0,"%UnicodeCombiningMark",277],[0,"%UnicodeDigit",278],[0,"%UnicodeConnectorPunctuation",279],[0,"%ZWNJ",280],[0,"%ZWJ",281],[0,"%ReservedWord",1024],[6,934],[4,1000,1025],[3,1026,803,804],[4,796,972],[6,1027],[6,1028],[9,808],[6,1029],[4,1016,796,1030,796,948],[0,"%ConditionalExpression",1031],[3,1032,1033],[0,"%LeftHandSideExpression",1034],[4,865,796,1035],[4,124,1036,126],[4,1037,1038],[4,1039,796,104,1040],[0,"%CATCH",1041],[4,309,893],[3,1042,287,1043],[3,1044,1045,1046,1047],[7,934],[0,"%MethodDeclaration",1048],[0,"%DoubleStringCharacter",1049],[0,"%SingleStringCharacter",1050],[4,796,803],[0,"%AssignmentOperator",331],[4,1051,1052],[0,"%ExpressionNoIn",1053],[4,865,796,1054],[3,1055,1056],[0,"%VariableDeclarationNoIn",1057],[6,1058],[0,"%CaseClause",1059],[6,1060],[0,"%DEFAULT",1061],[8,1062],[4,344,893],[0,"%UnicodeLetter",324],[4,325,1063],[0,"%Keyword",320],[0,"%FutureReservedWord",321],[0,"%NullLiteral",1064],[0,"%BooleanLiteral",1065],[4,419,1066,796,1067,1068,796,423,796,47,796,834,796,49],[3,1069,1070,1071],[3,1072,1070,1071],[0,"%LogicalOrExpression",1073],[8,1074],[4,1075,1076],[0,"%VariableDeclarationListNoIn",1077],[0,"%CallExpression",1078],[0,"%NewExpression",1079],[4,832,1080],[4,218,1011,219],[4,1081,796,870,796,104,1040],[4,796,1037],[4,361,893],[4,796,942],[0,"%UnicodeEscapeSequence",1082],[0,"%NULL",1083],[3,1084,1085],[8,1086],[0,"%MethodStartLabel",1087],[6,1088],[4,1089,219],[4,325,1090],[0,"%LineContinuation",1091],[4,1092,219],[4,1093,1094],[4,796,492,796,948,796,104,796,948],[0,"%AssignmentExpressionNoIn",1095],[6,1096],[4,1035,1097],[4,1098,796,1099,1100],[3,1098,1101],[8,1102],[0,"%CASE",1103],[4,481,1104,1104,1104,1104],[4,449,893],[0,"%TRUE",1105],[0,"%FALSE",1106],[4,796,44,796,1107,796,46],[4,832,1108],[4,796,1109],[9,1110],[0,"%EscapeSequence",1111],[4,325,979],[9,1112],[0,"%LogicalAndExpression",1113],[6,1114],[3,1115,1116],[4,796,174,796,1075],[6,1117],[0,"%MemberExpression",1118],[0,"%Arguments",1119],[6,1120],[4,1121,796,870],[4,796,258,259,796,1075],[4,360,893],[0,"%HexDigit",504],[4,502,893],[4,503,893],[0,"%MethodReturnType",1122],[8,1123],[0,"%MethodLabel",1124],[3,523,325,808],[3,1125,1126,1127,1063],[3,527,325,808],[4,1128,1129],[4,796,530,796,1093],[4,1016,796,1030,796,1075],[0,"%ConditionalExpressionNoIn",1130],[4,796,174,796,1035],[4,1131,1132],[4,44,796,1133,796,46],[4,796,1134],[0,"%NEW",1135],[0,"%MethodType",1136],[4,796,104,1137,796,832],[4,832,796,104,1137,796,832],[0,"%CharacterEscapeSequence",1138],[4,540,1139],[0,"%HexEscapeSequence",1140],[0,"%BitwiseOrExpression",1141],[6,1142],[4,1143,1144],[3,1145,1146,1147],[6,1148],[8,1149],[3,1099,1150,1151],[4,364,893],[4,832,1152],[8,1153],[3,1154,1155],[9,1156],[4,559,1104,1104],[4,1157,1158],[4,796,562,796,1128],[0,"%LogicalOrExpressionNoIn",1159],[8,1160],[0,"%PrimaryExpression",1161],[0,"%FunctionExpression",1162],[0,"%NewExpressionWithArguments",1163],[4,796,1164],[0,"%ArgumentList",1165],[0,"%BracketedAccessor",1166],[0,"%DotAccessor",1167],[6,1168],[4,796,44,796,1169,796,46],[0,"%SingleEscapeCharacter",574],[0,"%NonEscapeCharacter",1170],[0,"%DecimalDigit",576],[0,"%BitwiseXOrExpression",1171],[6,1172],[4,1173,1174],[4,796,492,796,1075,796,104,796,1075],[3,1175,832,1176,1177,1178,1179],[4,831,796,1180,796,44,796,833,796,46,796,47,796,834,796,49],[4,1121,796,870,796,1099],[3,1150,1151],[4,948,796,1181],[4,111,796,870,796,114],[4,588,796,936],[4,796,832],[0,"%MethodParameterType",1122],[4,1011,1182,219],[4,1183,1184],[4,796,592,259,796,1157],[0,"%LogicalAndExpressionNoIn",1185],[6,1186],[0,"%THIS",1187],[0,"%Literal",1188],[0,"%ArrayLiteral",1189],[0,"%ObjectLiteral",1190],[4,44,796,870,796,46],[8,832],[6,1191],[9,1192],[0,"%BitwiseAndExpression",1193],[6,1194],[4,1195,1196],[4,796,530,796,1173],[4,365,893],[3,1046,1047,1197,899,1198],[4,111,796,1199,796,114],[4,47,796,1200,796,49],[4,174,796,948],[0,"%EscapeCharacter",1201],[4,1202,1203],[4,796,612,259,796,1183],[0,"%BitwiseOrExpressionNoIn",1204],[6,1205],[0,"%NumericLiteral",1206],[0,"%RegularExpressionLiteral",1207],[0,"%ElementList",1208],[8,1209],[3,1154,1156,559,481],[0,"%EqualityExpression",1210],[6,1211],[4,1212,1213],[4,796,562,796,1195],[4,1214,1215],[4,625,1216,625,1217],[4,1218,1219,796,1220],[4,1221,796,632],[4,1222,1223],[4,796,635,259,796,1202],[0,"%BitwiseXOrExpressionNoIn",1224],[6,1225],[3,1226,1227],[9,998],[0,"%RegularExpressionBody",1228],[0,"%RegularExpressionFlags",1005],[6,1229],[6,1230],[8,948],[0,"%PropertyNameAndValueList",1231],[0,"%RelationalExpression",1232],[6,1233],[4,1234,1235],[4,796,592,259,796,1212],[0,"%DecimalLiteral",1236],[0,"%HexIntegerLiteral",1237],[4,1238,1239],[4,174,796],[4,796,948,1240],[4,1241,1242],[4,1243,1244],[4,796,1245,796,1222],[0,"%BitwiseAndExpressionNoIn",1246],[6,1247],[4,1248,1249],[4,540,662,1250],[0,"%RegularExpressionFirstChar",1251],[6,1252],[7,1253],[0,"%PropertyAssignment",1254],[6,1255],[0,"%ShiftExpression",1256],[6,1257],[0,"%EqualityOperator",671],[4,1258,1259],[4,796,612,259,796,1234],[3,1260,1261,1262],[8,1263],[7,1104],[3,1264,1265,1266],[0,"%RegularExpressionChar",1267],[4,796,174],[3,1268,1269,1270],[4,796,174,796,1241],[4,1271,1272],[4,796,1273,796,1243],[0,"%EqualityExpressionNoIn",1274],[6,1275],[4,1262,588,1276],[4,588,1277],[0,"%DecimalIntegerLiteral",1278],[0,"%ExponentPart",1279],[4,698,1280],[0,"%RegularExpressionBackslashSequence",1281],[0,"%RegularExpressionClass",1282],[3,1283,1265,1266],[4,1284,796,104,796,948],[0,"%PropertyGetter",1285],[0,"%PropertySetter",1286],[0,"%AdditiveExpression",1287],[6,1288],[0,"%RelationalOperator",1289],[4,1290,1291],[4,796,635,259,796,1258],[6,1156],[7,1156],[3,540,1292],[4,712,1293],[0,"%RegularExpressionNonTerminator",976],[4,325,1280],[4,111,1294,114],[4,716,1280],[0,"%PropertyName",1295],[4,718,796,1284,796,44,796,46,796,47,796,834,796,49],[4,719,796,1284,796,44,796,1296,796,46,796,47,796,834,796,49],[4,1297,1298],[4,796,1299,796,1271],[3,724,725,166,168,1300,957],[0,"%RelationalExpressionNoIn",1301],[6,1302],[4,729,1276],[0,"%SignedInteger",1303],[6,1304],[3,936,899,1197],[0,"%PropertySetParameterList",832],[0,"%MultiplicativeExpression",1305],[6,1306],[0,"%ShiftOperator",735],[0,"%INSTANCEOF",1307],[4,1243,1308],[4,796,1245,796,1290],[4,738,1277],[0,"%RegularExpressionClassChar",1309],[4,1310,1311],[4,796,1312,796,1297],[4,363,893],[6,1313],[3,1314,1265],[0,"%UnaryExpression",1315],[6,1316],[0,"%AdditiveOperator",751],[4,796,1317,796,1243],[4,753,1280],[3,1318,1319,1320,1321,1322,1323,1324,1325,1326,1327],[4,796,1328,796,1310],[0,"%RelationalOperatorNoIn",1329],[0,"%PostfixExpression",1330],[4,1331,796,1310],[4,1332,796,1310],[4,1333,796,1310],[4,772,796,1310],[4,773,796,1310],[4,774,796,1310],[4,775,796,1310],[4,776,796,1310],[4,777,796,1310],[0,"%MultiplicativeOperator",778],[3,724,725,166,168,1300],[4,1016,1334],[0,"%DELETE",1335],[0,"%VOID",1336],[0,"%TYPEOF",1337],[8,1338],[4,362,893],[4,367,893],[4,366,893],[4,879,791]],"nameToUID":{"start":1,"SourceElements":3,"_":5,"SourceElement":6,"Statement":12,"FunctionDeclaration":13,"ClassDeclaration":14,"ImportStatement":15,"WhiteSpace":16,"LineTerminator":17,"Comment":18,"Block":26,"VariableStatement":27,"EmptyStatement":28,"ExpressionStatement":29,"IfStatement":30,"IterationStatement":31,"ContinueStatement":32,"BreakStatement":33,"ReturnStatement":34,"WithStatement":35,"LabelledStatement":36,"SwitchStatement":37,"ThrowStatement":38,"TryStatement":39,"DebuggerStatement":40,"MessageStatement":41,"FUNCTION":42,"Identifier":43,"FunctionBody":48,"ClassBody":52,"MultiLineComment":56,"SingleLineComment":57,"FormalParameterList":76,"SuperclassDeclaration":77,"LocalFilePath":79,"StandardFilePath":80,"VAR":84,"VariableDeclaration":85,"EOS":87,"Expression":89,"IF":90,"DoWhileStatement":92,"WhileStatement":93,"ForStatement":94,"ForInStatement":95,"EachStatement":96,"CONTINUE":97,"__":98,"BREAK":100,"RETURN":101,"WITH":103,"SWITCH":105,"CaseBlock":106,"THROW":107,"TRY":108,"DEBUGGER":110,"IdentifierName":118,"ClassElements":121,"StringLiteral":122,"StatementList":129,"SemicolonInsertionEOS":146,"Finally":156,"SuperExpression":158,"IdentifierPart":160,"SingleLineCommentChar":170,"AssignmentExpression":179,"ELSE":182,"DO":183,"WHILE":184,"FOR":185,"ForInFirstExpression":188,"IN":189,"Catch":202,"ReservedWord":209,"IdentifierStart":210,"ClassElement":213,"LineTerminatorSequence":223,"EOF":225,"ForFirstExpression":232,"SingleLineMultiLineComment":235,"CaseClauses":237,"DefaultClause":238,"FINALLY":241,"UnicodeCombiningMark":243,"UnicodeDigit":244,"UnicodeConnectorPunctuation":245,"ZWNJ":246,"ZWJ":247,"ConditionalExpression":263,"LeftHandSideExpression":269,"CATCH":275,"Keyword":282,"FutureReservedWord":283,"NullLiteral":284,"BooleanLiteral":285,"UnicodeLetter":286,"MethodDeclaration":289,"DoubleStringCharacter":290,"SingleStringCharacter":291,"AssignmentOperator":297,"ExpressionNoIn":299,"VariableDeclarationNoIn":302,"CaseClause":304,"DEFAULT":306,"NULL":322,"UnicodeEscapeSequence":326,"LogicalOrExpression":332,"VariableDeclarationListNoIn":335,"CallExpression":336,"NewExpression":337,"TRUE":398,"FALSE":399,"MethodStartLabel":421,"LineContinuation":426,"AssignmentExpressionNoIn":442,"CASE":448,"HexDigit":482,"EscapeSequence":487,"LogicalAndExpression":490,"MemberExpression":496,"Arguments":497,"MethodReturnType":505,"MethodLabel":507,"ConditionalExpressionNoIn":514,"NEW":519,"MethodType":520,"CharacterEscapeSequence":524,"HexEscapeSequence":526,"BitwiseOrExpression":528,"LogicalOrExpressionNoIn":545,"PrimaryExpression":547,"FunctionExpression":548,"NewExpressionWithArguments":549,"ArgumentList":551,"BracketedAccessor":552,"DotAccessor":553,"SingleEscapeCharacter":556,"NonEscapeCharacter":557,"DecimalDigit":558,"BitwiseXOrExpression":560,"MethodParameterType":573,"LogicalAndExpressionNoIn":579,"THIS":581,"Literal":582,"ArrayLiteral":583,"ObjectLiteral":584,"BitwiseAndExpression":590,"EscapeCharacter":600,"BitwiseOrExpressionNoIn":603,"NumericLiteral":605,"RegularExpressionLiteral":606,"ElementList":607,"EqualityExpression":610,"BitwiseXOrExpressionNoIn":621,"RegularExpressionBody":626,"RegularExpressionFlags":627,"PropertyNameAndValueList":631,"RelationalExpression":633,"DecimalLiteral":638,"HexIntegerLiteral":639,"BitwiseAndExpressionNoIn":646,"RegularExpressionFirstChar":650,"PropertyAssignment":653,"ShiftExpression":655,"EqualityOperator":657,"RegularExpressionChar":665,"EqualityExpressionNoIn":672,"DecimalIntegerLiteral":676,"ExponentPart":677,"RegularExpressionBackslashSequence":679,"RegularExpressionClass":680,"PropertyGetter":683,"PropertySetter":684,"AdditiveExpression":685,"RelationalOperator":687,"RegularExpressionNonTerminator":699,"PropertyName":703,"RelationalExpressionNoIn":709,"SignedInteger":713,"PropertySetParameterList":720,"MultiplicativeExpression":721,"ShiftOperator":723,"INSTANCEOF":726,"RegularExpressionClassChar":731,"UnaryExpression":740,"AdditiveOperator":742,"RelationalOperatorNoIn":752,"PostfixExpression":754,"MultiplicativeOperator":764,"DELETE":769,"VOID":770,"TYPEOF":771,"%start":792,"%SourceElements":794,"%_":796,"%SourceElement":797,"%Statement":803,"%FunctionDeclaration":804,"%ClassDeclaration":805,"%ImportStatement":806,"%WhiteSpace":807,"%LineTerminator":808,"%Comment":809,"%Block":815,"%VariableStatement":816,"%EmptyStatement":817,"%ExpressionStatement":818,"%IfStatement":819,"%IterationStatement":820,"%ContinueStatement":821,"%BreakStatement":822,"%ReturnStatement":823,"%WithStatement":824,"%LabelledStatement":825,"%SwitchStatement":826,"%ThrowStatement":827,"%TryStatement":828,"%DebuggerStatement":829,"%MessageStatement":830,"%FUNCTION":831,"%Identifier":832,"%FunctionBody":834,"%ClassBody":836,"%MultiLineComment":838,"%SingleLineComment":839,"%FormalParameterList":857,"%SuperclassDeclaration":858,"%LocalFilePath":860,"%StandardFilePath":861,"%BadBlock":864,"%VAR":865,"%VariableDeclaration":866,"%EOS":868,"%Expression":870,"%IF":871,"%DoWhileStatement":873,"%WhileStatement":874,"%ForStatement":875,"%ForInStatement":876,"%EachStatement":877,"%CONTINUE":878,"%__":879,"%BREAK":881,"%RETURN":882,"%WITH":884,"%SWITCH":885,"%CaseBlock":886,"%THROW":887,"%TRY":888,"%DEBUGGER":890,"%BadIdentifier":895,"%ClassElements":898,"%StringLiteral":899,"%SemicolonInsertionEOS":920,"%Finally":930,"%SuperExpression":932,"%IdentifierPart":934,"%IdentifierName":936,"%SingleLineCommentChar":941,"%StatementList":942,"%AssignmentExpression":948,"%ELSE":950,"%DO":951,"%WHILE":952,"%FOR":953,"%ForInFirstExpression":956,"%IN":957,"%Catch":962,"%ReservedWordIdentifier":969,"%DigitIdentifier":970,"%ClassElement":972,"%LineTerminatorSequence":979,"%EOF":980,"%ForFirstExpression":987,"%SingleLineMultiLineComment":990,"%CaseClauses":992,"%DefaultClause":993,"%FINALLY":996,"%IdentifierStart":998,"%UnicodeCombiningMark":999,"%UnicodeDigit":1000,"%UnicodeConnectorPunctuation":1001,"%ZWNJ":1002,"%ZWJ":1003,"%ReservedWord":1004,"%ConditionalExpression":1014,"%LeftHandSideExpression":1016,"%CATCH":1021,"%MethodDeclaration":1026,"%DoubleStringCharacter":1027,"%SingleStringCharacter":1028,"%AssignmentOperator":1030,"%ExpressionNoIn":1032,"%VariableDeclarationNoIn":1035,"%CaseClause":1037,"%DEFAULT":1039,"%UnicodeLetter":1042,"%Keyword":1044,"%FutureReservedWord":1045,"%NullLiteral":1046,"%BooleanLiteral":1047,"%LogicalOrExpression":1051,"%VariableDeclarationListNoIn":1054,"%CallExpression":1055,"%NewExpression":1056,"%UnicodeEscapeSequence":1063,"%NULL":1064,"%MethodStartLabel":1067,"%LineContinuation":1071,"%AssignmentExpressionNoIn":1075,"%CASE":1081,"%TRUE":1084,"%FALSE":1085,"%EscapeSequence":1090,"%LogicalAndExpression":1093,"%MemberExpression":1098,"%Arguments":1099,"%HexDigit":1104,"%MethodReturnType":1107,"%MethodLabel":1109,"%ConditionalExpressionNoIn":1116,"%NEW":1121,"%MethodType":1122,"%CharacterEscapeSequence":1125,"%HexEscapeSequence":1127,"%BitwiseOrExpression":1128,"%LogicalOrExpressionNoIn":1143,"%PrimaryExpression":1145,"%FunctionExpression":1146,"%NewExpressionWithArguments":1147,"%ArgumentList":1149,"%BracketedAccessor":1150,"%DotAccessor":1151,"%SingleEscapeCharacter":1154,"%NonEscapeCharacter":1155,"%DecimalDigit":1156,"%BitwiseXOrExpression":1157,"%MethodParameterType":1169,"%LogicalAndExpressionNoIn":1173,"%THIS":1175,"%Literal":1176,"%ArrayLiteral":1177,"%ObjectLiteral":1178,"%BitwiseAndExpression":1183,"%EscapeCharacter":1192,"%BitwiseOrExpressionNoIn":1195,"%NumericLiteral":1197,"%RegularExpressionLiteral":1198,"%ElementList":1199,"%EqualityExpression":1202,"%BitwiseXOrExpressionNoIn":1212,"%RegularExpressionBody":1216,"%RegularExpressionFlags":1217,"%PropertyNameAndValueList":1221,"%RelationalExpression":1222,"%DecimalLiteral":1226,"%HexIntegerLiteral":1227,"%BitwiseAndExpressionNoIn":1234,"%RegularExpressionFirstChar":1238,"%PropertyAssignment":1241,"%ShiftExpression":1243,"%EqualityOperator":1245,"%RegularExpressionChar":1252,"%EqualityExpressionNoIn":1258,"%DecimalIntegerLiteral":1262,"%ExponentPart":1263,"%RegularExpressionBackslashSequence":1265,"%RegularExpressionClass":1266,"%PropertyGetter":1269,"%PropertySetter":1270,"%AdditiveExpression":1271,"%RelationalOperator":1273,"%RegularExpressionNonTerminator":1280,"%PropertyName":1284,"%RelationalExpressionNoIn":1290,"%SignedInteger":1293,"%PropertySetParameterList":1296,"%MultiplicativeExpression":1297,"%ShiftOperator":1299,"%INSTANCEOF":1300,"%RegularExpressionClassChar":1304,"%UnaryExpression":1310,"%AdditiveOperator":1312,"%RelationalOperatorNoIn":1317,"%PostfixExpression":1318,"%MultiplicativeOperator":1328,"%DELETE":1331,"%VOID":1332,"%TYPEOF":1333}};


function Parser(/*String | CompiledGrammar*/ aGrammar)
{
    if (typeof aGrammar.valueOf() === "string")
        this.compiledGrammar = new (require("./compiledgrammar"))(aGrammar);
    else
        this.compiledGrammar = aGrammar;

    return this;
}

module.exports = Parser;

Parser.prototype.parse = function(input)
{
    return parse(this.compiledGrammar, input);
}

var NAME                = 0,
    DOT                 = 1,
    CHARACTER_CLASS     = 2,
    ORDERED_CHOICE      = 3,
    SEQUENCE            = 4,
    STRING_LITERAL      = 5,
    ZERO_OR_MORE        = 6,
    ONE_OR_MORE         = 7,
    OPTIONAL            = 8,
    NEGATIVE_LOOK_AHEAD = 9,
    POSITIVE_LOOK_AHEAD = 10,
    ERROR_NAME          = 11,
    ERROR_CHOICE        = 12;

function parse(aCompiledGrammar, input, name)
{
    var node = new SyntaxNode("#document", input, 0, 0),
        table = aCompiledGrammar.table,
        nameToUID = aCompiledGrammar.nameToUID;

    name = name || "start";

    // This is a stupid check.
    if (aCompiledGrammar.nameToUID["EOF"] !== undefined)
        table[0] = [SEQUENCE, nameToUID[name], nameToUID["EOF"]];

    if (!evaluate(new context(input, table), node, table, 0))
    {
        // This is a stupid check.
        if (aCompiledGrammar.nameToUID["EOF"] !== undefined)
            table[0] = [SEQUENCE, nameToUID["%" + name], nameToUID["EOF"]];

        evaluate(new context(input, table), node, table, 0);
    }

    node.traverse({
        traverseTextNodes:false,
        enteredNode:function(node)
        {
            if (!node.error)
                return;

            var info = {start:0};
            console.log(findLine(node.source, node.range.location, info));

            var padding = info.start,
                string = "";

            while (padding++ < node.range.location)
                string += " ";

            var count = node.innerText().length;

            while (count--)
                string += "^";

            console.log(string);
            console.log("ERROR line " + findLineNumber(node.source, node.range.location) + ": " + node.error);
        }
    });

    return node;
}



function findLine(input, index, info)
{
    var start = index;

    while (start > 0 && input.charAt(start) !== "\n")
        --start;

    if (start !== 0)
        start += 1;

    info.start = start;

    var end = index;

    while (end < input.length && input.charAt(end) !== "\n")
        ++end;

    return input.substring(start, end);
}

function findLineNumber(input, index)
{
    var line = 0;

    while (index--)
        if (input.charAt(index) === "\n")
            ++line;

    return line;
}

exports.parse = parse;

function context(input, table)
{
    this.position = 0;
    this.input = input;
    this.memos = [];
    for (var i=0;i<table.length;++i)
        this.memos[i] = [];
}

function evaluate(context, parent, rules, rule_id)
{
    var rule = rules[rule_id],
        type = rule[0],
        input_length = context.input.length,
        memos = context.memos[rule_id];

    var uid = context.position,
        entry = memos[uid];

    if (entry === false)
        return false;
    else if (entry === true)
        return true;
    else if (entry)
    {
        if (parent)
            parent.children.push(entry.node);
        context.position = entry.position;
        return true;
    }

    switch (type)
    {
        case NAME:
        case ERROR_NAME:
            var node = new SyntaxNode(rule[1], context.input, context.position, 0, rule[3]);
            if (!evaluate(context, node, rules, rule[2]))
            {
                memos[uid] = false;
                return false;
            }
            node.range.length = context.position - node.range.location;
            memos[uid] = { node:node, position:context.position };

            if (parent)
                parent.children.push(node);
            return true;

        case CHARACTER_CLASS:
            var character = context.input.charAt(context.position);

            if (typeof rule[1] !== "function")
                rule[1] = new RegExp(rule[1], "g");

            if (character.match(rule[1]))
            {
                if (parent)
                    parent.children.push(character);
                ++context.position;
                return true;
            }
            memos[uid] = false;
            return false;

        case SEQUENCE:
            var index = 1,
                count = rule.length;

            for (; index < count; ++index)
                if (!evaluate(context, parent, rules, rule[index]))
                {
                    memos[uid] = false;
                    return false;
                }

            return true;

        case ORDERED_CHOICE:
        case ERROR_CHOICE:
            var index = 1,
                count = rule.length,
                position = context.position;

            for (; index < count; ++index)
            {
                // cache opportunity here.
                var child_count = parent && parent.children.length;

                if (evaluate(context, parent, rules, rule[index]))
                    return true;

                if (parent)
                    parent.children.length = child_count;
                context.position = position;
            }
            memos[uid] = false;
            return false;

        case STRING_LITERAL:
            var string = rule[1],
                string_length = string.length;

            if (string_length + context.position > input_length)
            {
                memos[uid] = false;
                return false;
            }

            var index = 0;

            for (; index < string_length; ++context.position, ++index)
                if (context.input.charAt(context.position) !== string.charAt(index))
                {
                    context.position -= index;
                    memos[uid] = false;
                    return false;
                }

//            memos[uid] = string;
            if (parent)
                parent.children.push(string);

            return true;
        case DOT:
            if (context.position < input_length)
            {
                if (parent)
                    parent.children.push(context.input.charAt(context.position));
                ++context.position;
                return true;
            }
            memos[uid] = false;
            return false;
        case POSITIVE_LOOK_AHEAD:
        case NEGATIVE_LOOK_AHEAD:
            var position = context.position,
                result = evaluate(context, null, rules, rule[1]) === (type === POSITIVE_LOOK_AHEAD);
            context.position = position;
            memos[uid] = result;

            return result;

        case ZERO_OR_MORE:
            var child,
                position = context.position,
                childCount = parent && parent.children.length;

            while (evaluate(context, parent, rules, rule[1]))
            {
                position = context.position,
                childCount = parent && parent.children.length;
            }

            context.position = position;
            if (parent)
                parent.children.length = childCount;

            return true;

        case ONE_OR_MORE:
            var position = context.position,
                childCount = parent && parent.children.length;
            if (!evaluate(context, parent, rules, rule[1]))
            {
                memos[uid] = false;
                context.position = position;
                if (parent)
                    parent.children.length = childCount;
                return false;
            }
            position = context.position,
            childCount = parent && parent.children.length;
            while (evaluate(context, parent, rules, rule[1]))
            {
                position = context.position;
                childCount = parent && parent.children.length;
            }
            context.position = position;
            if (parent)
                parent.children.length = childCount;
            return true;

        case OPTIONAL:
            var position = context.position,
                childCount = parent && parent.children.length;

            if (!evaluate(context, parent, rules, rule[1]))
            {
                context.position = position;

                if (parent)
                    parent.children.length = childCount;
            }

            return true;
    }
}

function SyntaxNode(/*String*/ aName, /*String*/ aSource, /*Number*/ aLocation, /*Number*/ aLength, /*String*/anErrorMessage)
{
    this.name = aName;
    this.source = aSource;
    this.range = { location:aLocation, length:aLength };
    this.children = [];

    if (anErrorMessage)
        this.error = anErrorMessage;
}

SyntaxNode.prototype.toString = function(/*String*/ spaces)
{
    if (!spaces)
        spaces = "";

    var string = spaces + this.name +  " <" + this.innerText() + "> ",
        children = this.children,
        index = 0,
        count = children.length;

    for (; index < count; ++index)
    {
        var child = children[index];

        if (typeof child === "string")
            string += "\n" + spaces + "\t" + child;

        else
            string += "\n" + children[index].toString(spaces + '\t');
    }

    return string;
}

SyntaxNode.prototype.innerText = function()
{
    var range = this.range;

    return this.source.substr(range.location, range.length);
}

SyntaxNode.prototype.traverse = function(walker)
{
    if (walker.enteredNode)
        walker.enteredNode(this);

    var children = this.children,
        index = 0,
        count = children && children.length;

    for (; index < count; ++index)
    {
        var child = children[index];

        if (typeof child !== "string")
            child.traverse(walker);

        else if (walker.traversesTextNodes)
        {
            walker.enteredNode(child);
            walker.enteredNode(child);
        }
    }

    if (walker.exitedNode)
        walker.exitedNode(this);
}


exports.Parser = new Parser(compiledGrammar);
})(window, Parser, { exports: Parser });
