
var Parser = { };

(function(global, exports, module)
{
var compiledGrammar = {"table":[[0,"source",1],[0,"start",2],[4,3,4,3],[0,"_",5],[8,6],[6,7],[0,"SourceElements",8],[3,9,10,11],[4,12,13],[0,"WhiteSpace",14],[0,"LineTerminator",15],[0,"Comment",16],[0,"SourceElement",17],[6,18],[2,"[\\u0009\\u000B\\u000C\\u0020\\u00A0\\uFEFF\\u1680\\u180E\\u2000-\\u200A\\u202F\\u205F\\u3000]"],[2,"[\\u000A\\u000D\\u2028\\u2029]"],[3,19,20],[3,21,22,23,24],[4,3,12],[0,"MultiLineComment",25],[0,"SingleLineComment",26],[0,"Statement",27],[0,"FunctionDeclaration",28],[0,"ClassDeclaration",29],[0,"ImportStatement",30],[4,31,32,33],[4,34,35],[3,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51],[4,52,3,53,3,54,3,55,3,56,3,57,3,58,3,59],[4,60,3,53,3,61,3,57,3,62,3,59,3,63,3,64],[4,65,3,66],[5,"/*"],[6,67],[5,"*/"],[5,"//"],[6,68],[0,"Block",69],[0,"VariableStatement",70],[0,"EmptyStatement",71],[0,"ExpressionStatement",72],[0,"IfStatement",73],[0,"IterationStatement",74],[0,"ContinueStatement",75],[0,"BreakStatement",76],[0,"ReturnStatement",77],[0,"WithStatement",78],[0,"LabelledStatement",79],[0,"SwitchStatement",80],[0,"ThrowStatement",81],[0,"TryStatement",82],[0,"DebuggerStatement",83],[0,"MessageStatement",84],[0,"FUNCTION",85],[0,"Identifier",86],[5,"("],[8,87],[5,")"],[5,"{"],[0,"FunctionBody",2],[5,"}"],[5,"@implementation"],[8,88],[6,89],[0,"ClassBody",90],[5,"@end"],[5,"@import"],[3,91,92],[4,93,94],[0,"SingleLineCommentChar",95],[4,57,3,96,3,59],[4,97,3,98,99,100],[5,";"],[4,101,102,100],[4,103,3,54,3,102,3,56,3,21,104],[3,105,106,107,108,109],[4,110,111,112],[4,113,111,112],[4,114,111,115],[4,116,3,54,3,102,3,56,3,21],[4,53,3,117,3,21],[4,118,3,54,3,102,3,56,3,119],[4,120,111,115],[4,121,3,36,3,122],[4,123,3,100],[4,124,3,125,3,53,126,3,127],[4,128,129],[4,130,131],[0,"FormalParameterList",132],[0,"SuperclassDeclaration",133],[0,"CompoundIvarDeclaration",134],[8,135],[0,"LocalFilePath",136],[0,"StandardFilePath",137],[9,33],[1],[4,138,94],[8,139],[0,"VAR",140],[0,"VariableDeclaration",141],[6,142],[0,"EOS",143],[9,144],[0,"Expression",145],[0,"IF",146],[8,147],[0,"DoWhileStatement",148],[0,"WhileStatement",149],[0,"ForStatement",150],[0,"ForInStatement",151],[0,"EachStatement",152],[0,"CONTINUE",153],[0,"__",154],[3,155,156],[0,"BREAK",157],[0,"RETURN",158],[3,156,159],[0,"WITH",160],[5,":"],[0,"SWITCH",161],[0,"CaseBlock",162],[0,"THROW",163],[0,"TRY",164],[3,165,166],[0,"DEBUGGER",167],[5,"["],[3,168,102],[8,169],[5,"]"],[5,"function"],[9,170],[9,171],[0,"IdentifierName",172],[4,53,173],[4,117,3,53],[4,174,3,175,176,3,100],[0,"ClassElements",177],[0,"StringLiteral",178],[4,179,3,180,3,181],[9,10],[0,"StatementList",182],[4,183,129],[4,53,184],[4,3,185,3,98],[3,186,187,188,189],[3,57,52],[4,190,191],[4,192,129],[4,3,193,3,21],[4,194,3,21,3,195,3,54,3,102,3,56,3,100],[4,195,3,54,3,102,3,56,3,21],[4,196,3,54,3,197,3,71,3,198,3,71,3,198,3,56,3,21],[4,196,3,54,3,199,3,200,3,102,3,56,3,21],[4,201,3,54,3,199,3,200,3,102,3,56,3,21],[4,202,129],[6,203],[4,53,100],[0,"SemicolonInsertionEOS",204],[4,205,129],[4,206,129],[4,102,100],[4,207,129],[4,208,129],[4,57,3,209,3,210,3,209,3,59],[4,211,129],[4,212,129],[4,213,214],[0,"Finally",215],[4,216,129],[0,"SuperExpression",217],[4,117,102,218],[0,"IdentifierPart",219],[4,220,129],[4,221,222],[6,223],[0,"IvarType",224],[0,"IvarDeclaration",225],[6,226],[4,3,227,228,3],[3,229,230],[5,"<"],[6,231],[5,">"],[4,21,232],[5,"var"],[8,233],[5,","],[4,3,71],[4,111,234],[4,111,235],[4,111,236],[0,"AssignmentExpression",237],[6,238],[5,"if"],[0,"ELSE",239],[0,"DO",240],[0,"WHILE",241],[0,"FOR",242],[8,243],[8,102],[0,"ForInFirstExpression",244],[0,"IN",245],[5,"@each"],[5,"continue"],[3,9,246,20],[3,247,187,188,189],[5,"break"],[5,"return"],[5,"with"],[5,"switch"],[8,248],[8,249],[5,"throw"],[5,"try"],[0,"Catch",250],[8,251],[4,252,3,36],[5,"debugger"],[5,"super"],[6,253],[3,221,254,255,256,257,258],[0,"ReservedWord",259],[0,"IdentifierStart",260],[6,170],[4,3,185,3,53],[4,261,262],[4,53,3,263],[4,3,185,3,175],[0,"ClassElement",264],[6,265],[4,266,267,266],[4,268,269,268],[3,270,271],[6,272],[4,3,273,274,3,190],[0,"LineTerminatorSequence",275],[10,59],[0,"EOF",276],[3,277,278],[4,3,185,3,190],[4,279,129],[4,280,129],[4,281,129],[4,282,129],[0,"ForFirstExpression",283],[3,284,285],[4,286,129],[0,"SingleLineMultiLineComment",287],[4,111,71],[0,"CaseClauses",288],[0,"DefaultClause",289],[4,290,3,54,3,53,3,56,3,36],[4,3,166],[0,"FINALLY",291],[4,3,53,117,3,102],[0,"UnicodeCombiningMark",292],[0,"UnicodeDigit",293],[0,"UnicodeConnectorPunctuation",294],[0,"ZWNJ",295],[0,"ZWJ",296],[3,297,298,299,300],[3,301,302,303],[0,"IvarTypeElement",304],[6,305],[8,306],[3,307,21,22],[4,3,227],[5,"\""],[6,308],[5,"'"],[6,309],[5,"\\>"],[4,310,94],[4,3,21],[5,"="],[9,273],[3,311,312,313,314,315],[9,94],[4,284,3,316,3,190],[0,"ConditionalExpression",317],[5,"else"],[5,"do"],[5,"while"],[5,"for"],[3,318,319],[0,"LeftHandSideExpression",320],[4,97,3,321],[5,"in"],[4,31,322,33],[4,323,324],[4,325,3,117,326],[0,"CATCH",327],[4,328,129],[3,329,330,331,332,333,334],[3,335,336,337,338],[2,"[\\u005F\\u203F\\u2040\\u2054\\uFE33\\uFE34\\uFE4D-\\uFE4F\\uFF3F]"],[5,"\u200C"],[5,"\u200D"],[0,"Keyword",339],[0,"FutureReservedWord",340],[0,"NullLiteral",341],[0,"BooleanLiteral",342],[0,"UnicodeLetter",343],[2,"[$_]"],[4,344,345],[4,346,347],[4,3,261],[0,"Accessors",348],[0,"MethodDeclaration",349],[0,"DoubleStringCharacter",350],[0,"SingleStringCharacter",351],[9,181],[5,"\n"],[4,315,352],[5,"\u2028"],[5,"\u2029"],[5,"\r"],[0,"AssignmentOperator",353],[4,354,355],[0,"ExpressionNoIn",356],[4,97,3,357],[3,358,359],[0,"VariableDeclarationNoIn",360],[6,361],[0,"CaseClause",362],[6,363],[0,"DEFAULT",364],[8,365],[4,366,129],[5,"finally"],[2,"[\\u0300-\\u036F\\u0483-\\u0487\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u0610-\\u061A\\u064B-\\u065F\\u0670\\u06D6-\\u06DC\\u06DF-\\u06E4\\u06E7\\u06E8\\u06EA-\\u06ED\\u0711\\u0730-\\u074A\\u07A6-\\u07B0\\u07EB-\\u07F3\\u0816-\\u0819\\u081B-\\u0823\\u0825-\\u0827\\u0829-\\u082D\\u0859-\\u085B\\u0900-\\u0902\\u093A\\u093C\\u0941-\\u0948\\u094D\\u0951-\\u0957\\u0962\\u0963\\u0981\\u09BC\\u09C1-\\u09C4\\u09CD\\u09E2\\u09E3\\u0A01\\u0A02\\u0A3C\\u0A41\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A70\\u0A71\\u0A75\\u0A81\\u0A82\\u0ABC\\u0AC1-\\u0AC5\\u0AC7\\u0AC8\\u0ACD\\u0AE2\\u0AE3\\u0B01\\u0B3C\\u0B3F\\u0B41-\\u0B44\\u0B4D\\u0B56\\u0B62\\u0B63\\u0B82\\u0BC0\\u0BCD\\u0C3E-\\u0C40\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C62\\u0C63\\u0CBC\\u0CBF\\u0CC6\\u0CCC\\u0CCD\\u0CE2\\u0CE3\\u0D41-\\u0D44\\u0D4D\\u0D62\\u0D63\\u0DCA\\u0DD2-\\u0DD4\\u0DD6\\u0E31\\u0E34-\\u0E3A\\u0E47-\\u0E4E\\u0EB1\\u0EB4-\\u0EB9\\u0EBB\\u0EBC\\u0EC8-\\u0ECD\\u0F18\\u0F19\\u0F35\\u0F37\\u0F39\\u0F71-\\u0F7E\\u0F80-\\u0F84\\u0F86\\u0F87\\u0F8D-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u102D-\\u1030\\u1032-\\u1037\\u1039\\u103A\\u103D\\u103E\\u1058\\u1059\\u105E-\\u1060\\u1071-\\u1074\\u1082\\u1085\\u1086\\u108D\\u109D\\u135D-\\u135F\\u1712-\\u1714\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17B7-\\u17BD\\u17C6\\u17C9-\\u17D3\\u17DD\\u180B-\\u180D\\u18A9\\u1920-\\u1922\\u1927\\u1928\\u1932\\u1939-\\u193B\\u1A17\\u1A18\\u1A56\\u1A58-\\u1A5E\\u1A60\\u1A62\\u1A65-\\u1A6C\\u1A73-\\u1A7C\\u1A7F\\u1B00-\\u1B03\\u1B34\\u1B36-\\u1B3A\\u1B3C\\u1B42\\u1B6B-\\u1B73\\u1B80\\u1B81\\u1BA2-\\u1BA5\\u1BA8\\u1BA9\\u1BE6\\u1BE8\\u1BE9\\u1BED\\u1BEF-\\u1BF1\\u1C2C-\\u1C33\\u1C36\\u1C37\\u1CD0-\\u1CD2\\u1CD4-\\u1CE0\\u1CE2-\\u1CE8\\u1CED\\u1DC0-\\u1DE6\\u1DFC-\\u1DFF\\u20D0-\\u20DC\\u20E1\\u20E5-\\u20F0\\u2CEF-\\u2CF1\\u2D7F\\u2DE0-\\u2DFF\\u302A-\\u302F\\u3099\\u309A\\uA66F\\uA67C\\uA67D\\uA6F0\\uA6F1\\uA802\\uA806\\uA80B\\uA825\\uA826\\uA8C4\\uA8E0-\\uA8F1\\uA926-\\uA92D\\uA947-\\uA951\\uA980-\\uA982\\uA9B3\\uA9B6-\\uA9B9\\uA9BC\\uAA29-\\uAA2E\\uAA31\\uAA32\\uAA35\\uAA36\\uAA43\\uAA4C\\uAAB0\\uAAB2-\\uAAB4\\uAAB7\\uAAB8\\uAABE\\uAABF\\uAAC1\\uABE5\\uABE8\\uABED\\uFB1E\\uFE00-\\uFE0F\\uFE20-\\uFE26\\u0903\\u093B\\u093E-\\u0940\\u0949-\\u094C\\u094E\\u094F\\u0982\\u0983\\u09BE-\\u09C0\\u09C7\\u09C8\\u09CB\\u09CC\\u09D7\\u0A03\\u0A3E-\\u0A40\\u0A83\\u0ABE-\\u0AC0\\u0AC9\\u0ACB\\u0ACC\\u0B02\\u0B03\\u0B3E\\u0B40\\u0B47\\u0B48\\u0B4B\\u0B4C\\u0B57\\u0BBE\\u0BBF\\u0BC1\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCC\\u0BD7\\u0C01-\\u0C03\\u0C41-\\u0C44\\u0C82\\u0C83\\u0CBE\\u0CC0-\\u0CC4\\u0CC7\\u0CC8\\u0CCA\\u0CCB\\u0CD5\\u0CD6\\u0D02\\u0D03\\u0D3E-\\u0D40\\u0D46-\\u0D48\\u0D4A-\\u0D4C\\u0D57\\u0D82\\u0D83\\u0DCF-\\u0DD1\\u0DD8-\\u0DDF\\u0DF2\\u0DF3\\u0F3E\\u0F3F\\u0F7F\\u102B\\u102C\\u1031\\u1038\\u103B\\u103C\\u1056\\u1057\\u1062-\\u1064\\u1067-\\u106D\\u1083\\u1084\\u1087-\\u108C\\u108F\\u109A-\\u109C\\u17B6\\u17BE-\\u17C5\\u17C7\\u17C8\\u1923-\\u1926\\u1929-\\u192B\\u1930\\u1931\\u1933-\\u1938\\u19B0-\\u19C0\\u19C8\\u19C9\\u1A19-\\u1A1B\\u1A55\\u1A57\\u1A61\\u1A63\\u1A64\\u1A6D-\\u1A72\\u1B04\\u1B35\\u1B3B\\u1B3D-\\u1B41\\u1B43\\u1B44\\u1B82\\u1BA1\\u1BA6\\u1BA7\\u1BAA\\u1BE7\\u1BEA-\\u1BEC\\u1BEE\\u1BF2\\u1BF3\\u1C24-\\u1C2B\\u1C34\\u1C35\\u1CE1\\u1CF2\\uA823\\uA824\\uA827\\uA880\\uA881\\uA8B4-\\uA8C3\\uA952\\uA953\\uA983\\uA9B4\\uA9B5\\uA9BA\\uA9BB\\uA9BD-\\uA9C0\\uAA2F\\uAA30\\uAA33\\uAA34\\uAA4D\\uAA7B\\uABE3\\uABE4\\uABE6\\uABE7\\uABE9\\uABEA\\uABEC]"],[4,367,368],[4,369,370],[4,371,372],[4,373,374],[4,375,376],[2,"[\\u0030-\\u0039\\u0660-\\u0669\\u06F0-\\u06F9\\u07C0-\\u07C9\\u0966-\\u096F\\u09E6-\\u09EF\\u0A66-\\u0A6F\\u0AE6-\\u0AEF\\u0B66-\\u0B6F\\u0BE6-\\u0BEF\\u0C66-\\u0C6F\\u0CE6-\\u0CEF\\u0D66-\\u0D6F\\u0E50-\\u0E59\\u0ED0-\\u0ED9\\u0F20-\\u0F29\\u1040-\\u1049\\u1090-\\u1099\\u17E0-\\u17E9\\u1810-\\u1819\\u1946-\\u194F\\u19D0-\\u19D9\\u1A80-\\u1A89\\u1A90-\\u1A99\\u1B50-\\u1B59\\u1BB0-\\u1BB9\\u1C40-\\u1C49\\u1C50-\\u1C59\\uA620-\\uA629\\uA8D0-\\uA8D9\\uA900-\\uA909\\uA9D0-\\uA9D9\\uAA50-\\uAA59\\uABF0-\\uABF9\\uFF10-\\uFF19]"],[4,377,378],[4,371,379],[4,380,381],[3,205,382,366,202,216,383,384,280,279,328,282,128,192,385,286,386,206,208,387,211,212,388,183,389,281,207],[3,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,217,415,416,417,418],[0,"NULL",419],[3,420,421],[3,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439],[5,"\\"],[0,"UnicodeEscapeSequence",440],[9,441],[3,53,442],[4,443,444],[4,445,446,3,447,448,3,449,3,57,3,58,3,59],[3,450,451,452],[3,453,451,452],[8,311],[3,454,455,456,457,458,459,460,461,462,463,464,465],[0,"LogicalOrExpression",466],[8,467],[4,468,469],[0,"VariableDeclarationListNoIn",470],[0,"CallExpression",471],[0,"NewExpression",472],[4,53,473],[4,93,138,94],[4,474,3,102,3,117,326],[4,3,323],[4,383,129],[4,3,139],[5,"catch"],[5,"\uDB40"],[2,"[\\uDD00-\\uDDEF]"],[5,"\uD834"],[2,"[\\uDD67-\\uDD69\\uDD7B-\\uDD82\\uDD85-\\uDD8B\\uDDAA-\\uDDAD\\uDE42-\\uDE44\\uDD65\\uDD66\\uDD6D-\\uDD72]"],[5,"\uD804"],[2,"[\\uDC01\\uDC38-\\uDC46\\uDC80\\uDC81\\uDCB3-\\uDCB6\\uDCB9\\uDCBA\\uDC00\\uDC02\\uDC82\\uDCB0-\\uDCB2\\uDCB7\\uDCB8]"],[5,"\uD800"],[2,"[\\uDDFD]"],[5,"\uD802"],[2,"[\\uDE01-\\uDE03\\uDE05\\uDE06\\uDE0C-\\uDE0F\\uDE38-\\uDE3A\\uDE3F]"],[5,"\uD835"],[2,"[\\uDFCE-\\uDFFF]"],[2,"[\\uDC66-\\uDC6F]"],[5,"\uD801"],[2,"[\\uDCA0-\\uDCA9]"],[5,"case"],[5,"default"],[5,"delete"],[5,"instanceof"],[5,"new"],[5,"this"],[5,"typeof"],[5,"void"],[5,"abstract"],[5,"boolean"],[5,"byte"],[5,"char"],[5,"class"],[5,"const"],[5,"double"],[5,"enum"],[5,"export"],[5,"extends"],[5,"final"],[5,"float"],[5,"goto"],[5,"implements"],[5,"import"],[5,"interface"],[5,"int"],[5,"long"],[5,"native"],[5,"package"],[5,"private"],[5,"protected"],[5,"public"],[5,"short"],[5,"static"],[5,"synchronized"],[5,"throws"],[5,"transient"],[5,"volatile"],[4,475,129],[0,"TRUE",476],[0,"FALSE",477],[2,"[\\u0041-\\u005A\\u00C0-\\u00D6\\u00D8-\\u00DE\\u0100\\u0102\\u0104\\u0106\\u0108\\u010A\\u010C\\u010E\\u0110\\u0112\\u0114\\u0116\\u0118\\u011A\\u011C\\u011E\\u0120\\u0122\\u0124\\u0126\\u0128\\u012A\\u012C\\u012E\\u0130\\u0132\\u0134\\u0136\\u0139\\u013B\\u013D\\u013F\\u0141\\u0143\\u0145\\u0147\\u014A\\u014C\\u014E\\u0150\\u0152\\u0154\\u0156\\u0158\\u015A\\u015C\\u015E\\u0160\\u0162\\u0164\\u0166\\u0168\\u016A\\u016C\\u016E\\u0170\\u0172\\u0174\\u0176\\u0178\\u0179\\u017B\\u017D\\u0181\\u0182\\u0184\\u0186\\u0187\\u0189-\\u018B\\u018E-\\u0191\\u0193\\u0194\\u0196-\\u0198\\u019C\\u019D\\u019F\\u01A0\\u01A2\\u01A4\\u01A6\\u01A7\\u01A9\\u01AC\\u01AE\\u01AF\\u01B1-\\u01B3\\u01B5\\u01B7\\u01B8\\u01BC\\u01C4\\u01C7\\u01CA\\u01CD\\u01CF\\u01D1\\u01D3\\u01D5\\u01D7\\u01D9\\u01DB\\u01DE\\u01E0\\u01E2\\u01E4\\u01E6\\u01E8\\u01EA\\u01EC\\u01EE\\u01F1\\u01F4\\u01F6-\\u01F8\\u01FA\\u01FC\\u01FE\\u0200\\u0202\\u0204\\u0206\\u0208\\u020A\\u020C\\u020E\\u0210\\u0212\\u0214\\u0216\\u0218\\u021A\\u021C\\u021E\\u0220\\u0222\\u0224\\u0226\\u0228\\u022A\\u022C\\u022E\\u0230\\u0232\\u023A\\u023B\\u023D\\u023E\\u0241\\u0243-\\u0246\\u0248\\u024A\\u024C\\u024E\\u0370\\u0372\\u0376\\u0386\\u0388-\\u038A\\u038C\\u038E\\u038F\\u0391-\\u03A1\\u03A3-\\u03AB\\u03CF\\u03D2-\\u03D4\\u03D8\\u03DA\\u03DC\\u03DE\\u03E0\\u03E2\\u03E4\\u03E6\\u03E8\\u03EA\\u03EC\\u03EE\\u03F4\\u03F7\\u03F9\\u03FA\\u03FD-\\u042F\\u0460\\u0462\\u0464\\u0466\\u0468\\u046A\\u046C\\u046E\\u0470\\u0472\\u0474\\u0476\\u0478\\u047A\\u047C\\u047E\\u0480\\u048A\\u048C\\u048E\\u0490\\u0492\\u0494\\u0496\\u0498\\u049A\\u049C\\u049E\\u04A0\\u04A2\\u04A4\\u04A6\\u04A8\\u04AA\\u04AC\\u04AE\\u04B0\\u04B2\\u04B4\\u04B6\\u04B8\\u04BA\\u04BC\\u04BE\\u04C0\\u04C1\\u04C3\\u04C5\\u04C7\\u04C9\\u04CB\\u04CD\\u04D0\\u04D2\\u04D4\\u04D6\\u04D8\\u04DA\\u04DC\\u04DE\\u04E0\\u04E2\\u04E4\\u04E6\\u04E8\\u04EA\\u04EC\\u04EE\\u04F0\\u04F2\\u04F4\\u04F6\\u04F8\\u04FA\\u04FC\\u04FE\\u0500\\u0502\\u0504\\u0506\\u0508\\u050A\\u050C\\u050E\\u0510\\u0512\\u0514\\u0516\\u0518\\u051A\\u051C\\u051E\\u0520\\u0522\\u0524\\u0526\\u0531-\\u0556\\u10A0-\\u10C5\\u1E00\\u1E02\\u1E04\\u1E06\\u1E08\\u1E0A\\u1E0C\\u1E0E\\u1E10\\u1E12\\u1E14\\u1E16\\u1E18\\u1E1A\\u1E1C\\u1E1E\\u1E20\\u1E22\\u1E24\\u1E26\\u1E28\\u1E2A\\u1E2C\\u1E2E\\u1E30\\u1E32\\u1E34\\u1E36\\u1E38\\u1E3A\\u1E3C\\u1E3E\\u1E40\\u1E42\\u1E44\\u1E46\\u1E48\\u1E4A\\u1E4C\\u1E4E\\u1E50\\u1E52\\u1E54\\u1E56\\u1E58\\u1E5A\\u1E5C\\u1E5E\\u1E60\\u1E62\\u1E64\\u1E66\\u1E68\\u1E6A\\u1E6C\\u1E6E\\u1E70\\u1E72\\u1E74\\u1E76\\u1E78\\u1E7A\\u1E7C\\u1E7E\\u1E80\\u1E82\\u1E84\\u1E86\\u1E88\\u1E8A\\u1E8C\\u1E8E\\u1E90\\u1E92\\u1E94\\u1E9E\\u1EA0\\u1EA2\\u1EA4\\u1EA6\\u1EA8\\u1EAA\\u1EAC\\u1EAE\\u1EB0\\u1EB2\\u1EB4\\u1EB6\\u1EB8\\u1EBA\\u1EBC\\u1EBE\\u1EC0\\u1EC2\\u1EC4\\u1EC6\\u1EC8\\u1ECA\\u1ECC\\u1ECE\\u1ED0\\u1ED2\\u1ED4\\u1ED6\\u1ED8\\u1EDA\\u1EDC\\u1EDE\\u1EE0\\u1EE2\\u1EE4\\u1EE6\\u1EE8\\u1EEA\\u1EEC\\u1EEE\\u1EF0\\u1EF2\\u1EF4\\u1EF6\\u1EF8\\u1EFA\\u1EFC\\u1EFE\\u1F08-\\u1F0F\\u1F18-\\u1F1D\\u1F28-\\u1F2F\\u1F38-\\u1F3F\\u1F48-\\u1F4D\\u1F59\\u1F5B\\u1F5D\\u1F5F\\u1F68-\\u1F6F\\u1FB8-\\u1FBB\\u1FC8-\\u1FCB\\u1FD8-\\u1FDB\\u1FE8-\\u1FEC\\u1FF8-\\u1FFB\\u2102\\u2107\\u210B-\\u210D\\u2110-\\u2112\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u2130-\\u2133\\u213E\\u213F\\u2145\\u2183\\u2C00-\\u2C2E\\u2C60\\u2C62-\\u2C64\\u2C67\\u2C69\\u2C6B\\u2C6D-\\u2C70\\u2C72\\u2C75\\u2C7E-\\u2C80\\u2C82\\u2C84\\u2C86\\u2C88\\u2C8A\\u2C8C\\u2C8E\\u2C90\\u2C92\\u2C94\\u2C96\\u2C98\\u2C9A\\u2C9C\\u2C9E\\u2CA0\\u2CA2\\u2CA4\\u2CA6\\u2CA8\\u2CAA\\u2CAC\\u2CAE\\u2CB0\\u2CB2\\u2CB4\\u2CB6\\u2CB8\\u2CBA\\u2CBC\\u2CBE\\u2CC0\\u2CC2\\u2CC4\\u2CC6\\u2CC8\\u2CCA\\u2CCC\\u2CCE\\u2CD0\\u2CD2\\u2CD4\\u2CD6\\u2CD8\\u2CDA\\u2CDC\\u2CDE\\u2CE0\\u2CE2\\u2CEB\\u2CED\\uA640\\uA642\\uA644\\uA646\\uA648\\uA64A\\uA64C\\uA64E\\uA650\\uA652\\uA654\\uA656\\uA658\\uA65A\\uA65C\\uA65E\\uA660\\uA662\\uA664\\uA666\\uA668\\uA66A\\uA66C\\uA680\\uA682\\uA684\\uA686\\uA688\\uA68A\\uA68C\\uA68E\\uA690\\uA692\\uA694\\uA696\\uA722\\uA724\\uA726\\uA728\\uA72A\\uA72C\\uA72E\\uA732\\uA734\\uA736\\uA738\\uA73A\\uA73C\\uA73E\\uA740\\uA742\\uA744\\uA746\\uA748\\uA74A\\uA74C\\uA74E\\uA750\\uA752\\uA754\\uA756\\uA758\\uA75A\\uA75C\\uA75E\\uA760\\uA762\\uA764\\uA766\\uA768\\uA76A\\uA76C\\uA76E\\uA779\\uA77B\\uA77D\\uA77E\\uA780\\uA782\\uA784\\uA786\\uA78B\\uA78D\\uA790\\uA7A0\\uA7A2\\uA7A4\\uA7A6\\uA7A8\\uFF21-\\uFF3A\\u0061-\\u007A\\u00AA\\u00B5\\u00BA\\u00DF-\\u00F6\\u00F8-\\u00FF\\u0101\\u0103\\u0105\\u0107\\u0109\\u010B\\u010D\\u010F\\u0111\\u0113\\u0115\\u0117\\u0119\\u011B\\u011D\\u011F\\u0121\\u0123\\u0125\\u0127\\u0129\\u012B\\u012D\\u012F\\u0131\\u0133\\u0135\\u0137\\u0138\\u013A\\u013C\\u013E\\u0140\\u0142\\u0144\\u0146\\u0148\\u0149\\u014B\\u014D\\u014F\\u0151\\u0153\\u0155\\u0157\\u0159\\u015B\\u015D\\u015F\\u0161\\u0163\\u0165\\u0167\\u0169\\u016B\\u016D\\u016F\\u0171\\u0173\\u0175\\u0177\\u017A\\u017C\\u017E-\\u0180\\u0183\\u0185\\u0188\\u018C\\u018D\\u0192\\u0195\\u0199-\\u019B\\u019E\\u01A1\\u01A3\\u01A5\\u01A8\\u01AA\\u01AB\\u01AD\\u01B0\\u01B4\\u01B6\\u01B9\\u01BA\\u01BD-\\u01BF\\u01C6\\u01C9\\u01CC\\u01CE\\u01D0\\u01D2\\u01D4\\u01D6\\u01D8\\u01DA\\u01DC\\u01DD\\u01DF\\u01E1\\u01E3\\u01E5\\u01E7\\u01E9\\u01EB\\u01ED\\u01EF\\u01F0\\u01F3\\u01F5\\u01F9\\u01FB\\u01FD\\u01FF\\u0201\\u0203\\u0205\\u0207\\u0209\\u020B\\u020D\\u020F\\u0211\\u0213\\u0215\\u0217\\u0219\\u021B\\u021D\\u021F\\u0221\\u0223\\u0225\\u0227\\u0229\\u022B\\u022D\\u022F\\u0231\\u0233-\\u0239\\u023C\\u023F\\u0240\\u0242\\u0247\\u0249\\u024B\\u024D\\u024F-\\u0293\\u0295-\\u02AF\\u0371\\u0373\\u0377\\u037B-\\u037D\\u0390\\u03AC-\\u03CE\\u03D0\\u03D1\\u03D5-\\u03D7\\u03D9\\u03DB\\u03DD\\u03DF\\u03E1\\u03E3\\u03E5\\u03E7\\u03E9\\u03EB\\u03ED\\u03EF-\\u03F3\\u03F5\\u03F8\\u03FB\\u03FC\\u0430-\\u045F\\u0461\\u0463\\u0465\\u0467\\u0469\\u046B\\u046D\\u046F\\u0471\\u0473\\u0475\\u0477\\u0479\\u047B\\u047D\\u047F\\u0481\\u048B\\u048D\\u048F\\u0491\\u0493\\u0495\\u0497\\u0499\\u049B\\u049D\\u049F\\u04A1\\u04A3\\u04A5\\u04A7\\u04A9\\u04AB\\u04AD\\u04AF\\u04B1\\u04B3\\u04B5\\u04B7\\u04B9\\u04BB\\u04BD\\u04BF\\u04C2\\u04C4\\u04C6\\u04C8\\u04CA\\u04CC\\u04CE\\u04CF\\u04D1\\u04D3\\u04D5\\u04D7\\u04D9\\u04DB\\u04DD\\u04DF\\u04E1\\u04E3\\u04E5\\u04E7\\u04E9\\u04EB\\u04ED\\u04EF\\u04F1\\u04F3\\u04F5\\u04F7\\u04F9\\u04FB\\u04FD\\u04FF\\u0501\\u0503\\u0505\\u0507\\u0509\\u050B\\u050D\\u050F\\u0511\\u0513\\u0515\\u0517\\u0519\\u051B\\u051D\\u051F\\u0521\\u0523\\u0525\\u0527\\u0561-\\u0587\\u1D00-\\u1D2B\\u1D62-\\u1D77\\u1D79-\\u1D9A\\u1E01\\u1E03\\u1E05\\u1E07\\u1E09\\u1E0B\\u1E0D\\u1E0F\\u1E11\\u1E13\\u1E15\\u1E17\\u1E19\\u1E1B\\u1E1D\\u1E1F\\u1E21\\u1E23\\u1E25\\u1E27\\u1E29\\u1E2B\\u1E2D\\u1E2F\\u1E31\\u1E33\\u1E35\\u1E37\\u1E39\\u1E3B\\u1E3D\\u1E3F\\u1E41\\u1E43\\u1E45\\u1E47\\u1E49\\u1E4B\\u1E4D\\u1E4F\\u1E51\\u1E53\\u1E55\\u1E57\\u1E59\\u1E5B\\u1E5D\\u1E5F\\u1E61\\u1E63\\u1E65\\u1E67\\u1E69\\u1E6B\\u1E6D\\u1E6F\\u1E71\\u1E73\\u1E75\\u1E77\\u1E79\\u1E7B\\u1E7D\\u1E7F\\u1E81\\u1E83\\u1E85\\u1E87\\u1E89\\u1E8B\\u1E8D\\u1E8F\\u1E91\\u1E93\\u1E95-\\u1E9D\\u1E9F\\u1EA1\\u1EA3\\u1EA5\\u1EA7\\u1EA9\\u1EAB\\u1EAD\\u1EAF\\u1EB1\\u1EB3\\u1EB5\\u1EB7\\u1EB9\\u1EBB\\u1EBD\\u1EBF\\u1EC1\\u1EC3\\u1EC5\\u1EC7\\u1EC9\\u1ECB\\u1ECD\\u1ECF\\u1ED1\\u1ED3\\u1ED5\\u1ED7\\u1ED9\\u1EDB\\u1EDD\\u1EDF\\u1EE1\\u1EE3\\u1EE5\\u1EE7\\u1EE9\\u1EEB\\u1EED\\u1EEF\\u1EF1\\u1EF3\\u1EF5\\u1EF7\\u1EF9\\u1EFB\\u1EFD\\u1EFF-\\u1F07\\u1F10-\\u1F15\\u1F20-\\u1F27\\u1F30-\\u1F37\\u1F40-\\u1F45\\u1F50-\\u1F57\\u1F60-\\u1F67\\u1F70-\\u1F7D\\u1F80-\\u1F87\\u1F90-\\u1F97\\u1FA0-\\u1FA7\\u1FB0-\\u1FB4\\u1FB6\\u1FB7\\u1FBE\\u1FC2-\\u1FC4\\u1FC6\\u1FC7\\u1FD0-\\u1FD3\\u1FD6\\u1FD7\\u1FE0-\\u1FE7\\u1FF2-\\u1FF4\\u1FF6\\u1FF7\\u210A\\u210E\\u210F\\u2113\\u212F\\u2134\\u2139\\u213C\\u213D\\u2146-\\u2149\\u214E\\u2184\\u2C30-\\u2C5E\\u2C61\\u2C65\\u2C66\\u2C68\\u2C6A\\u2C6C\\u2C71\\u2C73\\u2C74\\u2C76-\\u2C7C\\u2C81\\u2C83\\u2C85\\u2C87\\u2C89\\u2C8B\\u2C8D\\u2C8F\\u2C91\\u2C93\\u2C95\\u2C97\\u2C99\\u2C9B\\u2C9D\\u2C9F\\u2CA1\\u2CA3\\u2CA5\\u2CA7\\u2CA9\\u2CAB\\u2CAD\\u2CAF\\u2CB1\\u2CB3\\u2CB5\\u2CB7\\u2CB9\\u2CBB\\u2CBD\\u2CBF\\u2CC1\\u2CC3\\u2CC5\\u2CC7\\u2CC9\\u2CCB\\u2CCD\\u2CCF\\u2CD1\\u2CD3\\u2CD5\\u2CD7\\u2CD9\\u2CDB\\u2CDD\\u2CDF\\u2CE1\\u2CE3\\u2CE4\\u2CEC\\u2CEE\\u2D00-\\u2D25\\uA641\\uA643\\uA645\\uA647\\uA649\\uA64B\\uA64D\\uA64F\\uA651\\uA653\\uA655\\uA657\\uA659\\uA65B\\uA65D\\uA65F\\uA661\\uA663\\uA665\\uA667\\uA669\\uA66B\\uA66D\\uA681\\uA683\\uA685\\uA687\\uA689\\uA68B\\uA68D\\uA68F\\uA691\\uA693\\uA695\\uA697\\uA723\\uA725\\uA727\\uA729\\uA72B\\uA72D\\uA72F-\\uA731\\uA733\\uA735\\uA737\\uA739\\uA73B\\uA73D\\uA73F\\uA741\\uA743\\uA745\\uA747\\uA749\\uA74B\\uA74D\\uA74F\\uA751\\uA753\\uA755\\uA757\\uA759\\uA75B\\uA75D\\uA75F\\uA761\\uA763\\uA765\\uA767\\uA769\\uA76B\\uA76D\\uA76F\\uA771-\\uA778\\uA77A\\uA77C\\uA77F\\uA781\\uA783\\uA785\\uA787\\uA78C\\uA78E\\uA791\\uA7A1\\uA7A3\\uA7A5\\uA7A7\\uA7A9\\uA7FA\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFF41-\\uFF5A\\u01C5\\u01C8\\u01CB\\u01F2\\u1F88-\\u1F8F\\u1F98-\\u1F9F\\u1FA8-\\u1FAF\\u1FBC\\u1FCC\\u1FFC\\u02B0-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0374\\u037A\\u0559\\u0640\\u06E5\\u06E6\\u07F4\\u07F5\\u07FA\\u081A\\u0824\\u0828\\u0971\\u0E46\\u0EC6\\u10FC\\u17D7\\u1843\\u1AA7\\u1C78-\\u1C7D\\u1D2C-\\u1D61\\u1D78\\u1D9B-\\u1DBF\\u2071\\u207F\\u2090-\\u209C\\u2C7D\\u2D6F\\u2E2F\\u3005\\u3031-\\u3035\\u303B\\u309D\\u309E\\u30FC-\\u30FE\\uA015\\uA4F8-\\uA4FD\\uA60C\\uA67F\\uA717-\\uA71F\\uA770\\uA788\\uA9CF\\uAA70\\uAADD\\uFF70\\uFF9E\\uFF9F\\u01BB\\u01C0-\\u01C3\\u0294\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u063F\\u0641-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u0800-\\u0815\\u0840-\\u0858\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0972-\\u0977\\u0979-\\u097F\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C33\\u0C35-\\u0C39\\u0C3D\\u0C58\\u0C59\\u0C60\\u0C61\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D60\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E45\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EDC\\u0EDD\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10D0-\\u10FA\\u1100-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F4\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17DC\\u1820-\\u1842\\u1844-\\u1877\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191C\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19C1-\\u19C7\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BC0-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C77\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u2135-\\u2138\\u2D30-\\u2D65\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u3006\\u303C\\u3041-\\u3096\\u309F\\u30A1-\\u30FA\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400\\u4DB5\\u4E00\\u9FCB\\uA000-\\uA014\\uA016-\\uA48C\\uA4D0-\\uA4F7\\uA500-\\uA60B\\uA610-\\uA61F\\uA62A\\uA62B\\uA66E\\uA6A0-\\uA6E5\\uA7FB-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA6F\\uAA71-\\uAA76\\uAA7A\\uAA80-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB\\uAADC\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uABC0-\\uABE2\\uAC00\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA2D\\uFA30-\\uFA6D\\uFA70-\\uFAD9\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF66-\\uFF6F\\uFF71-\\uFF9D\\uFFA0-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC\\u16EE-\\u16F0\\u2160-\\u2182\\u2185-\\u2188\\u3007\\u3021-\\u3029\\u3038-\\u303A\\uA6E6-\\uA6EF]"],[4,478,479],[4,480,481],[4,482,483],[4,484,485],[4,377,486],[4,371,487],[4,373,488],[4,489,490],[4,380,491],[4,492,493],[4,494,495],[4,496,497],[4,498,499],[4,500,501],[4,502,503],[4,375,504],[4,505,506],[4,507,508,508,508,508],[4,347,3,509],[5,"@outlet"],[5,"@accessors"],[8,510],[2,"[-+]"],[8,511],[0,"MethodStartLabel",512],[6,513],[8,71],[4,514,94],[4,344,515],[0,"LineContinuation",516],[4,517,94],[4,273,274],[5,"*="],[5,"/="],[5,"%="],[5,"+="],[5,"-="],[5,"<<="],[5,">>="],[5,">>>="],[5,"&="],[5,"^="],[5,"|="],[4,518,519],[4,3,520,3,190,3,117,3,190],[0,"AssignmentExpressionNoIn",521],[6,522],[4,321,523],[4,524,3,525,526],[3,524,527],[8,528],[0,"CASE",529],[5,"null"],[4,530,129],[4,531,129],[5,"\uD82C"],[2,"[\\uDC00\\uDC01]"],[5,"\uD808"],[2,"[\\uDC00-\\uDF6E]"],[5,"\uD869"],[2,"[\\uDED6\\uDF00]"],[5,"\uD809"],[2,"[\\uDC00-\\uDC62]"],[2,"[\\uDC00-\\uDC19\\uDC34-\\uDC4D\\uDC68-\\uDC81\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB5\\uDCD0-\\uDCE9\\uDD04\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD38\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD6C-\\uDD85\\uDDA0-\\uDDB9\\uDDD4-\\uDDED\\uDE08-\\uDE21\\uDE3C-\\uDE55\\uDE70-\\uDE89\\uDEA8-\\uDEC0\\uDEE2-\\uDEFA\\uDF1C-\\uDF34\\uDF56-\\uDF6E\\uDF90-\\uDFA8\\uDFCA\\uDC1A-\\uDC33\\uDC4E-\\uDC54\\uDC56-\\uDC67\\uDC82-\\uDC9B\\uDCB6-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDCCF\\uDCEA-\\uDD03\\uDD1E-\\uDD37\\uDD52-\\uDD6B\\uDD86-\\uDD9F\\uDDBA-\\uDDD3\\uDDEE-\\uDE07\\uDE22-\\uDE3B\\uDE56-\\uDE6F\\uDE8A-\\uDEA5\\uDEC2-\\uDEDA\\uDEDC-\\uDEE1\\uDEFC-\\uDF14\\uDF16-\\uDF1B\\uDF36-\\uDF4E\\uDF50-\\uDF55\\uDF70-\\uDF88\\uDF8A-\\uDF8F\\uDFAA-\\uDFC2\\uDFC4-\\uDFC9\\uDFCB]"],[2,"[\\uDC03-\\uDC37\\uDC83-\\uDCAF]"],[2,"[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDF00-\\uDF1E\\uDF30-\\uDF40\\uDF42-\\uDF49\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF\\uDD40-\\uDD74\\uDF41\\uDF4A\\uDFD1-\\uDFD5]"],[5,"\uD80C"],[2,"[\\uDC00-\\uDFFF]"],[2,"[\\uDC00-\\uDC9D]"],[5,"\uD86E"],[2,"[\\uDC1D]"],[5,"\uD803"],[2,"[\\uDC00-\\uDC48]"],[5,"\uD840"],[2,"[\\uDC00]"],[5,"\uD87E"],[2,"[\\uDC00-\\uDE1D]"],[5,"\uD86D"],[2,"[\\uDF34\\uDF40]"],[5,"\uD81A"],[2,"[\\uDC00-\\uDE38]"],[2,"[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDD00-\\uDD15\\uDD20-\\uDD39\\uDE00\\uDE10-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE33\\uDE60-\\uDE7C\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF60-\\uDF72]"],[5,"\uD80D"],[2,"[\\uDC00-\\uDC2E]"],[5,"u"],[0,"HexDigit",532],[3,306,100,185],[4,54,533,56],[4,3,54,3,534,3,56],[4,53,535],[4,3,536],[9,537],[0,"EscapeSequence",538],[4,344,234],[9,539],[0,"LogicalAndExpression",540],[6,541],[5,"?"],[3,542,543],[4,3,185,3,468],[6,544],[0,"MemberExpression",545],[0,"Arguments",546],[6,547],[4,548,3,359],[4,3,273,274,3,468],[4,382,129],[5,"true"],[5,"false"],[2,"[0-9a-fA-F]"],[8,549],[0,"MethodReturnType",550],[8,551],[0,"MethodLabel",552],[3,553,344,10],[3,554,555,556,345],[3,557,344,10],[4,558,559],[4,3,560,3,518],[4,284,3,316,3,468],[0,"ConditionalExpressionNoIn",561],[4,3,185,3,321],[4,562,563],[4,54,3,564,3,56],[4,3,565],[0,"NEW",566],[4,567,568],[0,"Type",569],[4,3,117,570,3,53],[4,53,3,117,570,3,53],[2,"[\"]"],[0,"CharacterEscapeSequence",571],[4,572,573],[0,"HexEscapeSequence",574],[2,"[']"],[0,"BitwiseOrExpression",575],[6,576],[5,"||"],[4,577,578],[3,579,580,581],[6,582],[8,583],[3,525,584,585],[4,386,129],[0,"AccessorsConfiguration",586],[6,587],[4,588,589],[8,590],[3,591,592],[5,"0"],[9,593],[4,594,508,508],[4,595,596],[4,3,597,3,558],[0,"LogicalOrExpressionNoIn",598],[8,599],[0,"PrimaryExpression",600],[0,"FunctionExpression",601],[4,548,3,524,3,525],[4,3,602],[0,"ArgumentList",603],[0,"BracketedAccessor",604],[0,"DotAccessor",605],[3,606,607,608,609],[4,3,185,3,567],[3,389,53],[6,610],[4,3,54,3,611,3,56],[0,"SingleEscapeCharacter",612],[0,"NonEscapeCharacter",613],[0,"DecimalDigit",614],[5,"x"],[0,"BitwiseXOrExpression",615],[6,616],[5,"&&"],[4,617,618],[4,3,520,3,468,3,117,3,468],[3,619,53,620,621,622,623],[4,52,3,624,3,54,3,55,3,56,3,57,3,58,3,59],[3,584,585],[4,190,3,625],[4,124,3,102,3,127],[4,626,3,131],[0,"IvarPropertyName",627],[0,"IvarGetterName",628],[0,"IvarSetterName",629],[5,"readonly"],[4,3,588],[0,"MethodParameterType",550],[2,"['\"\\\\bfnrtv]"],[4,138,630,94],[2,"[0-9]"],[4,631,632],[4,3,633,274,3,595],[0,"LogicalAndExpressionNoIn",634],[6,635],[0,"THIS",636],[0,"Literal",637],[0,"ArrayLiteral",638],[0,"ObjectLiteral",639],[4,54,3,102,3,56],[8,53],[6,640],[5,"."],[4,641,3,273,3,53],[4,642,3,273,3,53],[4,643,3,273,3,53,644],[9,645],[0,"BitwiseAndExpression",646],[6,647],[5,"|"],[4,648,649],[4,3,560,3,617],[4,387,129],[3,299,300,650,136,651],[4,124,3,652,3,127],[4,57,3,653,3,59],[4,185,3,190],[5,"property"],[5,"getter"],[5,"setter"],[8,654],[0,"EscapeCharacter",655],[4,656,657],[4,3,658,274,3,631],[0,"BitwiseOrExpressionNoIn",659],[6,660],[0,"NumericLiteral",661],[0,"RegularExpressionLiteral",662],[0,"ElementList",663],[8,664],[4,3,117],[3,591,593,594,507],[0,"EqualityExpression",665],[6,666],[5,"^"],[4,667,668],[4,3,597,3,648],[4,669,670],[4,671,672,671,673],[4,674,675,3,676],[4,677,3,678],[4,679,680],[4,3,681,274,3,656],[0,"BitwiseXOrExpressionNoIn",682],[6,683],[3,684,685],[9,221],[5,"/"],[0,"RegularExpressionBody",686],[0,"RegularExpressionFlags",222],[6,687],[6,688],[8,190],[0,"PropertyNameAndValueList",689],[8,185],[0,"RelationalExpression",690],[6,691],[5,"&"],[4,692,693],[4,3,633,274,3,667],[0,"DecimalLiteral",694],[0,"HexIntegerLiteral",695],[4,696,697],[4,185,3],[4,3,190,698],[4,699,700],[4,701,702],[4,3,703,3,679],[0,"BitwiseAndExpressionNoIn",704],[6,705],[4,706,707],[4,572,708,709],[0,"RegularExpressionFirstChar",710],[6,711],[7,712],[0,"PropertyAssignment",713],[6,714],[0,"ShiftExpression",715],[6,716],[0,"EqualityOperator",717],[4,718,719],[4,3,658,274,3,692],[3,720,721,722],[8,723],[2,"[Xx]"],[7,508],[3,724,725,726],[0,"RegularExpressionChar",727],[4,3,185],[3,728,729,730],[4,3,185,3,699],[4,731,732],[4,3,733,3,701],[3,734,735,736,737],[0,"EqualityExpressionNoIn",738],[6,739],[4,722,626,740],[4,626,741],[0,"DecimalIntegerLiteral",742],[0,"ExponentPart",743],[4,744,745],[0,"RegularExpressionBackslashSequence",746],[0,"RegularExpressionClass",747],[3,748,725,726],[4,749,3,117,3,190],[0,"PropertyGetter",750],[0,"PropertySetter",751],[0,"AdditiveExpression",752],[6,753],[0,"RelationalOperator",754],[5,"==="],[5,"!=="],[5,"=="],[5,"!="],[4,755,756],[4,3,681,274,3,718],[6,593],[7,593],[3,572,757],[4,758,759],[9,760],[0,"RegularExpressionNonTerminator",95],[4,344,745],[4,124,761,127],[4,762,745],[0,"PropertyName",763],[4,764,3,749,3,54,3,56,3,57,3,58,3,59],[4,765,3,749,3,54,3,766,3,56,3,57,3,58,3,59],[4,767,768],[4,3,769,3,731],[3,770,771,179,181,772,200],[0,"RelationalExpressionNoIn",773],[6,774],[4,775,740],[2,"[eE]"],[0,"SignedInteger",776],[2,"[*\\u005C/[]"],[6,777],[9,778],[3,131,136,650],[5,"get"],[5,"set"],[0,"PropertySetParameterList",53],[0,"MultiplicativeExpression",779],[6,780],[0,"ShiftOperator",781],[5,"<="],[5,">="],[0,"INSTANCEOF",782],[4,701,783],[4,3,703,3,755],[2,"[1-9]"],[4,784,741],[0,"RegularExpressionClassChar",785],[2,"[\\u005C/[]"],[4,786,787],[4,3,788,3,767],[3,789,790,791],[4,385,129],[6,792],[8,793],[3,794,725],[0,"UnaryExpression",795],[6,796],[0,"AdditiveOperator",797],[5,"<<"],[5,">>"],[5,">>>"],[4,3,798,3,701],[2,"[+-]"],[4,799,745],[3,800,801,802,803,804,805,806,807,808,809],[4,3,810,3,786],[4,811,274],[0,"RelationalOperatorNoIn",812],[9,813],[0,"PostfixExpression",814],[4,815,3,786],[4,816,3,786],[4,817,3,786],[4,818,3,786],[4,819,3,786],[4,820,3,786],[4,821,3,786],[4,822,3,786],[4,823,3,786],[0,"MultiplicativeOperator",824],[3,825,826],[3,770,771,179,181,772],[2,"[\\u005C\\]]"],[4,284,827],[0,"DELETE",828],[0,"VOID",829],[0,"TYPEOF",830],[5,"++"],[5,"--"],[5,"+"],[5,"-"],[5,"~"],[5,"!"],[4,831,274],[4,820,832],[4,821,833],[8,834],[4,384,129],[4,389,129],[4,388,129],[3,835,671,836],[9,820],[9,821],[4,111,837],[5,"*"],[5,"%"],[3,818,819],[0,"%start",839],[4,840,841,840],[0,"%_",842],[8,843],[6,844],[0,"%SourceElements",845],[3,846,847,848],[4,849,850],[0,"%WhiteSpace",14],[0,"%LineTerminator",15],[0,"%Comment",851],[0,"%SourceElement",852],[6,853],[3,854,855],[3,856,857,858,859],[4,840,849],[0,"%MultiLineComment",25],[0,"%SingleLineComment",860],[0,"%Statement",861],[0,"%FunctionDeclaration",862],[0,"%ClassDeclaration",863],[0,"%ImportStatement",864],[4,34,865],[3,866,867,868,869,870,871,872,873,874,875,876,877,878,879,880,881],[4,882,840,883,840,54,840,884,840,56,840,57,840,885,840,59],[4,60,840,883,840,886,840,57,840,887,840,59,840,888,840,64],[4,65,840,889],[6,890],[0,"%Block",891],[0,"%VariableStatement",892],[0,"%EmptyStatement",71],[0,"%ExpressionStatement",893],[0,"%IfStatement",894],[0,"%IterationStatement",895],[0,"%ContinueStatement",896],[0,"%BreakStatement",897],[0,"%ReturnStatement",898],[0,"%WithStatement",899],[0,"%LabelledStatement",900],[0,"%SwitchStatement",901],[0,"%ThrowStatement",902],[0,"%TryStatement",903],[0,"%DebuggerStatement",904],[0,"%MessageStatement",905],[0,"%FUNCTION",906],[0,"%Identifier",907],[8,908],[0,"%FunctionBody",839],[8,909],[6,910],[0,"%ClassBody",911],[3,912,913],[0,"%SingleLineCommentChar",914],[12,915,916],[4,917,840,918,919,920],[4,921,922,920],[4,923,840,54,840,922,840,56,840,856,924],[3,925,926,927,928,929],[4,930,931,932],[4,933,931,932],[4,934,931,935],[4,936,840,54,840,922,840,56,840,856],[4,883,840,117,840,856],[4,937,840,54,840,922,840,56,840,938],[4,939,931,935],[4,940,840,866,840,941],[4,942,840,920],[4,124,840,943,840,883,944,840,127],[4,128,945],[12,946,947],[0,"%FormalParameterList",948],[0,"%SuperclassDeclaration",949],[0,"%CompoundIvarDeclaration",950],[8,951],[0,"%LocalFilePath",952],[0,"%StandardFilePath",953],[4,954,94],[4,57,840,955,840,59],[11,"%BadBlock",956,"Missing ending brace"],[0,"%VAR",957],[0,"%VariableDeclaration",958],[6,959],[0,"%EOS",960],[9,961],[0,"%Expression",962],[0,"%IF",963],[8,964],[0,"%DoWhileStatement",965],[0,"%WhileStatement",966],[0,"%ForStatement",967],[0,"%ForInStatement",968],[0,"%EachStatement",969],[0,"%CONTINUE",970],[0,"%__",971],[3,972,973],[0,"%BREAK",974],[0,"%RETURN",975],[3,973,976],[0,"%WITH",977],[0,"%SWITCH",978],[0,"%CaseBlock",979],[0,"%THROW",980],[0,"%TRY",981],[3,982,983],[0,"%DEBUGGER",984],[3,985,922],[8,986],[9,987],[4,988,989],[0,"%BadIdentifier",990],[4,883,991],[4,117,840,883],[4,992,840,993,994,840,920],[0,"%ClassElements",995],[0,"%StringLiteral",996],[4,179,840,180,840,181],[9,847],[8,997],[4,57,840,955,840],[4,183,945],[4,883,998],[4,840,185,840,918],[3,999,1000,1001,1002],[3,57,882],[4,1003,1004],[4,192,945],[4,840,1005,840,856],[4,1006,840,856,840,1007,840,54,840,922,840,56,840,920],[4,1007,840,54,840,922,840,56,840,856],[4,1008,840,54,840,1009,840,71,840,1010,840,71,840,1010,840,56,840,856],[4,1008,840,54,840,1011,840,1012,840,922,840,56,840,856],[4,201,840,54,840,1011,840,1012,840,922,840,56,840,856],[4,202,945],[6,1013],[4,883,920],[0,"%SemicolonInsertionEOS",1014],[4,205,945],[4,206,945],[4,922,920],[4,207,945],[4,208,945],[4,57,840,1015,840,1016,840,1015,840,59],[4,211,945],[4,212,945],[4,1017,1018],[0,"%Finally",1019],[4,216,945],[0,"%SuperExpression",217],[4,117,922,1020],[0,"%IdentifierPart",1021],[9,1022],[0,"%IdentifierName",1023],[3,1024,1025],[6,1026],[0,"%IvarType",1027],[0,"%IvarDeclaration",1028],[6,1029],[4,840,1030,1031,840],[3,1032,1033],[0,"%StatementList",1034],[8,1035],[4,840,71],[4,931,1036],[4,931,235],[4,931,1037],[0,"%AssignmentExpression",1038],[6,1039],[0,"%ELSE",1040],[0,"%DO",1041],[0,"%WHILE",1042],[0,"%FOR",1043],[8,1044],[8,922],[0,"%ForInFirstExpression",1045],[0,"%IN",1046],[3,846,1047,855],[3,1048,1000,1001,1002],[8,1049],[8,1050],[0,"%Catch",1051],[8,1052],[4,1053,840,866],[6,1054],[3,1055,1056,1057,1058,1059,1060],[4,1061,945],[4,1055,1062],[11,"%ReservedWordIdentifier",1022,"Identifier cannot be a reserved word"],[11,"%DigitIdentifier",1063,"Identifier cannot start with a digit"],[4,840,185,840,883],[4,1064,1065],[4,883,840,1066],[4,840,185,840,993],[0,"%ClassElement",1067],[6,1068],[4,266,1069,266],[4,268,1070,268],[4,856,1071],[4,840,273,274,840,1003],[0,"%LineTerminatorSequence",275],[0,"%EOF",276],[3,1072,1073],[4,840,185,840,1003],[4,279,945],[4,280,945],[4,281,945],[4,282,945],[0,"%ForFirstExpression",1074],[3,1075,1076],[4,286,945],[0,"%SingleLineMultiLineComment",1077],[4,931,71],[0,"%CaseClauses",1078],[0,"%DefaultClause",1079],[4,1080,840,54,840,883,840,56,840,866],[4,840,983],[0,"%FINALLY",1081],[4,840,883,117,840,922],[0,"%IdentifierStart",1082],[0,"%UnicodeCombiningMark",292],[0,"%UnicodeDigit",293],[0,"%UnicodeConnectorPunctuation",294],[0,"%ZWNJ",295],[0,"%ZWJ",296],[0,"%ReservedWord",1083],[6,987],[4,1057,1084],[0,"%IvarTypeElement",1085],[6,1086],[8,1087],[3,1088,856,857],[4,840,1030],[6,1089],[6,1090],[6,1091],[4,1075,840,1092,840,1003],[0,"%ConditionalExpression",1093],[3,1094,1095],[0,"%LeftHandSideExpression",1096],[4,917,840,1097],[4,31,1098,33],[4,1099,1100],[4,1101,840,117,1102],[0,"%CATCH",1103],[4,328,945],[3,1104,302,1105],[3,1106,1107,1108,1109],[7,987],[4,1110,1111],[4,840,1064],[0,"%Accessors",1112],[0,"%MethodDeclaration",1113],[0,"%DoubleStringCharacter",1114],[0,"%SingleStringCharacter",1115],[4,840,856],[0,"%AssignmentOperator",353],[4,1116,1117],[0,"%ExpressionNoIn",1118],[4,917,840,1119],[3,1120,1121],[0,"%VariableDeclarationNoIn",1122],[6,1123],[0,"%CaseClause",1124],[6,1125],[0,"%DEFAULT",1126],[8,1127],[4,366,945],[0,"%UnicodeLetter",343],[4,344,1128],[0,"%Keyword",339],[0,"%FutureReservedWord",340],[0,"%NullLiteral",1129],[0,"%BooleanLiteral",1130],[9,1131],[3,883,442],[4,443,1132],[4,445,1133,840,1134,1135,840,449,840,57,840,885,840,59],[3,1136,1137,1138],[3,1139,1137,1138],[0,"%LogicalOrExpression",1140],[8,1141],[4,1142,1143],[0,"%VariableDeclarationListNoIn",1144],[0,"%CallExpression",1145],[0,"%NewExpression",1146],[4,883,1147],[4,93,954,94],[4,1148,840,922,840,117,1102],[4,840,1099],[4,383,945],[4,840,997],[0,"%UnicodeEscapeSequence",1149],[0,"%NULL",1150],[3,1151,1152],[4,1111,840,1153],[8,1154],[8,1155],[0,"%MethodStartLabel",1156],[6,1157],[4,1158,94],[4,344,1159],[0,"%LineContinuation",1160],[4,1161,94],[4,1162,1163],[4,840,520,840,1003,840,117,840,1003],[0,"%AssignmentExpressionNoIn",1164],[6,1165],[4,1097,1166],[4,1167,840,1168,1169],[3,1167,1170],[8,1171],[0,"%CASE",1172],[4,507,1173,1173,1173,1173],[4,475,945],[0,"%TRUE",1174],[0,"%FALSE",1175],[3,1087,920,185],[4,54,1176,56],[4,840,54,840,1177,840,56],[4,883,1178],[4,840,1179],[9,1180],[0,"%EscapeSequence",1181],[4,344,1036],[9,1182],[0,"%LogicalAndExpression",1183],[6,1184],[3,1185,1186],[4,840,185,840,1142],[6,1187],[0,"%MemberExpression",1188],[0,"%Arguments",1189],[6,1190],[4,1191,840,1121],[4,840,273,274,840,1142],[4,382,945],[0,"%HexDigit",532],[4,530,945],[4,531,945],[8,1192],[0,"%MethodReturnType",1193],[8,1194],[0,"%MethodLabel",1195],[3,553,344,847],[3,1196,1197,1198,1128],[3,557,344,847],[4,1199,1200],[4,840,560,840,1162],[4,1075,840,1092,840,1142],[0,"%ConditionalExpressionNoIn",1201],[4,840,185,840,1097],[4,1202,1203],[4,54,840,1204,840,56],[4,840,1205],[0,"%NEW",1206],[4,1207,1208],[0,"%Type",1209],[4,840,117,1210,840,883],[4,883,840,117,1210,840,883],[0,"%CharacterEscapeSequence",1211],[4,572,1212],[0,"%HexEscapeSequence",1213],[0,"%BitwiseOrExpression",1214],[6,1215],[4,1216,1217],[3,1218,1219,1220],[6,1221],[8,1222],[3,1168,1223,1224],[4,386,945],[0,"%AccessorsConfiguration",1225],[6,1226],[4,1227,1228],[8,1229],[3,1230,1231],[9,1232],[4,594,1173,1173],[4,1233,1234],[4,840,597,840,1199],[0,"%LogicalOrExpressionNoIn",1235],[8,1236],[0,"%PrimaryExpression",1237],[0,"%FunctionExpression",1238],[4,1191,840,1167,840,1168],[4,840,1239],[0,"%ArgumentList",1240],[0,"%BracketedAccessor",1241],[0,"%DotAccessor",1242],[3,1243,1244,1245,609],[4,840,185,840,1207],[3,389,883],[6,1246],[4,840,54,840,1247,840,56],[0,"%SingleEscapeCharacter",612],[0,"%NonEscapeCharacter",1248],[0,"%DecimalDigit",614],[0,"%BitwiseXOrExpression",1249],[6,1250],[4,1251,1252],[4,840,520,840,1142,840,117,840,1142],[3,1253,883,1254,1255,1256,1257],[4,882,840,1258,840,54,840,884,840,56,840,57,840,885,840,59],[3,1223,1224],[4,1003,840,1259],[4,124,840,922,840,127],[4,626,840,989],[0,"%IvarPropertyName",1260],[0,"%IvarGetterName",1261],[0,"%IvarSetterName",1262],[4,840,1227],[0,"%MethodParameterType",1193],[4,954,1263,94],[4,1264,1265],[4,840,633,274,840,1233],[0,"%LogicalAndExpressionNoIn",1266],[6,1267],[0,"%THIS",1268],[0,"%Literal",1269],[0,"%ArrayLiteral",1270],[0,"%ObjectLiteral",1271],[4,54,840,922,840,56],[8,883],[6,1272],[4,641,840,273,840,883],[4,642,840,273,840,883],[4,643,840,273,840,883,1273],[9,1274],[0,"%BitwiseAndExpression",1275],[6,1276],[4,1277,1278],[4,840,560,840,1251],[4,387,945],[3,1108,1109,1279,952,1280],[4,124,840,1281,840,127],[4,57,840,1282,840,59],[4,185,840,1003],[8,1283],[0,"%EscapeCharacter",1284],[4,1285,1286],[4,840,658,274,840,1264],[0,"%BitwiseOrExpressionNoIn",1287],[6,1288],[0,"%NumericLiteral",1289],[0,"%RegularExpressionLiteral",1290],[0,"%ElementList",1291],[8,1292],[4,840,117],[3,1230,1232,594,507],[0,"%EqualityExpression",1293],[6,1294],[4,1295,1296],[4,840,597,840,1277],[4,1297,1298],[4,671,1299,671,1300],[4,1301,1302,840,1303],[4,1304,840,678],[4,1305,1306],[4,840,681,274,840,1285],[0,"%BitwiseXOrExpressionNoIn",1307],[6,1308],[3,1309,1310],[9,1055],[0,"%RegularExpressionBody",1311],[0,"%RegularExpressionFlags",1062],[6,1312],[6,1313],[8,1003],[0,"%PropertyNameAndValueList",1314],[0,"%RelationalExpression",1315],[6,1316],[4,1317,1318],[4,840,633,274,840,1295],[0,"%DecimalLiteral",1319],[0,"%HexIntegerLiteral",1320],[4,1321,1322],[4,185,840],[4,840,1003,1323],[4,1324,1325],[4,1326,1327],[4,840,1328,840,1305],[0,"%BitwiseAndExpressionNoIn",1329],[6,1330],[4,1331,1332],[4,572,708,1333],[0,"%RegularExpressionFirstChar",1334],[6,1335],[7,1336],[0,"%PropertyAssignment",1337],[6,1338],[0,"%ShiftExpression",1339],[6,1340],[0,"%EqualityOperator",717],[4,1341,1342],[4,840,658,274,840,1317],[3,1343,1344,1345],[8,1346],[7,1173],[3,1347,1348,1349],[0,"%RegularExpressionChar",1350],[4,840,185],[3,1351,1352,1353],[4,840,185,840,1324],[4,1354,1355],[4,840,1356,840,1326],[0,"%EqualityExpressionNoIn",1357],[6,1358],[4,1345,626,1359],[4,626,1360],[0,"%DecimalIntegerLiteral",1361],[0,"%ExponentPart",1362],[4,744,1363],[0,"%RegularExpressionBackslashSequence",1364],[0,"%RegularExpressionClass",1365],[3,1366,1348,1349],[4,1367,840,117,840,1003],[0,"%PropertyGetter",1368],[0,"%PropertySetter",1369],[0,"%AdditiveExpression",1370],[6,1371],[0,"%RelationalOperator",1372],[4,1373,1374],[4,840,681,274,840,1341],[6,1232],[7,1232],[3,572,1375],[4,758,1376],[0,"%RegularExpressionNonTerminator",914],[4,344,1363],[4,124,1377,127],[4,762,1363],[0,"%PropertyName",1378],[4,764,840,1367,840,54,840,56,840,57,840,885,840,59],[4,765,840,1367,840,54,840,1379,840,56,840,57,840,885,840,59],[4,1380,1381],[4,840,1382,840,1354],[3,770,771,179,181,1383,1012],[0,"%RelationalExpressionNoIn",1384],[6,1385],[4,775,1359],[0,"%SignedInteger",1386],[6,1387],[3,989,952,1279],[0,"%PropertySetParameterList",883],[0,"%MultiplicativeExpression",1388],[6,1389],[0,"%ShiftOperator",781],[0,"%INSTANCEOF",1390],[4,1326,1391],[4,840,1328,840,1373],[4,784,1360],[0,"%RegularExpressionClassChar",1392],[4,1393,1394],[4,840,1395,840,1380],[4,385,945],[6,1396],[3,1397,1348],[0,"%UnaryExpression",1398],[6,1399],[0,"%AdditiveOperator",797],[4,840,1400,840,1326],[4,799,1363],[3,1401,1402,1403,1404,1405,1406,1407,1408,1409,1410],[4,840,1411,840,1393],[0,"%RelationalOperatorNoIn",1412],[0,"%PostfixExpression",1413],[4,1414,840,1393],[4,1415,840,1393],[4,1416,840,1393],[4,818,840,1393],[4,819,840,1393],[4,820,840,1393],[4,821,840,1393],[4,822,840,1393],[4,823,840,1393],[0,"%MultiplicativeOperator",824],[3,770,771,179,181,1383],[4,1075,1417],[0,"%DELETE",1418],[0,"%VOID",1419],[0,"%TYPEOF",1420],[8,1421],[4,384,945],[4,389,945],[4,388,945],[4,931,837]],"nameToUID":{"start":1,"_":3,"SourceElements":6,"WhiteSpace":9,"LineTerminator":10,"Comment":11,"SourceElement":12,"MultiLineComment":19,"SingleLineComment":20,"Statement":21,"FunctionDeclaration":22,"ClassDeclaration":23,"ImportStatement":24,"Block":36,"VariableStatement":37,"EmptyStatement":38,"ExpressionStatement":39,"IfStatement":40,"IterationStatement":41,"ContinueStatement":42,"BreakStatement":43,"ReturnStatement":44,"WithStatement":45,"LabelledStatement":46,"SwitchStatement":47,"ThrowStatement":48,"TryStatement":49,"DebuggerStatement":50,"MessageStatement":51,"FUNCTION":52,"Identifier":53,"FunctionBody":58,"ClassBody":63,"SingleLineCommentChar":68,"FormalParameterList":87,"SuperclassDeclaration":88,"CompoundIvarDeclaration":89,"LocalFilePath":91,"StandardFilePath":92,"VAR":97,"VariableDeclaration":98,"EOS":100,"Expression":102,"IF":103,"DoWhileStatement":105,"WhileStatement":106,"ForStatement":107,"ForInStatement":108,"EachStatement":109,"CONTINUE":110,"__":111,"BREAK":113,"RETURN":114,"WITH":116,"SWITCH":118,"CaseBlock":119,"THROW":120,"TRY":121,"DEBUGGER":123,"IdentifierName":131,"ClassElements":135,"StringLiteral":136,"StatementList":139,"SemicolonInsertionEOS":156,"Finally":166,"SuperExpression":168,"IdentifierPart":170,"IvarType":174,"IvarDeclaration":175,"AssignmentExpression":190,"ELSE":193,"DO":194,"WHILE":195,"FOR":196,"ForInFirstExpression":199,"IN":200,"Catch":213,"ReservedWord":220,"IdentifierStart":221,"ClassElement":227,"LineTerminatorSequence":234,"EOF":236,"ForFirstExpression":243,"SingleLineMultiLineComment":246,"CaseClauses":248,"DefaultClause":249,"FINALLY":252,"UnicodeCombiningMark":254,"UnicodeDigit":255,"UnicodeConnectorPunctuation":256,"ZWNJ":257,"ZWJ":258,"IvarTypeElement":261,"ConditionalExpression":278,"LeftHandSideExpression":284,"CATCH":290,"Keyword":297,"FutureReservedWord":298,"NullLiteral":299,"BooleanLiteral":300,"UnicodeLetter":301,"Accessors":306,"MethodDeclaration":307,"DoubleStringCharacter":308,"SingleStringCharacter":309,"AssignmentOperator":316,"ExpressionNoIn":318,"VariableDeclarationNoIn":321,"CaseClause":323,"DEFAULT":325,"NULL":341,"UnicodeEscapeSequence":345,"LogicalOrExpression":354,"VariableDeclarationListNoIn":357,"CallExpression":358,"NewExpression":359,"TRUE":420,"FALSE":421,"MethodStartLabel":447,"LineContinuation":452,"AssignmentExpressionNoIn":468,"CASE":474,"HexDigit":508,"EscapeSequence":515,"LogicalAndExpression":518,"MemberExpression":524,"Arguments":525,"MethodReturnType":534,"MethodLabel":536,"ConditionalExpressionNoIn":543,"NEW":548,"Type":550,"CharacterEscapeSequence":554,"HexEscapeSequence":556,"BitwiseOrExpression":558,"AccessorsConfiguration":567,"LogicalOrExpressionNoIn":577,"PrimaryExpression":579,"FunctionExpression":580,"ArgumentList":583,"BracketedAccessor":584,"DotAccessor":585,"SingleEscapeCharacter":591,"NonEscapeCharacter":592,"DecimalDigit":593,"BitwiseXOrExpression":595,"IvarPropertyName":606,"IvarGetterName":607,"IvarSetterName":608,"MethodParameterType":611,"LogicalAndExpressionNoIn":617,"THIS":619,"Literal":620,"ArrayLiteral":621,"ObjectLiteral":622,"BitwiseAndExpression":631,"EscapeCharacter":645,"BitwiseOrExpressionNoIn":648,"NumericLiteral":650,"RegularExpressionLiteral":651,"ElementList":652,"EqualityExpression":656,"BitwiseXOrExpressionNoIn":667,"RegularExpressionBody":672,"RegularExpressionFlags":673,"PropertyNameAndValueList":677,"RelationalExpression":679,"DecimalLiteral":684,"HexIntegerLiteral":685,"BitwiseAndExpressionNoIn":692,"RegularExpressionFirstChar":696,"PropertyAssignment":699,"ShiftExpression":701,"EqualityOperator":703,"RegularExpressionChar":711,"EqualityExpressionNoIn":718,"DecimalIntegerLiteral":722,"ExponentPart":723,"RegularExpressionBackslashSequence":725,"RegularExpressionClass":726,"PropertyGetter":729,"PropertySetter":730,"AdditiveExpression":731,"RelationalOperator":733,"RegularExpressionNonTerminator":745,"PropertyName":749,"RelationalExpressionNoIn":755,"SignedInteger":759,"PropertySetParameterList":766,"MultiplicativeExpression":767,"ShiftOperator":769,"INSTANCEOF":772,"RegularExpressionClassChar":777,"UnaryExpression":786,"AdditiveOperator":788,"RelationalOperatorNoIn":798,"PostfixExpression":800,"MultiplicativeOperator":810,"DELETE":815,"VOID":816,"TYPEOF":817,"%start":838,"%_":840,"%SourceElements":843,"%WhiteSpace":846,"%LineTerminator":847,"%Comment":848,"%SourceElement":849,"%MultiLineComment":854,"%SingleLineComment":855,"%Statement":856,"%FunctionDeclaration":857,"%ClassDeclaration":858,"%ImportStatement":859,"%Block":866,"%VariableStatement":867,"%EmptyStatement":868,"%ExpressionStatement":869,"%IfStatement":870,"%IterationStatement":871,"%ContinueStatement":872,"%BreakStatement":873,"%ReturnStatement":874,"%WithStatement":875,"%LabelledStatement":876,"%SwitchStatement":877,"%ThrowStatement":878,"%TryStatement":879,"%DebuggerStatement":880,"%MessageStatement":881,"%FUNCTION":882,"%Identifier":883,"%FunctionBody":885,"%ClassBody":888,"%SingleLineCommentChar":890,"%FormalParameterList":908,"%SuperclassDeclaration":909,"%CompoundIvarDeclaration":910,"%LocalFilePath":912,"%StandardFilePath":913,"%BadBlock":916,"%VAR":917,"%VariableDeclaration":918,"%EOS":920,"%Expression":922,"%IF":923,"%DoWhileStatement":925,"%WhileStatement":926,"%ForStatement":927,"%ForInStatement":928,"%EachStatement":929,"%CONTINUE":930,"%__":931,"%BREAK":933,"%RETURN":934,"%WITH":936,"%SWITCH":937,"%CaseBlock":938,"%THROW":939,"%TRY":940,"%DEBUGGER":942,"%BadIdentifier":947,"%ClassElements":951,"%StringLiteral":952,"%SemicolonInsertionEOS":973,"%Finally":983,"%SuperExpression":985,"%IdentifierPart":987,"%IdentifierName":989,"%IvarType":992,"%IvarDeclaration":993,"%StatementList":997,"%AssignmentExpression":1003,"%ELSE":1005,"%DO":1006,"%WHILE":1007,"%FOR":1008,"%ForInFirstExpression":1011,"%IN":1012,"%Catch":1017,"%ReservedWordIdentifier":1024,"%DigitIdentifier":1025,"%ClassElement":1030,"%LineTerminatorSequence":1036,"%EOF":1037,"%ForFirstExpression":1044,"%SingleLineMultiLineComment":1047,"%CaseClauses":1049,"%DefaultClause":1050,"%FINALLY":1053,"%IdentifierStart":1055,"%UnicodeCombiningMark":1056,"%UnicodeDigit":1057,"%UnicodeConnectorPunctuation":1058,"%ZWNJ":1059,"%ZWJ":1060,"%ReservedWord":1061,"%IvarTypeElement":1064,"%ConditionalExpression":1073,"%LeftHandSideExpression":1075,"%CATCH":1080,"%Accessors":1087,"%MethodDeclaration":1088,"%DoubleStringCharacter":1089,"%SingleStringCharacter":1090,"%AssignmentOperator":1092,"%ExpressionNoIn":1094,"%VariableDeclarationNoIn":1097,"%CaseClause":1099,"%DEFAULT":1101,"%UnicodeLetter":1104,"%Keyword":1106,"%FutureReservedWord":1107,"%NullLiteral":1108,"%BooleanLiteral":1109,"%LogicalOrExpression":1116,"%VariableDeclarationListNoIn":1119,"%CallExpression":1120,"%NewExpression":1121,"%UnicodeEscapeSequence":1128,"%NULL":1129,"%MethodStartLabel":1134,"%LineContinuation":1138,"%AssignmentExpressionNoIn":1142,"%CASE":1148,"%TRUE":1151,"%FALSE":1152,"%EscapeSequence":1159,"%LogicalAndExpression":1162,"%MemberExpression":1167,"%Arguments":1168,"%HexDigit":1173,"%MethodReturnType":1177,"%MethodLabel":1179,"%ConditionalExpressionNoIn":1186,"%NEW":1191,"%Type":1193,"%CharacterEscapeSequence":1196,"%HexEscapeSequence":1198,"%BitwiseOrExpression":1199,"%AccessorsConfiguration":1207,"%LogicalOrExpressionNoIn":1216,"%PrimaryExpression":1218,"%FunctionExpression":1219,"%ArgumentList":1222,"%BracketedAccessor":1223,"%DotAccessor":1224,"%SingleEscapeCharacter":1230,"%NonEscapeCharacter":1231,"%DecimalDigit":1232,"%BitwiseXOrExpression":1233,"%IvarPropertyName":1243,"%IvarGetterName":1244,"%IvarSetterName":1245,"%MethodParameterType":1247,"%LogicalAndExpressionNoIn":1251,"%THIS":1253,"%Literal":1254,"%ArrayLiteral":1255,"%ObjectLiteral":1256,"%BitwiseAndExpression":1264,"%EscapeCharacter":1274,"%BitwiseOrExpressionNoIn":1277,"%NumericLiteral":1279,"%RegularExpressionLiteral":1280,"%ElementList":1281,"%EqualityExpression":1285,"%BitwiseXOrExpressionNoIn":1295,"%RegularExpressionBody":1299,"%RegularExpressionFlags":1300,"%PropertyNameAndValueList":1304,"%RelationalExpression":1305,"%DecimalLiteral":1309,"%HexIntegerLiteral":1310,"%BitwiseAndExpressionNoIn":1317,"%RegularExpressionFirstChar":1321,"%PropertyAssignment":1324,"%ShiftExpression":1326,"%EqualityOperator":1328,"%RegularExpressionChar":1335,"%EqualityExpressionNoIn":1341,"%DecimalIntegerLiteral":1345,"%ExponentPart":1346,"%RegularExpressionBackslashSequence":1348,"%RegularExpressionClass":1349,"%PropertyGetter":1352,"%PropertySetter":1353,"%AdditiveExpression":1354,"%RelationalOperator":1356,"%RegularExpressionNonTerminator":1363,"%PropertyName":1367,"%RelationalExpressionNoIn":1373,"%SignedInteger":1376,"%PropertySetParameterList":1379,"%MultiplicativeExpression":1380,"%ShiftOperator":1382,"%INSTANCEOF":1383,"%RegularExpressionClassChar":1387,"%UnaryExpression":1393,"%AdditiveOperator":1395,"%RelationalOperatorNoIn":1400,"%PostfixExpression":1401,"%MultiplicativeOperator":1411,"%DELETE":1414,"%VOID":1415,"%TYPEOF":1416}};


function Parser(/*String | CompiledGrammar*/ aGrammar)
{
    if (typeof aGrammar.valueOf() === "string")
        this.compiledGrammar = new (require("./compiledgrammar"))(aGrammar);
    else
        this.compiledGrammar = aGrammar;

    return this;
}

module.exports = Parser;

Parser.prototype.parse = function(input)
{
    return parse(this.compiledGrammar, input);
}

var NAME                = 0,
    DOT                 = 1,
    CHARACTER_CLASS     = 2,
    ORDERED_CHOICE      = 3,
    SEQUENCE            = 4,
    STRING_LITERAL      = 5,
    ZERO_OR_MORE        = 6,
    ONE_OR_MORE         = 7,
    OPTIONAL            = 8,
    NEGATIVE_LOOK_AHEAD = 9,
    POSITIVE_LOOK_AHEAD = 10,
    ERROR_NAME          = 11,
    ERROR_CHOICE        = 12;

function parse(aCompiledGrammar, input, name)
{
    var node = new SyntaxNode("#document", input, 0, 0),
        table = aCompiledGrammar.table,
        nameToUID = aCompiledGrammar.nameToUID;

    name = name || "start";

    // This is a stupid check.
    if (aCompiledGrammar.nameToUID["EOF"] !== undefined)
        table[0] = [SEQUENCE, nameToUID[name], nameToUID["EOF"]];

    if (!evaluate(new context(input, table), node, table, 0))
    {
        // This is a stupid check.
        if (aCompiledGrammar.nameToUID["EOF"] !== undefined)
            table[0] = [SEQUENCE, nameToUID["%" + name], nameToUID["EOF"]];

        node.children.length = 0;

        evaluate(new context(input, table), node, table, 0);

        node.traverse(
        {
            traverseTextNodes:false,
            enteredNode:function(node)
            {
                if (node.error)
                    console.log(node.message() + "\n");
            }
        });
    }

    return node;
}

exports.parse = parse;

function context(input, table)
{
    this.position = 0;
    this.input = input;
    this.memos = [];
    for (var i=0;i<table.length;++i)
        this.memos[i] = [];
}

function evaluate(context, parent, rules, rule_id)
{
    var rule = rules[rule_id],
        type = rule[0],
        input_length = context.input.length,
        memos = context.memos[rule_id];

    var uid = context.position,
        entry = memos[uid];

    if (entry === false)
        return false;
    else if (entry === true)
        return true;
    else if (entry)
    {
        if (parent)
            parent.children.push(entry.node);
        context.position = entry.position;
        return true;
    }

    switch (type)
    {
        case NAME:
        case ERROR_NAME:
            var node = new SyntaxNode(rule[1], context.input, context.position, 0, rule[3]);
            if (!evaluate(context, node, rules, rule[2]))
            {
                memos[uid] = false;
                return false;
            }
            node.range.length = context.position - node.range.location;
            memos[uid] = { node:node, position:context.position };

            if (parent)
                parent.children.push(node);
            return true;

        case CHARACTER_CLASS:
            var character = context.input.charAt(context.position);

            if (typeof rule[1] !== "function")
                rule[1] = new RegExp(rule[1], "g");

            if (character.match(rule[1]))
            {
                if (parent)
                    parent.children.push(character);
                ++context.position;
                return true;
            }
            memos[uid] = false;
            return false;

        case SEQUENCE:
            var index = 1,
                count = rule.length;

            for (; index < count; ++index)
                if (!evaluate(context, parent, rules, rule[index]))
                {
                    memos[uid] = false;
                    return false;
                }

            return true;

        case ORDERED_CHOICE:
        case ERROR_CHOICE:
            var index = 1,
                count = rule.length,
                position = context.position;

            for (; index < count; ++index)
            {
                // cache opportunity here.
                var child_count = parent && parent.children.length;

                if (evaluate(context, parent, rules, rule[index]))
                    return true;

                if (parent)
                    parent.children.length = child_count;
                context.position = position;
            }
            memos[uid] = false;
            return false;

        case STRING_LITERAL:
            var string = rule[1],
                string_length = string.length;

            if (string_length + context.position > input_length)
            {
                memos[uid] = false;
                return false;
            }

            var index = 0;

            for (; index < string_length; ++context.position, ++index)
                if (context.input.charAt(context.position) !== string.charAt(index))
                {
                    context.position -= index;
                    memos[uid] = false;
                    return false;
                }

//            memos[uid] = string;
            if (parent)
                parent.children.push(string);

            return true;
        case DOT:
            if (context.position < input_length)
            {
                if (parent)
                    parent.children.push(context.input.charAt(context.position));
                ++context.position;
                return true;
            }
            memos[uid] = false;
            return false;
        case POSITIVE_LOOK_AHEAD:
        case NEGATIVE_LOOK_AHEAD:
            var position = context.position,
                result = evaluate(context, null, rules, rule[1]) === (type === POSITIVE_LOOK_AHEAD);
            context.position = position;
            memos[uid] = result;

            return result;

        case ZERO_OR_MORE:
            var child,
                position = context.position,
                childCount = parent && parent.children.length;

            while (evaluate(context, parent, rules, rule[1]))
            {
                position = context.position,
                childCount = parent && parent.children.length;
            }

            context.position = position;
            if (parent)
                parent.children.length = childCount;

            return true;

        case ONE_OR_MORE:
            var position = context.position,
                childCount = parent && parent.children.length;
            if (!evaluate(context, parent, rules, rule[1]))
            {
                memos[uid] = false;
                context.position = position;
                if (parent)
                    parent.children.length = childCount;
                return false;
            }
            position = context.position,
            childCount = parent && parent.children.length;
            while (evaluate(context, parent, rules, rule[1]))
            {
                position = context.position;
                childCount = parent && parent.children.length;
            }
            context.position = position;
            if (parent)
                parent.children.length = childCount;
            return true;

        case OPTIONAL:
            var position = context.position,
                childCount = parent && parent.children.length;

            if (!evaluate(context, parent, rules, rule[1]))
            {
                context.position = position;

                if (parent)
                    parent.children.length = childCount;
            }

            return true;
    }
}

function SyntaxNode(/*String*/ aName, /*String*/ aSource, /*Number*/ aLocation, /*Number*/ aLength, /*String*/anErrorMessage)
{
    this.name = aName;
    this.source = aSource;
    this.range = { location:aLocation, length:aLength };
    this.children = [];

    if (anErrorMessage)
        this.error = anErrorMessage;
}

SyntaxNode.prototype.message = function()
{
    var source = this.source,
        lineNumber = 1,
        index = 0,
        start = 0,
        length = source.length,
        range = this.range;

    for (; index < range.location; ++index)
        if (source.charAt(index) === '\n')
        {
            ++lineNumber;
            start = index + 1;
        }

    for (; index < length; ++index)
        if (source.charAt(index) === '\n')
            break;

    var line = source.substring(start, index);
        message = line + "\n";

    message += (new Array(this.range.location - start + 1)).join(" ");
    message += (new Array(Math.min(range.length, line.length) + 1)).join("^") + "\n";
    message += "ERROR line " + lineNumber + ": " + this.error;

    return message;
}

SyntaxNode.prototype.toString = function(/*String*/ spaces)
{
    if (!spaces)
        spaces = "";

    var string = spaces + this.name +  " <" + this.innerText() + "> ",
        children = this.children,
        index = 0,
        count = children.length;

    for (; index < count; ++index)
    {
        var child = children[index];

        if (typeof child === "string")
            string += "\n" + spaces + "\t" + child;

        else
            string += "\n" + children[index].toString(spaces + '\t');
    }

    return string;
}

SyntaxNode.prototype.innerText = function()
{
    var range = this.range;

    return this.source.substr(range.location, range.length);
}

SyntaxNode.prototype.traverse = function(walker)
{
    if (!walker.enteredNode || walker.enteredNode(this) !== false)
    {
        var children = this.children,
            index = 0,
            count = children && children.length;

        for (; index < count; ++index)
        {
            var child = children[index];

            if (typeof child !== "string")
                child.traverse(walker);

            else if (walker.traversesTextNodes)
            {
                walker.enteredNode(child);
                walker.exitedNode(child);
            }
        }
    }

    if (walker.exitedNode)
        walker.exitedNode(this);
}


exports.Parser = new Parser(compiledGrammar);
})(window, Parser, { exports: Parser });

